[{"F:\\farmaFinal\\farma\\src\\index.js":"1","F:\\farmaFinal\\farma\\src\\App.js":"2","F:\\farmaFinal\\farma\\src\\context\\UserContext.js":"3","F:\\farmaFinal\\farma\\src\\context\\LangContext.js":"4","F:\\farmaFinal\\farma\\src\\components\\sideNav\\sideNav.js":"5","F:\\farmaFinal\\farma\\src\\pages\\index.js":"6","F:\\farmaFinal\\farma\\src\\components\\translate\\index.js":"7","F:\\farmaFinal\\farma\\src\\components\\sideBar\\sideBar\\sideBar.js":"8","F:\\farmaFinal\\farma\\src\\components\\navBar\\navBar.js":"9","F:\\farmaFinal\\farma\\src\\components\\sideBar\\sidebarHover\\sidebarHover.js":"10","F:\\farmaFinal\\farma\\src\\pages\\admin\\index.js":"11","F:\\farmaFinal\\farma\\src\\utils\\getText.js":"12","F:\\farmaFinal\\farma\\src\\authorization\\checkPrivilegeOnRole.js":"13","F:\\farmaFinal\\farma\\src\\services\\homeService.js":"14","F:\\farmaFinal\\farma\\src\\services\\authService.js":"15","F:\\farmaFinal\\farma\\src\\pages\\home\\index.js":"16","F:\\farmaFinal\\farma\\src\\pages\\users\\index.js":"17","F:\\farmaFinal\\farma\\src\\pages\\cruds\\index.js":"18","F:\\farmaFinal\\farma\\src\\pages\\auth\\index.js":"19","F:\\farmaFinal\\farma\\src\\pages\\analyze\\index.js":"20","F:\\farmaFinal\\farma\\src\\pages\\cruds\\news\\index.js":"21","F:\\farmaFinal\\farma\\src\\pages\\allInfo\\index.js":"22","F:\\farmaFinal\\farma\\src\\pages\\admin\\adminTable\\adminTable.js":"23","F:\\farmaFinal\\farma\\src\\pages\\admin\\addForm\\addForm.js":"24","F:\\farmaFinal\\farma\\src\\authorization\\defineRoles.js":"25","F:\\farmaFinal\\farma\\src\\authorization\\privileges.js":"26","F:\\farmaFinal\\farma\\src\\services\\api.js":"27","F:\\farmaFinal\\farma\\src\\services\\newsService.js":"28","F:\\farmaFinal\\farma\\src\\pages\\users\\Users.js":"29","F:\\farmaFinal\\farma\\src\\pages\\users\\addUsers\\AddUserForm.js":"30","F:\\farmaFinal\\farma\\src\\utils\\index.js":"31","F:\\farmaFinal\\farma\\src\\pages\\auth\\signUp\\index.js":"32","F:\\farmaFinal\\farma\\src\\components\\loading\\index.js":"33","F:\\farmaFinal\\farma\\src\\components\\privateRoute\\index.js":"34","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\index.js":"35","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugType\\index.js":"36","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\index.js":"37","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugForm\\index.js":"38","F:\\farmaFinal\\farma\\src\\pages\\cruds\\tradeMark\\index.js":"39","F:\\farmaFinal\\farma\\src\\pages\\cruds\\dfg\\index.js":"40","F:\\farmaFinal\\farma\\src\\pages\\cruds\\tpg\\index.js":"41","F:\\farmaFinal\\farma\\src\\pages\\cruds\\countries\\index.js":"42","F:\\farmaFinal\\farma\\src\\pages\\cruds\\dist\\index.js":"43","F:\\farmaFinal\\farma\\src\\pages\\cruds\\sdr\\index.js":"44","F:\\farmaFinal\\farma\\src\\pages\\cruds\\mnn\\index.js":"45","F:\\farmaFinal\\farma\\src\\pages\\cruds\\mf\\index.js":"46","F:\\farmaFinal\\farma\\src\\pages\\cruds\\users\\index.js":"47","F:\\farmaFinal\\farma\\src\\pages\\auth\\login\\index.js":"48","F:\\farmaFinal\\farma\\src\\pages\\analyze\\namesAnalyze\\index.js":"49","F:\\farmaFinal\\farma\\src\\pages\\auth\\resetPassword\\index.js":"50","F:\\farmaFinal\\farma\\src\\pages\\analyze\\companiesAnalyze\\index.js":"51","F:\\farmaFinal\\farma\\src\\pages\\analyze\\manufacturerAnalyze\\index.js":"52","F:\\farmaFinal\\farma\\src\\pages\\analyze\\tradeMarkAnalyze\\index.js":"53","F:\\farmaFinal\\farma\\src\\pages\\analyze\\mnnAnalyze\\index.js":"54","F:\\farmaFinal\\farma\\src\\pages\\analyze\\distAnalyze\\index.js":"55","F:\\farmaFinal\\farma\\src\\pages\\analyze\\dfAnalyze\\index.js":"56","F:\\farmaFinal\\farma\\src\\components\\modalDeleteCrud\\index.js":"57","F:\\farmaFinal\\farma\\src\\components\\modalStatus\\index.js":"58","F:\\farmaFinal\\farma\\src\\components\\toasts\\index.js":"59","F:\\farmaFinal\\farma\\src\\components\\crudTable\\index.js":"60","F:\\farmaFinal\\farma\\src\\components\\modalSoftDelete\\index.js":"61","F:\\farmaFinal\\farma\\src\\pages\\analyze\\namesAllAnalyze\\index.js":"62","F:\\farmaFinal\\farma\\src\\history\\index.js":"63","F:\\farmaFinal\\farma\\src\\services\\drugsService.js":"64","F:\\farmaFinal\\farma\\src\\services\\analyzeDF.js":"65","F:\\farmaFinal\\farma\\src\\services\\distService.js":"66","F:\\farmaFinal\\farma\\src\\services\\analyzeDist.js":"67","F:\\farmaFinal\\farma\\src\\services\\mnnService.js":"68","F:\\farmaFinal\\farma\\src\\services\\analyzeMnn.js":"69","F:\\farmaFinal\\farma\\src\\services\\tdService.js":"70","F:\\farmaFinal\\farma\\src\\services\\analyzeTradeMark.js":"71","F:\\farmaFinal\\farma\\src\\services\\mfService.js":"72","F:\\farmaFinal\\farma\\src\\services\\analyzeManufacturer.js":"73","F:\\farmaFinal\\farma\\src\\services\\sdrService.js":"74","F:\\farmaFinal\\farma\\src\\services\\analyzeCompanies.js":"75","F:\\farmaFinal\\farma\\src\\services\\medService.js":"76","F:\\farmaFinal\\farma\\src\\services\\analyzeNames.js":"77","F:\\farmaFinal\\farma\\src\\services\\allInfoService.js":"78","F:\\farmaFinal\\farma\\src\\components\\dataTable\\index.js":"79","F:\\farmaFinal\\farma\\src\\pages\\cruds\\users\\UserForm\\index.js":"80","F:\\farmaFinal\\farma\\src\\components\\uploadModal\\index.js":"81","F:\\farmaFinal\\farma\\src\\components\\excelXLSX\\index.js":"82","F:\\farmaFinal\\farma\\src\\components\\dataTable\\globalFilter\\index.js":"83","F:\\farmaFinal\\farma\\src\\pages\\cruds\\users\\UserCrudTable\\index.js":"84","F:\\farmaFinal\\farma\\src\\components\\modalEdit\\index.js":"85","F:\\farmaFinal\\farma\\src\\components\\modalAdd\\index.js":"86","F:\\farmaFinal\\farma\\src\\services\\countryService.js":"87","F:\\farmaFinal\\farma\\src\\services\\tpgService.js":"88","F:\\farmaFinal\\farma\\src\\services\\drcService.js":"89","F:\\farmaFinal\\farma\\src\\utils\\genPass.js":"90","F:\\farmaFinal\\farma\\src\\services\\userService.js":"91","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\drcEdit\\index.js":"92","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\drcAdd\\index.js":"93","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\drugsEdit\\index.js":"94","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\drcTable\\index.js":"95","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\drugsTable\\index.js":"96","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\drugsAdd\\index.js":"97","F:\\farmaFinal\\farma\\src\\components\\modalInfo\\index.js":"98","F:\\farmaFinal\\farma\\src\\pages\\profile\\index.js":"99","F:\\farmaFinal\\farma\\src\\pages\\profile\\settings\\index.js":"100","F:\\farmaFinal\\farma\\src\\pages\\profile\\changePassword\\Changer.js":"101","F:\\farmaFinal\\farma\\src\\pages\\profile\\settings\\editSettings\\EditSettings.js":"102","F:\\farmaFinal\\farma\\src\\services\\settingService.js":"103","F:\\farmaFinal\\farma\\src\\components\\forMobile\\index.js":"104","F:\\farmaFinal\\farma\\src\\components\\globalUpload\\index.js":"105","F:\\farmaFinal\\farma\\src\\components\\reactSelect\\index.js":"106"},{"size":170,"mtime":1613366438138,"results":"107","hashOfConfig":"108"},{"size":7262,"mtime":1614502730400,"results":"109","hashOfConfig":"108"},{"size":109,"mtime":1613366438136,"results":"110","hashOfConfig":"108"},{"size":116,"mtime":1613366438135,"results":"111","hashOfConfig":"108"},{"size":1837,"mtime":1613366438131,"results":"112","hashOfConfig":"108"},{"size":412,"mtime":1613476676593,"results":"113","hashOfConfig":"108"},{"size":614,"mtime":1613366438134,"results":"114","hashOfConfig":"108"},{"size":20522,"mtime":1614508112561,"results":"115","hashOfConfig":"108"},{"size":11576,"mtime":1614513216308,"results":"116","hashOfConfig":"108"},{"size":12967,"mtime":1614509968380,"results":"117","hashOfConfig":"108"},{"size":613,"mtime":1613366438144,"results":"118","hashOfConfig":"108"},{"size":504,"mtime":1613366438217,"results":"119","hashOfConfig":"108"},{"size":886,"mtime":1614513216240,"results":"120","hashOfConfig":"108"},{"size":296,"mtime":1613366438211,"results":"121","hashOfConfig":"108"},{"size":887,"mtime":1613476676633,"results":"122","hashOfConfig":"108"},{"size":20494,"mtime":1614513216358,"results":"123","hashOfConfig":"108"},{"size":440,"mtime":1613476676632,"results":"124","hashOfConfig":"108"},{"size":12617,"mtime":1614513216343,"results":"125","hashOfConfig":"108"},{"size":963,"mtime":1614257968132,"results":"126","hashOfConfig":"108"},{"size":1356,"mtime":1613366438150,"results":"127","hashOfConfig":"108"},{"size":12358,"mtime":1614513216348,"results":"128","hashOfConfig":"108"},{"size":4506,"mtime":1613476676545,"results":"129","hashOfConfig":"108"},{"size":177,"mtime":1613366438143,"results":"130","hashOfConfig":"108"},{"size":169,"mtime":1613366438142,"results":"131","hashOfConfig":"108"},{"size":1565,"mtime":1614316149307,"results":"132","hashOfConfig":"108"},{"size":437,"mtime":1614252724368,"results":"133","hashOfConfig":"108"},{"size":1185,"mtime":1613555807966,"results":"134","hashOfConfig":"108"},{"size":1307,"mtime":1614513216362,"results":"135","hashOfConfig":"108"},{"size":265,"mtime":1613366438202,"results":"136","hashOfConfig":"108"},{"size":6837,"mtime":1613476676631,"results":"137","hashOfConfig":"108"},{"size":4747,"mtime":1614513216364,"results":"138","hashOfConfig":"108"},{"size":14015,"mtime":1614513216325,"results":"139","hashOfConfig":"108"},{"size":405,"mtime":1613366438114,"results":"140","hashOfConfig":"108"},{"size":591,"mtime":1614082531299,"results":"141","hashOfConfig":"108"},{"size":675,"mtime":1613366438179,"results":"142","hashOfConfig":"108"},{"size":1762,"mtime":1614513216339,"results":"143","hashOfConfig":"108"},{"size":655,"mtime":1613366438173,"results":"144","hashOfConfig":"108"},{"size":1952,"mtime":1614513216336,"results":"145","hashOfConfig":"108"},{"size":1809,"mtime":1614513216353,"results":"146","hashOfConfig":"108"},{"size":1761,"mtime":1614513216329,"results":"147","hashOfConfig":"108"},{"size":1761,"mtime":1614513216352,"results":"148","hashOfConfig":"108"},{"size":5403,"mtime":1614513216327,"results":"149","hashOfConfig":"108"},{"size":1763,"mtime":1614513216331,"results":"150","hashOfConfig":"108"},{"size":1766,"mtime":1614513216350,"results":"151","hashOfConfig":"108"},{"size":1756,"mtime":1614513216346,"results":"152","hashOfConfig":"108"},{"size":1748,"mtime":1614513216344,"results":"153","hashOfConfig":"108"},{"size":1169,"mtime":1614513216356,"results":"154","hashOfConfig":"108"},{"size":7162,"mtime":1614258691778,"results":"155","hashOfConfig":"108"},{"size":24270,"mtime":1614085252180,"results":"156","hashOfConfig":"108"},{"size":2380,"mtime":1613476676576,"results":"157","hashOfConfig":"108"},{"size":31303,"mtime":1614257908553,"results":"158","hashOfConfig":"108"},{"size":30985,"mtime":1614257908560,"results":"159","hashOfConfig":"108"},{"size":29237,"mtime":1614257908569,"results":"160","hashOfConfig":"108"},{"size":32255,"mtime":1614257908563,"results":"161","hashOfConfig":"108"},{"size":31580,"mtime":1614257908559,"results":"162","hashOfConfig":"108"},{"size":28923,"mtime":1614257908557,"results":"163","hashOfConfig":"108"},{"size":1543,"mtime":1613366438117,"results":"164","hashOfConfig":"108"},{"size":1163,"mtime":1614513216306,"results":"165","hashOfConfig":"108"},{"size":985,"mtime":1613366438133,"results":"166","hashOfConfig":"108"},{"size":19530,"mtime":1614514726425,"results":"167","hashOfConfig":"108"},{"size":1220,"mtime":1613366438121,"results":"168","hashOfConfig":"108"},{"size":28931,"mtime":1614513216319,"results":"169","hashOfConfig":"108"},{"size":117,"mtime":1613366438137,"results":"170","hashOfConfig":"108"},{"size":4506,"mtime":1613370886984,"results":"171","hashOfConfig":"108"},{"size":224,"mtime":1613366438205,"results":"172","hashOfConfig":"108"},{"size":2249,"mtime":1613370887080,"results":"173","hashOfConfig":"108"},{"size":229,"mtime":1613366438206,"results":"174","hashOfConfig":"108"},{"size":1176,"mtime":1613366438213,"results":"175","hashOfConfig":"108"},{"size":211,"mtime":1613366438208,"results":"176","hashOfConfig":"108"},{"size":1194,"mtime":1613366438215,"results":"177","hashOfConfig":"108"},{"size":225,"mtime":1613366438208,"results":"178","hashOfConfig":"108"},{"size":2240,"mtime":1613370886985,"results":"179","hashOfConfig":"108"},{"size":231,"mtime":1613366438207,"results":"180","hashOfConfig":"108"},{"size":2242,"mtime":1613370886984,"results":"181","hashOfConfig":"108"},{"size":223,"mtime":1613366438205,"results":"182","hashOfConfig":"108"},{"size":4957,"mtime":1613370886983,"results":"183","hashOfConfig":"108"},{"size":221,"mtime":1613366438208,"results":"184","hashOfConfig":"108"},{"size":224,"mtime":1613366438205,"results":"185","hashOfConfig":"108"},{"size":28225,"mtime":1614513216281,"results":"186","hashOfConfig":"108"},{"size":26236,"mtime":1614085252227,"results":"187","hashOfConfig":"108"},{"size":1748,"mtime":1614513216311,"results":"188","hashOfConfig":"108"},{"size":3918,"mtime":1613476676529,"results":"189","hashOfConfig":"108"},{"size":755,"mtime":1613366438111,"results":"190","hashOfConfig":"108"},{"size":6784,"mtime":1614514087862,"results":"191","hashOfConfig":"108"},{"size":1427,"mtime":1613476676531,"results":"192","hashOfConfig":"108"},{"size":1894,"mtime":1613366438115,"results":"193","hashOfConfig":"108"},{"size":959,"mtime":1613366438209,"results":"194","hashOfConfig":"108"},{"size":1174,"mtime":1613366438215,"results":"195","hashOfConfig":"108"},{"size":1358,"mtime":1613735735828,"results":"196","hashOfConfig":"108"},{"size":438,"mtime":1613366438216,"results":"197","hashOfConfig":"108"},{"size":1017,"mtime":1613476676635,"results":"198","hashOfConfig":"108"},{"size":29555,"mtime":1614085252189,"results":"199","hashOfConfig":"108"},{"size":27925,"mtime":1614085252187,"results":"200","hashOfConfig":"108"},{"size":14112,"mtime":1614085252192,"results":"201","hashOfConfig":"108"},{"size":9779,"mtime":1614513216334,"results":"202","hashOfConfig":"108"},{"size":6437,"mtime":1614513216341,"results":"203","hashOfConfig":"108"},{"size":12994,"mtime":1614085252191,"results":"204","hashOfConfig":"108"},{"size":5285,"mtime":1614513216303,"results":"205","hashOfConfig":"108"},{"size":1318,"mtime":1614316625976,"results":"206","hashOfConfig":"108"},{"size":17061,"mtime":1614502647624,"results":"207","hashOfConfig":"108"},{"size":5061,"mtime":1613735735822,"results":"208","hashOfConfig":"108"},{"size":2610,"mtime":1613735735824,"results":"209","hashOfConfig":"108"},{"size":497,"mtime":1614246471157,"results":"210","hashOfConfig":"108"},{"size":970,"mtime":1614340724123,"results":"211","hashOfConfig":"108"},{"size":3163,"mtime":1614075710830,"results":"212","hashOfConfig":"108"},{"size":1611,"mtime":1614085252169,"results":"213","hashOfConfig":"108"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},"1dhey2b",{"filePath":"217","messages":"218","errorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"216"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"216"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"237","usedDeprecatedRules":"216"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"216"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"216"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"216"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"216"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"216"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"216"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"216"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"216"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"216"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"216"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"216"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"216"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"216"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"216"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"216"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"216"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"216"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"216"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"216"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"216"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"216"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"216"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"216"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"216"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"216"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"216"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"216"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"216"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"216"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"216"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"216"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"216"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"216"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"216"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"216"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"216"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"216"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"216"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"216"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"216"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"216"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"216"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"471"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"216"},"F:\\farmaFinal\\farma\\src\\index.js",[],["475","476"],"F:\\farmaFinal\\farma\\src\\App.js",["477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525"],"F:\\farmaFinal\\farma\\src\\context\\UserContext.js",[],"F:\\farmaFinal\\farma\\src\\context\\LangContext.js",["526"],"import React, {createContext} from \"react\";\r\n\r\nconst LangContext = createContext();\r\n\r\nexport default LangContext;\r\n","F:\\farmaFinal\\farma\\src\\components\\sideNav\\sideNav.js",[],"F:\\farmaFinal\\farma\\src\\pages\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\translate\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\sideBar\\sideBar\\sideBar.js",["527","528","529","530","531","532","533"],"F:\\farmaFinal\\farma\\src\\components\\navBar\\navBar.js",["534","535","536","537"],"import React, {useEffect, useState, useContext} from 'react';\r\nimport st from './navBar.module.scss';\r\nimport './navbar.scss';\r\nimport user from './user.png'\r\nimport {Dropdown} from 'react-bootstrap'\r\nimport {authApi} from \"../../services/authService\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport LangContext from \"../../context/LangContext\";\r\nimport {useHistory,Redirect} from \"react-router-dom\";\r\nimport {NewsApi} from \"../../services/newsService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport checkPrirvilegeOfRole from \"../../authorization/checkPrivilegeOnRole\";\r\n\r\nfunction NavBar(props){\r\n    const {TranslateExp} = props;\r\n    const [data,setData] = useState({});\r\n    const [netError, setNetError] = useState(false);\r\n\r\n    const SEVEN_DAYS = 7 * 24 * 60 * 60 * 1000;\r\n    const THIRTY_DAYS = 30 * 24 * 60 * 60 * 1000;\r\n    const TWO_DAYS = 2 * 24 * 60 * 60 * 1000;\r\n\r\n    const {role, setStateValue} = useContext(UserContext);\r\n    const {lang, setLang} = useContext(LangContext);\r\n    const history = useHistory();\r\n\r\n    const [leftTime, setLeftTime] = useState(\"\");\r\n    const [newsNotification, setNewsNotification] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        gets(); \r\n        let timerId = setInterval(() => {\r\n            getLastNews();\r\n        }, 4000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        }\r\n    },[]);\r\n\r\n    // useEffect(() => {\r\n    //     if(\"um_expired_at\" in data){\r\n    //         const expirationDate = data.um_expired_at,\r\n    //         expDateInMilliseconds = new Date(expirationDate).getTime(),\r\n    //         remainTimeInMilliseconds = expDateInMilliseconds - Date.now();\r\n\r\n    //         if(remainTimeInMilliseconds <= 2592000000){\r\n    //             setLeftTime(remainTimeInMilliseconds);\r\n    //         }\r\n\r\n    //     }\r\n    // }, [data]);\r\n\r\n\r\n    let gets = () =>{\r\n        authApi.userMe().then(resp=>{\r\n            const {data} = resp.data;\r\n\r\n            if(role === 4){\r\n                const expirationDate = data.um_expired_at,\r\n                expDateInMilliseconds = new Date(expirationDate).getTime(),\r\n                remainTimeInMilliseconds = expDateInMilliseconds - Date.now();\r\n    \r\n                if(remainTimeInMilliseconds <= 0){\r\n                    sessionStorage.removeItem(\"token\");\r\n                    setStateValue({\r\n                        token: null,\r\n                        role: undefined\r\n                    });\r\n                }\r\n    \r\n                if(remainTimeInMilliseconds <= THIRTY_DAYS && remainTimeInMilliseconds > 0){\r\n    \r\n                    let timerId = setInterval(() => {\r\n                        let remain = expDateInMilliseconds - Date.now();\r\n    \r\n                        if(remain <= 0){\r\n                            sessionStorage.removeItem(\"token\");\r\n                            setStateValue({\r\n                                token: null,\r\n                                role: undefined\r\n                            });\r\n                            clearInterval(timerId);\r\n                        }\r\n    \r\n                        const parsedDate = parseDate(remain);\r\n                        setLeftTime(parsedDate);\r\n                    }, 1000);\r\n    \r\n                }\r\n            }\r\n\r\n            setData(resp.data.data)\r\n        })\r\n    };\r\n\r\n    const getLastNews = () => {\r\n        NewsApi.getList({\r\n            limit:10,\r\n            page:1\r\n        }).then(resp => {\r\n            const {data} = resp.data;\r\n            const filtered = data.filter(d => new Date(d.createdAt).getTime() > (Date.now() - TWO_DAYS));\r\n\r\n            const lastThree = (filtered.length >= 3)? filtered.slice(0, 2) : filtered;\r\n\r\n            setNewsNotification(lastThree);\r\n        });\r\n    }\r\n\r\n    function parseDate(milliseconds){\r\n        const dayMilliseconds = 24*60*60*1000,\r\n              hourMilliseconds = 60*60*1000,\r\n              minuteMilliseconds = 60*1000;\r\n    \r\n        const amountOfDays = Math.floor(milliseconds / dayMilliseconds),\r\n              amountOfHours = Math.floor((milliseconds % dayMilliseconds) / hourMilliseconds),  \r\n              amountOfMinutes = Math.floor(((milliseconds % dayMilliseconds) % hourMilliseconds) / minuteMilliseconds),       \r\n              amountOfSeconds = Math.floor((((milliseconds % dayMilliseconds) % hourMilliseconds) % minuteMilliseconds) / 1000);\r\n    \r\n              return [amountOfDays, amountOfHours, amountOfMinutes, amountOfSeconds];\r\n    }\r\n\r\n\r\n\r\n    const logout = (e) =>{\r\n        e.preventDefault();\r\n        sessionStorage.removeItem(\"token\");\r\n        setStateValue({\r\n            token: null,\r\n            role: undefined,\r\n            // mac: undefined\r\n        });\r\n        // history.push('/login');\r\n        <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    const handleLangChange = (lang) => {\r\n        setLang({\r\n            lang\r\n        });\r\n    }\r\n\r\n    return(\r\n    <nav className={`${st.navbar} navbar py-3 \r\n        ${(props.small)?(props.isOpen)?st.navbar_ssmall:st.navbar_slarge:\r\n                        (props.isOpen)?st.navbar_small:st.navbar_large}`}>\r\n        <i className={`${st.fa_bars} fa fa-bars`} \r\n            onClick={()=>props.setIsOpen(!props.isOpen)}>\r\n        </i>\r\n        {/*<button onClick={gets}>get</button>*/}\r\n        {\r\n            (leftTime !== \"\" && new Date(data?.um_expired_at).getTime() - Date.now() <= SEVEN_DAYS)? <p className={st.subscription}>{`${TranslateExp(props.lang, \"content.subscription\")} :  ${leftTime?.[0]}  ${TranslateExp(props.lang, \"content.days\")}, ${leftTime?.[1]} ${TranslateExp(props.lang, \"content.hours\")}, ${leftTime?.[2]} ${TranslateExp(props.lang, \"content.minutes\")}, ${leftTime?.[3]} ${TranslateExp(props.lang, \"content.seconds\")}`}</p> : null\r\n        }\r\n        <div className=\"d-flex align-items-baseline\">\r\n            <Dropdown className='w-0'>\r\n                <Dropdown.Toggle  className={`${st.dropdown} nav-link dropdown-toggle p-0`} as='a' id=\"dropdown-basic\">\r\n                    <span className={\"text-uppercase\"}>{lang}</span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu >\r\n                    <Dropdown.Item onClick={() => handleLangChange(\"eng\")}>ENG</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => handleLangChange(\"ўзб\")}>ЎЗБ</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => handleLangChange(\"рус\")}>РУС</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n            <Dropdown>\r\n                <Dropdown.Toggle className={`${st.dropdown} nav-link dropdown-toggle p-0`} as='a' id=\"dropdown-basic\">\r\n                    <i className={`${st.bell} far fa-bell`}>\r\n                        {\r\n                            (newsNotification.length !== 0 || leftTime !== \"\")? <span className={st.redRound}></span> : null \r\n                        }\r\n                    </i>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {\r\n                        (leftTime === \"\" && newsNotification.length === 0)?  <Dropdown.Item className={st.news_container}>\r\n                        <i className={`fas fa-exclamation-circle ${st.offset}`}></i>\r\n                            <div className={st.news}>\r\n                                    <h6 className={st.notification_title}>{\r\n                                    \r\n                                            TranslateExp(props.lang, \"content.no-notifications\")\r\n                                    \r\n                                        }\r\n                                    </h6>\r\n                                    {/* <p className={st.notification_desc}>\r\n                                        {`${leftTime?.[0]} ${TranslateExp(props.lang, \"content.days\")}`}\r\n                                    </p> */}\r\n                                </div>\r\n                        </Dropdown.Item> : null\r\n                    }\r\n                    {\r\n                        (leftTime !== \"\" && new Date(data?.um_expired_at).getTime() - Date.now() <= THIRTY_DAYS)? <Dropdown.Item className={st.news_container}>\r\n                            <i className={`fas fa-exclamation-circle ${st.offset}`}></i>\r\n                            <div className={st.news}>\r\n                                    <h6 className={st.notification_title}>{\r\n                                    \r\n                                            TranslateExp(props.lang, \"content.subscription\")\r\n                                    \r\n                                        }\r\n                                    </h6>\r\n                                    <p className={st.notification_desc}>\r\n                                        {`${leftTime?.[0]} ${TranslateExp(props.lang, \"content.days\")}`}\r\n                                    </p>\r\n                                </div>\r\n                        </Dropdown.Item> : null\r\n                    }\r\n                    {\r\n                        newsNotification?.map(({title, description}) => (\r\n                            <Dropdown.Item className={st.news_container}>\r\n                                <i className={`fa fa-newspaper ${st.offset}`}></i>\r\n                                <div className={st.news}>\r\n                                    <h6 className={st.notification_title}>{\r\n                                    \r\n                                            (title.length > 30)? `${title.slice(0, 30)}...` : title\r\n                                    \r\n                                        }\r\n                                    </h6>\r\n                                    <p className={st.notification_desc}>\r\n                                        {\r\n                                            (description.length > 30)? `${description.slice(0, 30)}...` : description\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n                            </Dropdown.Item>\r\n                        ))\r\n                    }\r\n        \r\n                    {/* <Dropdown.Item>\r\n                        <Link to=\"/messages\">\r\n                                {TranslateExp(props.lang, \"navBar.messages\")}\r\n                        </Link>\r\n                    </Dropdown.Item> */}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n            <Dropdown>\r\n                <Dropdown.Toggle className={`${st.dropdown} nav-link dropdown-toggle p-0`} as='a' id=\"dropdown-basic\">\r\n                        {data.first_name}{' '}\r\n                        {data.last_name}\r\n                        <img src={user} alt=\"User\"/>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item ><Link  to = '/profile/changePassword' className={`text-decoration-none text-dark ${st.link} link`}><li id='' className={`${st.li} links`}>{TranslateExp(lang, \"auth.changePass\")}</li></Link></Dropdown.Item>\r\n                    \r\n                    {\r\n                        !checkPrirvilegeOfRole(role, \"CHANGE_SETTINGS\")? null : \r\n                        <Dropdown.Item><Link  to = '/profile/settings' className={`text-decoration-none text-dark ${st.link} link`}><li id='' className={`${st.li} links`}>{TranslateExp(lang, \"content.settings\")}</li></Link></Dropdown.Item>\r\n                    }\r\n\r\n                    <Dropdown.Item onClick={logout}>{TranslateExp(props.lang, \"navBar.logOut\")}</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </div>\r\n    </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default NavBar;\r\n","F:\\farmaFinal\\farma\\src\\components\\sideBar\\sidebarHover\\sidebarHover.js",["538","539","540"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport st from './sidebarHover.module.scss';\r\nimport navLogo from '../pharm.png';\r\nimport {Link} from 'react-router-dom'\r\nimport checkPrivilegeOfRole from \"../../../authorization/checkPrivilegeOnRole\";\r\nimport {homeApi} from '../../../services/homeService';\r\nimport {settingsApi} from \"../../../services/settingService\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport { getAllByDisplayValue } from '@testing-library/react';\r\n\r\nfunction SidebarHover(props){\r\n    const {role, lang, TranslateExp} = props,\r\n          [totals, setTotals] = useState(null);\r\n          const {fileUploadedFlag} = useContext(UserContext);\r\n          console.log(\"fileUploadedFlag\". fileUploadedFlag);\r\n\r\n    const [filesURL, setFilesURL] = useState({\r\n        referentPrice : {\r\n            url : \"\",\r\n            title : \"also.refPr\",\r\n            type : undefined,\r\n            name: \"referentPrices\",\r\n        },\r\n        registeredGLS : {\r\n            url : \"\",\r\n            title : \"also.regFMP\",\r\n            type : undefined,\r\n            name: \"registeredGLS\"\r\n        },\r\n        valueAddedTax : {\r\n            url : \"\",\r\n            title : \"also.valueAddedTax\",\r\n            type: undefined,\r\n            name: \"valueAddedTax\"\r\n        }\r\n    });\r\n\r\n    const files = Object.keys(filesURL);\r\n\r\n    async function getAllList(){\r\n        const res = await homeApi.getAllList();\r\n        return res.data.data;\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        downloadFiles(0);\r\n      }, [fileUploadedFlag]);\r\n\r\n\r\n    const openTab = (e) => {\r\n        console.log(\"type\", e.currentTarget.dataset.type);\r\n        if(e.currentTarget.dataset.type === \"pdf\"){\r\n            window.open(e.currentTarget.href);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    const downloadFiles = (type) => {\r\n        if(type+1 <= 3){\r\n            settingsApi.download(type+1)\r\n                       .then(res => {\r\n                            console.log(res.data);\r\n                            const urlObj = URL.createObjectURL(res.data);\r\n                            setFilesURL(filesURL => {\r\n                                return  {\r\n                                     ...filesURL, [files[type]] : {...filesURL[files[type]], url : urlObj, type: res.data.type.slice(res.data.type.indexOf(\"/\")+1)}\r\n                                 }\r\n                             });\r\n                       })\r\n                       .then(() => {\r\n                            type++;\r\n                            downloadFiles(type);\r\n                       })\r\n        }else return;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllList().then(res=>{\r\n            setTotals(res);\r\n        });\r\n    },[]);\r\n\r\n\r\n    return(\r\n        <div className={st.sideBar}>\r\n            <div className={st.sideBar__head}>\r\n                <div className={st.sideBar__logo}>\r\n                    <img src={navLogo} alt=''/>\r\n                </div>\r\n            </div>\r\n            <div className={st.sideBar__body}>\r\n                <div>\r\n                    <div className={st.nav__item}>\r\n                        <Link to = '/' className='text-center text-white'>\r\n                            <div className={st.nav__icon}>\r\n                                <i className=\"fas fa-home\"></i>\r\n                            </div>\r\n                            <div className={st.menu_title}>\r\n                                <p>{TranslateExp(lang, \"sidebar.Home\")}</p>\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n\r\n                    {\r\n                        !checkPrivilegeOfRole(role, \"ACCESS_PRIVATE_ROUTES\")? \"\" : \r\n                        <div className={st.nav__item}>\r\n                            <div className={st.nav__icon}>\r\n                            <i className=\"fas fa-pills\"></i>\r\n                            </div>\r\n                            <div className={st.w_100}>\r\n                                <p>{TranslateExp(lang, \"sidebar.Products\")}</p>\r\n                                <ul  className={st.accordion_item}>\r\n                                    <Link to = '/admin/drugs' className={st.link}><li>{TranslateExp(lang, \"products.med\")}</li></Link>\r\n                                    <Link to = '/admin/drc' className={st.link}><li>{TranslateExp(lang, \"products.drc\")}</li></Link>\r\n                                    <Link to = '/admin/dt' className={st.link}><li>{TranslateExp(lang, \"products.dt\")}</li></Link>\r\n                                    <Link to = '/admin/trademark' className={st.link}><li>{TranslateExp(lang, \"products.td\")}</li></Link>\r\n                                    <Link to = '/admin/df' className={st.link}><li>{TranslateExp(lang, \"products.df\")}</li></Link>\r\n                                    <Link to = '/admin/dfg' className={st.link}><li>{TranslateExp(lang, \"products.dfg\")}</li></Link>\r\n                                    <Link to = '/admin/tpg' className={st.link}><li>{TranslateExp(lang, \"products.tpg\")}</li></Link>\r\n                                    <Link to = '/admin/mf' className={st.link}><li>{TranslateExp(lang, \"products.mf\")}</li></Link>\r\n                                    <Link to = '/admin/countries' className={st.link}><li>{TranslateExp(lang, \"products.mfc\")}</li></Link>\r\n                                    <Link to = '/admin/dist' className={st.link}><li>{TranslateExp(lang, \"products.dist\")}</li></Link>\r\n                                    <Link to = '/admin/sdr' className={st.link}><li>{TranslateExp(lang, \"products.senders\")}</li></Link>\r\n                                    <Link to = '/admin/mnn' className={st.link}><li>{TranslateExp(lang, \"products.mnn\")}</li></Link>\r\n                            </ul>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n\r\n                    <div className={st.nav__item}>\r\n                        <div className={st.nav__icon}>\r\n                            <i className=\"fas fa-diagnoses\"></i>\r\n                        </div>\r\n                        <div className={st.w_100}>\r\n                            <p>{TranslateExp(lang, \"sidebar.Analyzes\")}</p>\r\n                            <ul className={st.accordion_item}>\r\n                                <Link  to = '/analyze/names' className={st.link}><li>{TranslateExp(lang, \"analyzes.names\")} ({totals?.totalDrugs})</li></Link>\r\n                                <Link  to = '/analyze/df' className={st.link}><li>{TranslateExp(lang, \"analyzes.df\")} ({totals?.totalDrugForms})</li></Link>\r\n                                <Link  to = '/analyze/companies' className={st.link}><li>{TranslateExp(lang, \"analyzes.companies\")} ({totals?.TotalCompanies})</li></Link>\r\n                                <Link  to = '/analyze/dist' className={st.link}><li>{TranslateExp(lang, \"analyzes.dist\")} ({totals?.totalDistributors})</li></Link>\r\n                                <Link  to = '/analyze/manufacturers' className={st.link}><li>{TranslateExp(lang, \"analyzes.mf\")} ({totals?.totalManufacturers})</li></Link>\r\n                                <Link  to = '/analyze/trademarks' className={st.link}><li>{TranslateExp(lang, \"analyzes.td\")} ({totals?.totalTrademarks})</li></Link>\r\n                                <Link  to = '/analyze/mnn' className={st.link}><li>{TranslateExp(lang, \"analyzes.mnn\")} ({totals?.totalInns})</li></Link>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {\r\n                        !checkPrivilegeOfRole(role, \"ACCESS_TO_ALL_INFO\")? null : \r\n                        <div className={st.nav__item}>\r\n                            \r\n                            <Link to='/allInfo' className='text-center text-white'>\r\n                                <div className={st.nav__icon}>\r\n                                    <i className=\"fas fa-book-open\"></i>\r\n                                </div>\r\n                                <div className={st.menu_title}>\r\n                                    <p>{TranslateExp(lang, \"sidebar.AllInfo\")}</p>\r\n                                </div>\r\n                            </Link>\r\n                        </div>\r\n                    }\r\n                    \r\n                    {\r\n                        !checkPrivilegeOfRole(role, \"ADD_ROLES\")? null :\r\n                        <div className={st.nav__item}>\r\n                            <Link to = '/admin/users' className='text-center text-white'>\r\n                                <div className={st.nav__icon}>\r\n                                    <i className=\"fas fa-users\"></i>\r\n                                </div>\r\n                                <div className={st.menu_title}>\r\n                                    <p>{TranslateExp(lang, \"sidebar.Users\")}</p>\r\n                                </div>\r\n                            </Link>\r\n                        </div> \r\n                    }\r\n\r\n                    {\r\n                        !checkPrivilegeOfRole(role, \"ADD_ROLES\")? null : \r\n                        <div className={st.nav__item}>\r\n                            <Link to='/news' className='text-center text-white'>\r\n                                <div className={st.nav__icon}>\r\n                                    <i className=\"fas fa-newspaper\"/>\r\n                                </div>\r\n                                <div className={st.menu_title}>\r\n                                    <p>{TranslateExp(lang, \"sidebar.News\")}</p>\r\n                                </div>\r\n                            </Link>\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                <div className='pb-2'>\r\n                    {\r\n                        !checkPrivilegeOfRole(role, \"ACCESS_TO_REST\")? null : \r\n                        <div className={st.nav__item}>\r\n                            <div className={st.nav__icon}>\r\n                                <i className=\"fas fa-toolbox\"></i>\r\n                            </div>\r\n                            <div className={st.w_100} style={{top: 'auto',bottom: '0'}}>\r\n                                <p>{TranslateExp(lang, \"sidebar.Also\")}</p>\r\n                                <div className={st.accordion_item}>\r\n                                        {\r\n                                            Object.keys(filesURL)?.map(fUrl => {\r\n                                                return <a  onClick={e => openTab(e)} download={filesURL[fUrl].name} data-type={filesURL[fUrl].type} href={filesURL[fUrl].url} className={st.link}><li>{TranslateExp(lang, filesURL[fUrl].title)}</li></a>\r\n                                            })\r\n                                        }\r\n                                    {/* <Link  to = '/also/refpr' className={st.link}><li>{TranslateExp(lang, \"also.refPr\")}</li></Link>\r\n                                    <Link  to = '/also/regfmp' className={st.link}><li>{TranslateExp(lang, \"also.regFMP\")}</li></Link> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n\r\n                    <div className={st.nav__item}>\r\n                        <div className={st.nav__icon}>\r\n                            <i className=\"fas fa-cog\"></i>\r\n                        </div>\r\n                        <div className={st.w_100} style={{top: 'auto',bottom: '0'}}>\r\n                            <p>{TranslateExp(lang, \"sidebar.Help\")}</p>\r\n                            <ul className={st.accordion_item}>\r\n                            {\r\n                                        !checkPrivilegeOfRole(role, \"HELP_FOR_ADMINS\")? null : \r\n                                        <Link  to = '/help/forAdmin' className={`${st.link} link`}><li id='analyzeNames' className={`${st.li} links`}>{TranslateExp(lang, \"help.forAdmin\")}</li></Link>\r\n                                    }\r\n                                    {\r\n                                        !checkPrivilegeOfRole(role, \"HELP_FOR_EMPLOYEES\")? null :\r\n                                        <Link  to = '/help/forCollab' className={`${st.link} link`}><li id='analyzeCompanies' className={`${st.li} links`}>{TranslateExp(lang, \"help.forCollab\")}</li></Link>\r\n                                    }\r\n                                    {\r\n                                        !checkPrivilegeOfRole(role, \"HELP_FOR_CUSTOMERS\")? null :\r\n                                        <Link  to = '/help/forClient' className={`${st.link} link`}><li id='analyzeCompanies' className={`${st.li} links`}>{TranslateExp(lang, \"help.forClient\")}</li></Link>\r\n                                    }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n               \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SidebarHover;\r\n","F:\\farmaFinal\\farma\\src\\pages\\admin\\index.js",[],"F:\\farmaFinal\\farma\\src\\utils\\getText.js",[],"F:\\farmaFinal\\farma\\src\\authorization\\checkPrivilegeOnRole.js",[],"F:\\farmaFinal\\farma\\src\\services\\homeService.js",[],"F:\\farmaFinal\\farma\\src\\services\\authService.js",[],"F:\\farmaFinal\\farma\\src\\pages\\home\\index.js",["541","542","543","544","545","546","547","548","549"],"import React,{useEffect, useState} from 'react';\r\nimport st from './home.module.scss';\r\nimport ft from '../cruds/crud.module.scss';\r\nimport {NumberToStr} from '../../utils';\r\nimport {homeApi} from '../../services/homeService';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport {Tabs, Tab} from 'react-bootstrap';\r\nimport Loading from '../../components/loading';\r\nimport { NewsApi } from '../../services/newsService';\r\nimport axiosInstance from \"../../services/api\";\r\n\r\nfunction Home(props) {\r\n\r\n    const  {lang, TranslateExp} = props, \r\n          [loading, setLoading] = useState(true),\r\n          [label, setLabel] = useState([]),\r\n          dateToday = new Date(),\r\n          [allData, setAllData] = useState([]),\r\n          [data3, setData3] = useState([]),\r\n          [data6, setData6] = useState([]),\r\n          [data12, setData12] = useState([]),\r\n          [loadNews, setLoadNews] = useState(true),\r\n          [page, setPage] = useState(1),\r\n          [totalPages, setTotalPages] = useState(1),\r\n          [limit, setLimit] = useState(10),\r\n          [newsData, setNewsData] = useState([]),\r\n          [imag,setImag] = useState([]),\r\n          [totals, setTotals] = useState(null);\r\n\r\n\r\n    let date = {},\r\n        date3 = {},\r\n        date6 = {},\r\n        date12 = {};\r\n\r\n    async function getAllList(){\r\n        const res = await homeApi.getAllList();\r\n        return res.data.data;\r\n    };\r\n\r\n    async function getParams (obj) {\r\n        const res = await homeApi.getList(obj);\r\n        return res.data.data;\r\n    };\r\n\r\n    async function getNews (obj) {\r\n        console.log('getnews');\r\n        const res = await NewsApi.getList(obj);\r\n        setTotalPages(res.data.totalPages);\r\n        return res.data.data;\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const startFirstDate = \"2010-11-10\",\r\n              Data3 = new Date(),\r\n              Data6 = new Date(),\r\n              Data12 = new Date();\r\n\r\n        Data3.setMonth(-2);\r\n        Data6.setMonth(-5);\r\n        Data12.setMonth(-11);\r\n\r\n        getAllList().then(res=>{\r\n            setTotals(res)\r\n        })\r\n\r\n        date = {\r\n            \"started\": startFirstDate, \r\n            \"ended\": `${dateToday.getFullYear()}-${(dateToday.getMonth()<10)? '0' + (dateToday.getMonth()+1) : dateToday.getMonth()}-${(dateToday.getDate()<10)? '0' + dateToday.getDate() : dateToday.getDate()}`\r\n        };\r\n\r\n        date3 = {\r\n            \"started\": `${Data3.getFullYear()}-${(Data3.getMonth()<10)? '0' + (Data3.getMonth()+1) : Data3.getMonth()}-${(Data3.getDate()<10)? '0' + Data3.getDate() : Data3.getDate()}`, \r\n            \"ended\": `${dateToday.getFullYear()}-${(dateToday.getMonth()<10)? '0' + (dateToday.getMonth()+1) : dateToday.getMonth()}-${(dateToday.getDate()<10)? '0' + dateToday.getDate() : dateToday.getDate()}`\r\n        };\r\n        \r\n        date6 = {\r\n            \"started\": `${Data6.getFullYear()}-${(Data6.getMonth()<10)? '0' + (Data6.getMonth()+1) : Data6.getMonth()}-${(Data6.getDate()<10)? '0' + Data6.getDate() : Data6.getDate()}`, \r\n            \"ended\": `${dateToday.getFullYear()}-${(dateToday.getMonth()<10)? '0' + (dateToday.getMonth()+1) : dateToday.getMonth()}-${(dateToday.getDate()<10)? '0' + dateToday.getDate() : dateToday.getDate()}`\r\n        };\r\n\r\n        date12 = {\r\n            \"started\": `${Data12.getFullYear()}-${(Data12.getMonth()<10)? '0' + (Data12.getMonth()+1) : Data12.getMonth()}-${(Data12.getDate()<10)? '0' + Data12.getDate() : Data12.getDate()}`, \r\n            \"ended\": `${dateToday.getFullYear()}-${(dateToday.getMonth()<10)? '0' + (dateToday.getMonth()+1) : dateToday.getMonth()}-${(dateToday.getDate()<10)? '0' + dateToday.getDate() : dateToday.getDate()}`\r\n        };\r\n\r\n        setLabel([`${date3.started} \\u2013 ${date3.ended}`, `${date6.started} \\u2013 ${date6.ended}`, `${date12.started} \\u2013 ${date12.ended}`]);\r\n\r\n        getParams(date).then(\r\n            date => {\r\n                const DATA = [];\r\n                date.forEach(elem => DATA.push(elem))\r\n                setAllData(DATA);\r\n            }\r\n        );\r\n\r\n        getParams(date3).then(\r\n            date => {\r\n                const DATA = [];\r\n                date.forEach(elem => DATA.push(elem))\r\n                setData3(DATA);\r\n            }\r\n            \r\n        );\r\n\r\n        getParams(date6).then(\r\n            date => {\r\n                const DATA = [];\r\n                date.forEach(elem => DATA.push(elem))\r\n                setData6(DATA);\r\n            }\r\n        );\r\n\r\n        getParams(date12).then(\r\n            date => {\r\n                const DATA = [];\r\n                date.forEach(elem => DATA.push(elem))\r\n                setData12(DATA);\r\n                setLoading(false);\r\n            }\r\n        );\r\n\r\n        getNews({\r\n            page: 1,\r\n            limit: limit\r\n        }).then(data => {\r\n            setNewsData(data);\r\n            setLoadNews(false);\r\n\r\n        });\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const ids = newsData.map(nD => nD._id);\r\n        console.dir(axiosInstance);\r\n        Promise.all(ids.map(id => NewsApi.getImg(id))).then(blobs => blobs.map(blob => URL.createObjectURL(blob.data))).then(urls => setImag(urls));\r\n    }, [newsData]);\r\n\r\n\r\n    const state3 = {\r\n        labels: [`${label[0]}`],\r\n        datasets: [\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyDrugs\"),\r\n                backgroundColor: '#3A7AFE',\r\n                borderColor: 'rgba(0,0,0,1)',\r\n                borderWidth: 0,\r\n                data: [data3[0]?.totalDrugs]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyMf\"),\r\n                backgroundColor: '#6fb61b',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data3[0]?.totalManufacturer]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyDist\"),\r\n                backgroundColor: '#db8c00',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data3[0]?.totalDistributor]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyTd\"),\r\n                backgroundColor: '#ffe000',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data3[0]?.totalTrademark]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyComp\"),\r\n                backgroundColor: '#ff1717',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data3[0]?.totalCompanies]\r\n            }\r\n        ]\r\n    };\r\n\r\n    const state6 = {\r\n        labels: [`${label[1]}`],\r\n        datasets: [\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyDrugs\"),\r\n                backgroundColor: '#3A7AFE',\r\n                borderColor: 'rgba(0,0,0,1)',\r\n                borderWidth: 0,\r\n                data: [data6[0]?.totalDrugs]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyMf\"),\r\n                backgroundColor: '#6fb61b',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data6[0]?.totalManufacturer]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyDist\"),\r\n                backgroundColor: '#db8c00',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data6[0]?.totalDistributor]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyTd\"),\r\n                backgroundColor: '#ffe000',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data6[0]?.totalTrademark]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyComp\"),\r\n                backgroundColor: '#ff1717',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data6[0]?.totalCompanies]\r\n            }\r\n        ]\r\n    };\r\n    \r\n    const state12 = {\r\n        labels: [`${label[2]}`],\r\n        datasets: [\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyDrugs\"),\r\n                backgroundColor: '#3A7AFE',\r\n                borderColor: 'rgba(0,0,0,1)',\r\n                borderWidth: 0,\r\n                data: [data12[0]?.totalDrugs]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyMf\"),\r\n                backgroundColor: '#6fb61b',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data12[0]?.totalManufacturer]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyDist\"),\r\n                backgroundColor: '#db8c00',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data12[0]?.totalDistributor]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyTd\"),\r\n                backgroundColor: '#ffe000',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data12[0]?.totalTrademark]\r\n            },\r\n            {\r\n                label: TranslateExp(lang, \"home.qtyComp\"),\r\n                backgroundColor: '#ff1717',\r\n                borderColor: 'rgba(220,2,0,1)',\r\n                borderWidth: 0,\r\n                data: [data12[0]?.totalCompanies]\r\n            }\r\n        ]\r\n    };\r\n\r\n    function setPageContent (e) {\r\n        console.log(123);\r\n        setPage(e);\r\n        setLoadNews(true);\r\n        getNews({\r\n            page: e,\r\n            limit: limit\r\n        }).then(data => {\r\n            setNewsData(data);\r\n            setLoadNews(false);\r\n        });\r\n    };\r\n\r\n    const btns = () => {\r\n        const btnsBlock = [];\r\n        for(let i=1; i<=totalPages; i++) {\r\n            btnsBlock.push(<button className={`btn btn-sm mx-1 ${ft.btn__white}`} disabled={(page==i)? true: false} onClick={() => setPageContent(i)}>{i}</button>)\r\n        }\r\n        return btnsBlock;\r\n    };\r\n\r\n    return (\r\n        <div className={st.home__page}>\r\n\r\n            {loading? <Loading /> :\r\n            <div>\r\n                <div className='my-2'>\r\n                    <h4>{TranslateExp(lang, \"home.statistics\")}</h4>\r\n                    <hr />\r\n                    <div className={`${st.cards__block} mb-2`}>\r\n                        <div className={st.card}>\r\n                            <div className='w-100 d-flex flex-column justify-content-between'>\r\n                                <h5 className='mb-0 pr-4'>{TranslateExp(lang, \"home.qtyDrugs\")}</h5>\r\n                                <h3 className={st.numbs}>{NumberToStr(totals?.totalDrugs)}</h3>\r\n                            </div>\r\n                            <div className={st.card__icon} style={{padding: '1px 4px 1px 6px'}}>\r\n                                <i className='fas fa-pills'></i>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={st.card}>\r\n                            <div className='w-100 d-flex flex-column justify-content-between'>\r\n                                <h5 className='mb-0 pr-3'>{TranslateExp(lang, \"home.qtyMf\")}</h5>\r\n                                <h3 className={st.numbs}>{NumberToStr(totals?.totalManufacturers)}</h3>\r\n                            </div>\r\n                            <div className={st.card__icon} style ={{padding: '1px 5px'}}>\r\n                                <i className=\"fas fa-briefcase\"></i>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={st.card}>\r\n                            <div className='w-100 d-flex flex-column justify-content-between'>\r\n                                <h5 className='mb-0 pr-3'>{TranslateExp(lang, \"home.qtyDist\")}</h5>\r\n                                <h3 className={st.numbs}>{NumberToStr(totals?.totalDistributors)}</h3>\r\n                            </div>\r\n                            <div className={st.card__icon} style ={{padding: '1px 6px'}}>\r\n                                <i className=\"fas fa-address-book\"></i>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={st.card}>\r\n                            <div className='w-100 d-flex flex-column justify-content-between'>\r\n                                <h5 className='mb-0 pr-3'>{TranslateExp(lang, \"home.qtyTd\")}</h5>\r\n                                <h3 className={st.numbs}>{NumberToStr(totals?.totalTrademarks)}</h3>\r\n                            </div>\r\n                            <div className={st.card__icon} style ={{padding: '1.1px 3.5px 0'}}>\r\n                                <i className=\"fas fa-trademark\"></i>\r\n                            </div>\r\n                        </div>\r\n                    \r\n                        <div className={st.card}>\r\n                            <div className='w-100 d-flex flex-column justify-content-between'>\r\n                                <h5 className='mb-0 pr-2'>{TranslateExp(lang, \"home.qtyComp\")}</h5>\r\n                                <h3 className={st.numbs}>{NumberToStr(totals?.TotalCompanies)}</h3>\r\n                            </div>\r\n                            <div className={st.card__icon} style ={{padding: '1px 6px'}}>\r\n                                <i className=\"fas fa-building\"></i>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            \r\n                <div className='my-3'>\r\n                    <h4>{TranslateExp(lang, \"home.graf\")}</h4>\r\n                    <hr />\r\n                    <Tabs defaultActiveKey=\"3\">\r\n                        <Tab eventKey=\"3\" title={TranslateExp(lang, \"home.month3\")}>\r\n                            <div className={st.static__chart}>\r\n                                <Bar\r\n                                    id = \"bar\"\r\n                                    data={state3}\r\n                                    options={{\r\n                                        title:{\r\n                                            display:true,\r\n                                            text:`${label[0]}`,\r\n                                            fontSize: 18\r\n                                        },\r\n                                        scales: {\r\n                                            yAxes: [{\r\n                                                ticks: {\r\n                                                    beginAtZero: true,\r\n                                                }\r\n                                            }]\r\n                                        },\r\n                                        legend:{\r\n                                            display:true,\r\n                                            position:'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Tab>\r\n                        <Tab eventKey=\"6\" title={TranslateExp(lang, \"home.month6\")}>\r\n                            <div className={st.static__chart}>\r\n                                <Bar\r\n                                    data={state6}\r\n                                    options={{\r\n                                        title:{\r\n                                            display:true,\r\n                                            text:`${label[1]}`,\r\n                                            fontSize:18\r\n                                        },\r\n                                        scales: {\r\n                                            yAxes: [{\r\n                                                ticks: {\r\n                                                    beginAtZero: true,\r\n                                                }\r\n                                            }]\r\n                                        },\r\n                                        legend:{\r\n                                            display:true,\r\n                                            position:'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Tab>\r\n                        <Tab eventKey=\"12\" title={TranslateExp(lang, \"home.month12\")}>\r\n                            <div className={st.static__chart}>\r\n                                <Bar\r\n                                    data={state12}\r\n                                    options={{\r\n                                        title:{\r\n                                            display:true,\r\n                                            text:`${label[2]}`,\r\n                                            fontSize:18\r\n                                        },\r\n                                        scales: {\r\n                                            yAxes: [{\r\n                                                ticks: {\r\n                                                    beginAtZero: true,\r\n                                                }\r\n                                            }]\r\n                                        },\r\n                                        legend:{\r\n                                            display:true,\r\n                                            position:'right'\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </div>\r\n            \r\n                <div className={`pb-2 ${loadNews? 'pb-5 mb-5': ''}`}>\r\n                    <h4>{TranslateExp(lang, \"home.news\")}</h4>\r\n                    <hr />\r\n\r\n                    <div className={st.news}>\r\n                        { loadNews? <Loading style={{marginTop: '-30px'}}/> :\r\n                            <div>\r\n                                <div className={st.news__block}>\r\n                                    {\r\n                                        newsData.map((elem,i) =>\r\n                                            <div className={`${st.news__item} my-2`}>\r\n                                                <div className='mb-2'>\r\n                                                    <img \r\n                                                        className={st.news__img}\r\n                                                        src={imag[i]}\r\n                                                        alt='news'\r\n                                                        width='100%'\r\n                                                    />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <h5 className='mb-1'>{elem.title}</h5>\r\n                                                    <p className='m-0'>{elem.description}</p>\r\n                                                    <p className={`m-0 text-right ${st.news__item__date}`}>{`${elem.updatedAt.slice(11,16)} ${elem.updatedAt.slice(0,10)}`}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className={`${st.news__pagin} my-2`}>\r\n                                    <button className={`btn btn-sm mx-1 ${ft.btn__white}`} onClick={() => setPageContent(page-1)} disabled={(page==1)? true : false}>{TranslateExp(lang, \"pagin.prev\")}</button>\r\n                                    { btns() }\r\n                                    <button className={`btn btn-sm mx-1 ${ft.btn__white}`} onClick={() => {setPageContent(page+1)}} disabled={(page==totalPages)? true: false}>{TranslateExp(lang, \"pagin.next\")}</button>\r\n                                    <p className='mt-1'>{TranslateExp(lang, \"pagin.page\")} {page} {TranslateExp(lang, \"pagin.of\")} {totalPages}</p>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Home;","F:\\farmaFinal\\farma\\src\\pages\\users\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\cruds\\index.js",["550","551","552","553","554","555","556","557","558","559","560"],"import React, {useState, useEffect} from 'react';\r\nimport Drugs from \"./drugs\";\r\nimport DRC from './drc'\r\nimport DrugType from \"./drugType\";\r\nimport TradeMark from \"./tradeMark\";\r\nimport DrugForm from \"./drugForm\";\r\nimport DrugFarmGroup from \"./dfg\";\r\nimport TPG from \"./tpg\";\r\nimport MF from \"./mf\";\r\nimport Countries from \"./countries\";\r\nimport Dist from \"./dist\";\r\nimport SDR from './sdr';\r\nimport MNN from './mnn';\r\nimport Users from \"./users\";\r\nimport PrivateRoute from \"../../components/privateRoute\";\r\n\r\nfunction CRUDS (props) {\r\n    const {url} = props.match,\r\n    {TranslateExp, lang} = props,\r\n    [loading, setLoading] = useState(true),\r\n    [respData,setRespData] = useState([]),\r\n    [Api, setApi] = useState(null),\r\n    [show, setShow] = useState(false),\r\n    [response, setResponse] = useState(''),\r\n    [editingData,setEditingData] = useState(\"\"),\r\n    [isOpenSoftDelete, setIsOpenSoftDelete] = useState(false),\r\n    [isMOpen,setIsMOpen] = useState(false),\r\n    [isOpenDelete,setIsOpenDelete] = useState(false),\r\n    [isOpenStatus, setIsOpenStatus] = useState(false),\r\n    [delId,setDelId] = useState(null),\r\n    [editModal,setEditModal] = useState(false),\r\n    [id,setId] = useState(1),\r\n    [isDeleted,setIsDeleted] = useState(false),\r\n    [isActive,setIsActive] = useState(true),\r\n    [sfDeletedId, setSfDeletedId] = useState(undefined),\r\n    [filterStatus, setFilterStatus] = useState(\"all\"),\r\n    [data,setData] = useState(''),\r\n    [name,setName] = useState({name_uz:\"\"}),\r\n\r\n    filter = () => {\r\n        switch(filterStatus){\r\n            case \"all\":\r\n                Api?.getList().then(resp => {\r\n                    setRespData(resp.data.data);\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n            case \"active\":\r\n                Api?.getActiveList().then(resp => {\r\n                    setRespData(resp.data.data);\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n            case \"unactive\":\r\n                Api?.getUnactiveList().then(resp =>{\r\n                    setRespData(resp.data.data)\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n            case \"deleted\":\r\n                Api?.getDeletedList().then(resp =>{\r\n                    setRespData(resp.data.data)\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n        }\r\n    },\r\n    del=(id)=>{\r\n        const is_deleted = respData.find(data => data._id == id).is_deleted;\r\n        Api?.delete(id, {is_deleted: !is_deleted}).then(res=>{\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        })\r\n        closeDelModal();\r\n    },\r\n    softDelete=(id)=>{\r\n        Api?.softDelete(id).then(res => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status:res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        });\r\n        closeSoftDeleteModal();\r\n    },\r\n    changeStatus=(id)=>{\r\n        const is_active = respData.find(data => data._id === id).is_active;\r\n        Api?.changeStatus(id, {is_active: !is_active}).then(resp => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: resp.data.message.ru,\r\n                status:resp.data.status\r\n            });\r\n            filter();\r\n        });\r\n        closeStatusModal();\r\n    },\r\n    showModalDel=(id)=>{\r\n        const is_deleted = respData.find(d => d._id == id).is_deleted;\r\n        setDelId({id, is_deleted});;\r\n        setIsOpenDelete(true);\r\n    },\r\n    closeDelModal = () => {\r\n        setIsOpenDelete(false);\r\n    },\r\n    showModalSoftDelete = (id) => {\r\n        setSfDeletedId(id);\r\n        setIsOpenSoftDelete(true);\r\n    },\r\n    closeSoftDeleteModal = () => {\r\n        setIsOpenSoftDelete(false);\r\n    },\r\n    showModalStatus = (id) => {\r\n        setDelId(id);\r\n        setIsOpenStatus(true);\r\n    },\r\n\r\n    closeStatusModal = () => {\r\n        setIsOpenStatus(false);\r\n    },\r\n    toggle = () => {\r\n        setIsMOpen(!isMOpen);\r\n        setIsActive(true);\r\n    },\r\n    handleDelete=()=>{\r\n        if(isDeleted){\r\n            setIsDeleted(false);\r\n        } else {\r\n            setIsDeleted(true);\r\n            setIsActive(false);\r\n        }\r\n\r\n    },\r\n    handleActive=()=>{\r\n        if(isActive){\r\n            setIsActive(false);\r\n        } else {\r\n            setIsActive(true);\r\n            setIsDeleted(false);\r\n        }\r\n    },\r\n    editToggle = () => {\r\n        setEditModal(!editModal);\r\n    },\r\n    edit=(id)=> {\r\n        if (id){\r\n            setId(id);\r\n            const nameEdit = respData.find(item=>item._id===id).name_uz;\r\n            setName(nameEdit);\r\n            setEditingData(nameEdit);\r\n            setEditModal(!editModal)\r\n        }\r\n    },\r\n    saveEdit = (e) => {\r\n        e.preventDefault();\r\n        const {is_deleted, is_active} = respData.find(d => d._id == id);\r\n\r\n        Api?.edit(id,{\r\n            name_uz: editingData,\r\n            is_deleted,\r\n            is_active\r\n        }).then(res=>{\r\n            setShow(true)\r\n            setEditModal(!editModal)\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            })\r\n            setLoading(true)\r\n            filter();\r\n        })\r\n    },\r\n    add = e => {\r\n        e.preventDefault();\r\n        Api?.save({name_uz:data,is_deleted:isDeleted,is_active:isActive}).then(resp=>{\r\n            setShow(true);\r\n            if (resp.status===200){\r\n                setIsMOpen(!isMOpen);\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.messageAdded\"),\r\n                    status: resp.data.status\r\n                });\r\n            }\r\n\r\n            if(resp.status != 200 &&  resp.status != 201){\r\n                setShow(true)\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.messageErr\"),\r\n                    status: resp.data.status\r\n                })\r\n            }\r\n            setLoading(true);\r\n            filter()\r\n        });\r\n        setIsDeleted(false)\r\n    }\r\n    const[code,setCode] = useState('');\r\n    const[editingCode,setEditingCode] = useState('');\r\n    const editCountry=(id)=> {\r\n        if (id){\r\n            setId(id);\r\n            const nameEdit = respData.find(item=>item._id===id).name_uz;\r\n            const codeEdit = respData.find(item=>item._id===id).code;\r\n            setName(nameEdit);\r\n            setCode(codeEdit);\r\n            setEditingData(nameEdit);\r\n            setEditingCode(codeEdit);\r\n            setEditModal(!editModal)\r\n        }\r\n    }\r\n    const saveEditCountry = (e) => {\r\n        e.preventDefault();\r\n        const {is_deleted, is_active} = respData.find(d => d._id == id);\r\n\r\n        Api.edit(id,{\r\n            name_uz: editingData,\r\n            code:editingCode,\r\n            is_deleted,\r\n            is_active\r\n        }).then(res=>{\r\n            setShow(true)\r\n            setEditModal(!editModal)\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            })\r\n\r\n            setLoading(true);\r\n            filter()\r\n        });\r\n    };\r\n    const addCountry = e => {\r\n        e.preventDefault();\r\n        Api.save({name_uz:data,code:code,is_deleted:isDeleted,is_active:isActive}).then(resp=>{\r\n                setShow(true);\r\n                setIsMOpen(!isMOpen);\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.messageAdded\"),\r\n                    status: resp.data.status\r\n                });\r\n\r\n\r\n            if(resp.status != 200 &&  resp.status != 201){\r\n                setShow(true)\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.messageErr\"),\r\n                    status: resp.data.status\r\n                })\r\n            }\r\n\r\n            setLoading(true);\r\n            filter()\r\n            setIsDeleted(false)\r\n        });\r\n    };\r\n\r\n    const uploadExcel = (e, callback, removeFilename, handleBlank) => {\r\n        console.log(\"here\");\r\n        e.preventDefault();\r\n        const file = e.target.elements[0].files?.[0];\r\n\r\n        if(!file) handleBlank(TranslateExp(lang, \"content.selectFile\"));\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        Api.uploadExcel(formData).then(res => {\r\n            console.log(\"res\", res);\r\n            if(res.data.data.length === 0){\r\n                console.log(\"fdg\");\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.importExcelErr\"),\r\n                    status: 500\r\n                });\r\n            }else{\r\n                setResponse({\r\n                    message: res.data.message.ru,\r\n                    status: res.status\r\n                });\r\n            }\r\n            setShow(true);\r\n            \r\n            removeFilename(\"\");\r\n            callback();\r\n\r\n\r\n            setTimeout(() => {\r\n                filter();\r\n            }, 1000)\r\n        }).catch(error => {\r\n            setResponse({\r\n                message: error.response.data.message.ru,\r\n                status: error.response.status\r\n            });\r\n            setShow(true);\r\n            handleBlank(\"\");\r\n            removeFilename(\"\");\r\n            callback();\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        filter();\r\n    }, [Api])\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        filter();\r\n    }, [filterStatus]);\r\n\r\n    let allProps ={\r\n        ...props,\r\n        crudsPage: true,\r\n        setApi:setApi,\r\n        respData:respData,\r\n        filter:filter,\r\n        filterStatus:filterStatus,\r\n        setFilterStatus:setFilterStatus,\r\n        loading:loading,\r\n        setLoading:setLoading,\r\n        setId:setId,\r\n        name:name,\r\n        show:show,\r\n        setShow:setShow,\r\n        response:response,\r\n        softDelete:softDelete,\r\n        sfDeletedId:sfDeletedId,\r\n        closeSoftDeleteModal:closeSoftDeleteModal,\r\n        isOpenSoftDelete:isOpenSoftDelete,\r\n        changeStatus:changeStatus,\r\n        closeStatusModal:closeStatusModal,\r\n        isOpenStatus:isOpenStatus,\r\n        del:del,\r\n        showModalStatus:showModalStatus ,\r\n        delId:delId,\r\n        showModalDel:showModalDel,\r\n        closeDelModal:closeDelModal,\r\n        isOpenDelete:isOpenDelete,\r\n        editModal:editModal,\r\n        editToggle:editToggle,\r\n        toggle:toggle,\r\n        handleActive:handleActive,\r\n        add:add,\r\n        saveEdit:saveEdit,\r\n        edit:edit,\r\n        handleDelete:handleDelete,\r\n        isActive:isActive,\r\n        isDeleted:isDeleted,\r\n        showModalSoftDelete:showModalSoftDelete,\r\n        setData:setData,\r\n        isMOpen:isMOpen,\r\n        setEditingData:setEditingData,\r\n        uploadExcel:uploadExcel\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <PrivateRoute \r\n                path={`${url}/drugs`} \r\n                render={propsL =><Drugs {...allProps} {...propsL} />}\r\n            >   \r\n            </PrivateRoute>\r\n            <PrivateRoute path={`${url}/drc`} render={propsL => <DRC {...allProps} {...propsL}  />}></PrivateRoute>\r\n            <PrivateRoute path={`${url}/dt`}><DrugType {...allProps}/></PrivateRoute>\r\n            <PrivateRoute path={`${url}/trademark`}><TradeMark {...allProps}/></PrivateRoute>\r\n            <PrivateRoute path={`${url}/df`}><DrugForm {...allProps}/></PrivateRoute>\r\n            <PrivateRoute path={`${url}/dfg`}><DrugFarmGroup {...allProps} /></PrivateRoute>\r\n            <PrivateRoute path={`${url}/tpg`}><TPG {...allProps} /></PrivateRoute>\r\n            <PrivateRoute path={`${url}/mf`}><MF {...allProps}/></PrivateRoute>\r\n            <PrivateRoute path={`${url}/countries`}>\r\n                <Countries {...allProps}\r\n                    addCountry={addCountry}\r\n                    saveEditCountry={saveEditCountry}\r\n                    edit={editCountry}\r\n                    code={code}\r\n                    setCode={setCode}\r\n                    setEditingCode={setEditingCode}\r\n                />\r\n                </PrivateRoute>\r\n            <PrivateRoute path={`${url}/dist`}><Dist {...allProps} /></PrivateRoute>\r\n            <PrivateRoute path={`${url}/sdr`}><SDR {...allProps} /></PrivateRoute>\r\n            <PrivateRoute path={`${url}/mnn`}><MNN {...allProps} /></PrivateRoute>\r\n            <PrivateRoute path={`${url}/users`} render={propsL => <Users {...props} {...propsL}/>}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CRUDS;\r\n","F:\\farmaFinal\\farma\\src\\pages\\auth\\index.js",["561","562"],"import React, { useContext } from 'react';\r\nimport { Route, Switch, Redirect, useHistory } from 'react-router-dom';\r\nimport SignUp from './signUp';\r\nimport Login from './login';\r\nimport ResetPassword from './resetPassword';\r\nimport UserContext from \"../../context/UserContext\";\r\n\r\nfunction AUTH (props) {\r\n\r\n    const {mac} = useContext(UserContext);\r\n    const history = useHistory();\r\n    console.log(\"check mac\", mac);\r\n\r\n    return(\r\n        <>\r\n            <Switch>\r\n                <Route path = '/signUP'>\r\n                    {\r\n                        mac == undefined? <Redirect to=\"/login\" /> : <SignUp {...props}/> \r\n                    }\r\n                </Route>\r\n                <Route path = '/login'><Login {...props}/></Route>\r\n                <Route path='/reset'><ResetPassword {...props}/></Route>\r\n                <Route render={() => <Redirect to=\"/login\" />}></Route>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AUTH;\r\n","F:\\farmaFinal\\farma\\src\\pages\\analyze\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\cruds\\news\\index.js",["563","564","565","566","567","568","569","570"],"import React, {useEffect, useState} from \"react\";\r\nimport st from './news.module.scss';\r\nimport ft from '../crud.module.scss';\r\nimport {Button, Modal, Form} from \"react-bootstrap\";\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\nimport { NewsApi } from \"../../../services/newsService\";\r\n\r\n\r\n\r\nfunction News (props) {\r\n    const {lang, TranslateExp, uploadExcel} = props;\r\n    const mainTitle = TranslateExp(lang, \"sidebar.News\")\r\n    const newsPage = true;\r\n    const [title,setTitle] = useState({title:\"\"});\r\n    const columns = [\r\n        {\r\n            notSort: true,\r\n            Header: \"№\",\r\n            Cell: (props) => +props.row.id+1        \r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.title\"),\r\n            accessor: \"title\",\r\n        }\r\n    ];\r\n    const [loading, setLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [response, setResponse] = useState('');\r\n    const[isMOpen,setIsMOpen] = useState(false);\r\n    const[isOpenDelete,setIsOpenDelete] = useState(false);\r\n    const[isOpenStatus, setIsOpenStatus] = useState(false);\r\n    const[delId,setDelId] = useState(null);\r\n    const[editModal,setEditModal] = useState(false);\r\n    const[respData,setRespData] = useState([]);\r\n    const[id,setId] = useState(null);\r\n    const[filterStatus, setFilterStatus] = useState(\"active\");\r\n    const[isDeleted,setIsDeleted] = useState(false);\r\n    const[isActive,setIsActive] = useState(true);\r\n    const[data,setData] = useState('');\r\n    const[desc,setDesc] = useState('');\r\n    const[isOpenSoftDelete, setIsOpenSoftDelete] = useState(false);\r\n    const[sfDeletedId, setSfDeletedId] = useState(undefined);\r\n    const filter = () => {\r\n        switch(filterStatus){\r\n            case \"active\":\r\n                NewsApi.getAllList().then(resp => {\r\n                    setRespData(resp.data.data);\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n            case \"unactive\":\r\n                NewsApi.getUnactiveList().then(resp =>{\r\n                    setRespData(resp.data.data)\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n            case \"deleted\":\r\n                NewsApi.getDeletedList().then(resp =>{\r\n                    setRespData(resp.data.data)\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        filter();\r\n    }, [filterStatus]);\r\n\r\n    const edit=(id)=> {\r\n        if (id){\r\n            setId(id);\r\n            setTitle(respData.find(item=>item._id===id).title);\r\n            setDesc(respData.find(item=>item._id===id).description);\r\n            setEditModal(!editModal);\r\n        }\r\n    }\r\n\r\n    function del(id) {\r\n        const is_deleted = respData.find(data => data._id == id).is_deleted;\r\n        NewsApi.delete(id, {is_deleted: !is_deleted}).then(res=>{\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        })\r\n        closeDelModal();\r\n    }\r\n\r\n    function softDelete(id){\r\n        NewsApi.softDelete(id).then(res => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status:res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        });\r\n        closeSoftDeleteModal();\r\n    }\r\n\r\n\r\n    function changeStatus(id){\r\n        const is_active = respData.find(data => data._id === id).is_active;\r\n        NewsApi.changeStatus(id, {is_active: !is_active}).then(resp => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: resp.data.message.ru,\r\n                status:resp.data.status\r\n            });\r\n            filter();\r\n        });\r\n        closeStatusModal();\r\n    }\r\n\r\n    const showModalDel=(id)=>{\r\n        const is_deleted = respData.find(d => d._id == id).is_deleted;\r\n        setDelId({id, is_deleted});;\r\n        setIsOpenDelete(true);\r\n    }\r\n\r\n    const closeDelModal = () => {\r\n        setIsOpenDelete(false);\r\n    }\r\n\r\n    const showModalSoftDelete = (id) => {\r\n        setSfDeletedId(id);\r\n        setIsOpenSoftDelete(true);\r\n    }\r\n\r\n    const closeSoftDeleteModal = () => {\r\n        setIsOpenSoftDelete(false);\r\n    }\r\n\r\n    const showModalStatus = (id) => {\r\n        setDelId(id);\r\n        setIsOpenStatus(true);\r\n    }\r\n\r\n    const closeStatusModal = () => {\r\n        setIsOpenStatus(false);\r\n    }\r\n    const toggle = () => {\r\n        setIsMOpen(!isMOpen);\r\n        setIsActive(true);\r\n    }\r\n    function handleDelete(){\r\n        if(isDeleted){\r\n            setIsDeleted(false);\r\n        } else {\r\n            setIsDeleted(true);\r\n            setIsActive(false);\r\n        }\r\n    }\r\n    function handleActive(){\r\n        if(isActive){\r\n            setIsActive(false);\r\n        } else {\r\n            setIsActive(true);\r\n            setIsDeleted(false);\r\n        }\r\n    }\r\n    const editToggle = () => {\r\n        setEditModal(!editModal);\r\n    } \r\n    const addNews = e => {\r\n        e.preventDefault();\r\n        const slug = data.split(' ');\r\n        NewsApi.save({title:data,description:desc,slug: (slug.join('-')).toLowerCase(),is_deleted:isDeleted,is_active:isActive,is_news:true}).then(resp=>{\r\n            setShow(true);\r\n            if (resp.status===200){\r\n                setIsMOpen(!isMOpen);\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.messageAdded\"),\r\n                    status: resp.data.status\r\n                });\r\n            }\r\n\r\n            if(resp.status != 200 &&  resp.status != 201){\r\n                setShow(true)\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.messageErr\"),\r\n                    status: resp.data.status\r\n                })\r\n            }\r\n            setLoading(true);\r\n            filter();\r\n            setIsDeleted(false);\r\n        });\r\n    };\r\n\r\n    const saveEditNews = (e) => {\r\n        e.preventDefault();\r\n        const {is_deleted, is_active} = respData.find(d => d._id == id);\r\n\r\n        NewsApi.edit(id,{\r\n            title: title, /* this param doesn't work correctly*/\r\n            description: desc,\r\n            is_deleted,\r\n            is_active,\r\n            is_news: true\r\n        }).then(res=>{\r\n            setShow(true)\r\n            setEditModal(!editModal)\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            })\r\n            console.log(res);\r\n            setLoading(true);\r\n            filter()\r\n        })\r\n    };\r\n    return(\r\n        <div>\r\n            <ToastEx {...props} response={response} show={show} setShow={setShow}/>\r\n            <CrudTable \r\n                {...props}\r\n                title={mainTitle}\r\n                newsPage = {newsPage}\r\n                data={respData} \r\n                columns={columns} \r\n                loading={loading} \r\n                uploadExcel={uploadExcel}\r\n                showModalStatus={showModalStatus} \r\n                showModalDel={showModalDel}\r\n                showModalSoftDelete={showModalSoftDelete}\r\n                edit={edit}\r\n                toggle={toggle}\r\n                filterStatus={filterStatus}\r\n                setFilterStatus={setFilterStatus}\r\n            />\r\n            <Modal show={isMOpen} onHide={toggle}>\r\n                <Modal.Header><h5 className='m-0'>{TranslateExp(lang, \"content.adding\")} {TranslateExp(lang, \"table.text\").toLowerCase()}</h5></Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={e=>addNews(e)}>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.title\")}</Form.Label>\r\n                            <Form.Control onChange={e=>{setData(e.target.value)}}\r\n                                            name={\"title\"} type = 'text' placeholder = {TranslateExp(lang, \"table.title\")} required />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.text\")}</Form.Label>\r\n                            <Form.Control as=\"textarea\" style={{minHeight: '150px'}} row={3} onChange={e=>{setDesc(e.target.value)}}\r\n                                            name={\"title\"} type = 'text' placeholder = '...' required />\r\n                        </Form.Group>\r\n                        <div className='d-flex mb-3'>\r\n                            <Form.Check type=\"switch\" id=\"active\" checked={isActive} label={TranslateExp(lang, \"content.activeOne\")} onChange={()=>handleActive()} className='mr-2' />\r\n                            <Form.Check type=\"switch\" id=\"delete\" checked={isDeleted} onChange={()=>handleDelete()} label={TranslateExp(lang, \"content.deletedOne\")}/>\r\n                            <br/>\r\n                        </div>\r\n                        <div className='d-flex justify-content-between'>\r\n                            <Button type='button' className={`btn ${ft.btn__white}`} onClick={toggle}>{TranslateExp(lang, \"content.cancel\")}</Button>\r\n                            <Button type='submit' className={`btn ${ft.btn__primary}`}>{TranslateExp(lang, \"content.toAdd\")}</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n            {/*    edit modal*/}\r\n            <Modal show={editModal} onHide={editToggle}>\r\n                <Modal.Header><h5 className='m-0'>{TranslateExp(lang, \"content.editing\")} {TranslateExp(lang, \"table.text\").toLowerCase()}</h5></Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={e=>saveEditNews(e)}>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.title\")}</Form.Label>\r\n                            <Form.Control \r\n                                onChange={e => setTitle(e.target.value)}\r\n                                defaultValue={title} \r\n                                name={\"title\"} \r\n                                type = 'text' \r\n                                placeholder = {TranslateExp(lang, \"table.title\")}\r\n                                required/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.text\")}</Form.Label>\r\n                            <Form.Control as=\"textarea\" \r\n                                style={{minHeight: '150px'}} \r\n                                row={3} \r\n                                onChange={e => setDesc(e.target.value)}\r\n                                defaultValue={desc} \r\n                                name={\"desc\"} \r\n                                type = 'text' \r\n                                placeholder = '...' \r\n                                required />\r\n                        </Form.Group>\r\n                        <div className='d-flex justify-content-between'>\r\n                            <Button type='button' className={`btn ${ft.btn__white}`} onClick={editToggle}>{TranslateExp(lang, \"content.cancel\")}</Button>\r\n                            <Button type='submit' className={`btn ${ft.btn__primary}`}>{TranslateExp(lang, \"content.save\")}</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            <ModalDeleteCrud lang={lang} TranslateExp={TranslateExp} del={del} delId={delId} closeDelModal={closeDelModal} isOpenDelete={isOpenDelete}/>\r\n            <ModalStatus lang={lang} TranslateExp={TranslateExp} changeStatus={changeStatus} id={delId} closeStatusModal={closeStatusModal} isOpenStatus={isOpenStatus} />\r\n            <ModalSoftDelete lang={lang} TranslateExp={TranslateExp} softDelete={softDelete} sfDeletedId={sfDeletedId} closeSoftDeleteModal={closeSoftDeleteModal} isOpenSoftDelete={isOpenSoftDelete} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","F:\\farmaFinal\\farma\\src\\pages\\allInfo\\index.js",["571","572"],"import React,{useState, useEffect} from 'react'\r\nimport CompanyAnalyze from '../analyze/companiesAnalyze'\r\nimport DrugFormsAnalyze from '../analyze/dfAnalyze'\r\nimport DistributorAnalyze from '../analyze/distAnalyze'\r\nimport ManufacturerAnalyze from '../analyze/manufacturerAnalyze'\r\nimport MnnAnalyze from '../analyze/mnnAnalyze'\r\nimport AllInfoAnalyze from '../analyze/namesAllAnalyze'\r\nimport TrademarkAnalyze from '../analyze/tradeMarkAnalyze'\r\nexport default function AllInfo(props) {\r\n    const [currentPageTab, setCurrentPageTab] = useState('drugs/all');\r\n    const [firstAll, setFirstAll] = useState(true);\r\n    const [date, setDate] = useState([{started:'', ended:''}]),\r\n          [currentPage, setCurrentPage] = useState(null);\r\n    function setFirstAllFunc(bool) {\r\n        setFirstAll(bool);\r\n    }\r\n    useEffect(()=>{\r\n        switch(currentPageTab){\r\n            case 'companies':\r\n                setCurrentPage(<CompanyAnalyze \r\n                    handleSelectTab={handleSelectTab}\r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc}\r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n            case 'drugs/forms': \r\n                setCurrentPage(<DrugFormsAnalyze \r\n                    handleSelectTab={handleSelectTab} \r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc} \r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n            case 'distributors':  \r\n                setCurrentPage(<DistributorAnalyze \r\n                    handleSelectTab={handleSelectTab} \r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc} \r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n            case 'manufacturers':  \r\n                setCurrentPage(<ManufacturerAnalyze \r\n                    handleSelectTab={handleSelectTab} \r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc} \r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n            case 'inn':  \r\n                setCurrentPage(<MnnAnalyze \r\n                    handleSelectTab={handleSelectTab} \r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc} \r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n            case 'trademarks':  \r\n                setCurrentPage(<TrademarkAnalyze \r\n                    handleSelectTab={handleSelectTab} \r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc} \r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n            case 'drugs/all':  \r\n                setCurrentPage(<AllInfoAnalyze \r\n                    handleSelectTab={handleSelectTab} \r\n                    allInfo={true} \r\n                    setFirstAll={setFirstAllFunc} \r\n                    firstAll={firstAll}\r\n                    setDateAll={setDateAll} \r\n                    currentPageTab={currentPageTab}\r\n                    dateAll={date}\r\n                    {...props}\r\n                    />); \r\n                break;\r\n        }\r\n    },[currentPageTab, props.lang])\r\n    function setDateAll(data){\r\n        setDate(data);\r\n    }\r\n\r\n    function handleSelectTab(obj){\r\n        setCurrentPageTab(obj.value);\r\n        \r\n    }\r\n    return currentPage\r\n}","F:\\farmaFinal\\farma\\src\\pages\\admin\\adminTable\\adminTable.js",[],"F:\\farmaFinal\\farma\\src\\pages\\admin\\addForm\\addForm.js",[],"F:\\farmaFinal\\farma\\src\\authorization\\defineRoles.js",[],"F:\\farmaFinal\\farma\\src\\authorization\\privileges.js",["573"],"export default {\r\n    \"ACCESS_PRIVATE_ROUTES\" : true,\r\n    // \"ADD_ADMIN\" : true,\r\n    \"CREATE_DATA\" : true,\r\n    \"UPDATE_DATA\" : true,\r\n    \"ARCHIEVE_DATA\" : true,\r\n    \"SOFT_DELETE\" : true,\r\n    \"ADD_ROLES\" : true,\r\n    \"ADD_NEWS\" : true,\r\n    \"CHANGE_SETTINGS\" : true,\r\n    \"HELP_FOR_ADMINS\" : true,\r\n    \"HELP_FOR_EMPLOYEES\" : true,\r\n    \"HELP_FOR_CUSTOMERS\" : true,\r\n    \"ACCESS_TO_ALL_INFO\" : true,\r\n    \"ACCESS_TO_REST\" : true\r\n};","F:\\farmaFinal\\farma\\src\\services\\api.js",["574","575"],"import axios from \"axios\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport history from \"../history\";\r\n\r\nlet axiosInstance = axios.create({\r\n    baseURL : \"http://api.duqum.uz\",\r\n});\r\n\r\n\r\n// Interceptor for request used to add token to each requests\r\n// header\r\naxiosInstance.interceptors.request.use(\r\n    request => {\r\n        request.headers.token = sessionStorage.getItem(\"token\");\r\n        return request;\r\n    },\r\n    error => {\r\n        return error;\r\n    }\r\n);\r\n\r\n\r\n// Interceptor for response used to check response returned with status code equal to 401 or 402\r\n// remove token from storage and redirect to login page\r\naxiosInstance.interceptors.response.use(\r\n    response => {\r\n        return response;\r\n    },\r\n    error => {\r\n\r\n        try{\r\n            if(error.response.status === 401 || error.response.status === 402){\r\n                console.log(error.response.status);\r\n                sessionStorage.removeItem(\"token\");\r\n                window.location.replace(\"/login\");\r\n            }\r\n        }catch(err){\r\n            return Promise.reject(error);\r\n        }\r\n     \r\n        return Promise.reject(error);\r\n    },\r\n);\r\n\r\n\r\nexport default axiosInstance;\r\n\r\n","F:\\farmaFinal\\farma\\src\\services\\newsService.js",[],"F:\\farmaFinal\\farma\\src\\pages\\users\\Users.js",[],"F:\\farmaFinal\\farma\\src\\pages\\users\\addUsers\\AddUserForm.js",[],"F:\\farmaFinal\\farma\\src\\utils\\index.js",["576","577","578","579","580","581","582","583"],"function formatter(str){\r\n    str = str.split(' ').join('');\r\n    let bool = true;\r\n    return str.split('').map((key, index)=>{\r\n        if(isNaN(key)){\r\n            if((key==='.')){\r\n                if(bool){\r\n                    bool = false;\r\n                    if(index == 0) return '0.'; else  return '.';\r\n                } else return '';\r\n            }  else return '';\r\n        } else {\r\n            return key;\r\n        }\r\n    }).join('');\r\n}\r\nexport function NumberToStr(Number){\r\n    if(Number !== undefined){\r\n        let string =Number.toString();\r\n        const arr = string.split('.');\r\n        let str = \"\";\r\n        let count = 0;\r\n        let temp = \"\";\r\n        if(arr[0].length <= 3) return Number;\r\n        for (let j = arr[0].length-1; j >= 0 ; j--) {\r\n            count++;\r\n            temp = arr[0][j] + temp;\r\n            if(count === 3){\r\n                if(str.length > 0){\r\n                    str = temp +' '+ str;\r\n                } else {\r\n                    str = temp;\r\n                }\r\n                temp = '';\r\n                count = 0;\r\n            }\r\n        }\r\n        if(temp.length > 0) str = temp +' '+ str;\r\n        if(arr.length > 1) str = str+'.'+arr[1].slice(0,2);\r\n        return str;    \r\n    } else {\r\n        return '';\r\n    }\r\n}\r\nexport function StrtoNumber(Str){\r\n    return formatter(Str.toString());\r\n}\r\nexport function getId(rating, id){\r\n    for (let i = 0; i < rating.length; i++) {\r\n        if(id === rating[i].id) return i+1;\r\n    }\r\n    return NaN;\r\n}\r\n\r\nexport function CalculatePercent (a,b) {\r\n    return +((a/b)*100).toFixed(2);\r\n}\r\n\r\nfunction Sorting (e) {\r\n    e.sort((a,b) => {return b-a});\r\n    // return e;\r\n}\r\n\r\nfunction CreateSortedData (temp,data,newData) {\r\n    temp.map(e => {\r\n        data.map(data => {\r\n            if(data.usd == e) newData.push(data);\r\n        })\r\n    });\r\n}\r\n\r\nexport function CalculateTops (data,price, count){\r\n    const temp = [];\r\n    const newData = [];\r\n    const perc = [];\r\n    data.map(e => temp.push(e.usd));\r\n    Sorting(temp);\r\n    CreateSortedData(temp,data,newData);\r\n    newData.map(e => perc.push(Math.round((e.usd*10000)/price)/100));\r\n    newData.map((e,i) => {e.perc = perc[i];})\r\n\r\n    data = [];\r\n    newData.map((e,i) => {\r\n        if(i<count) {\r\n            data.push(e);\r\n        }\r\n        else return 0;\r\n    })\r\n    return data;\r\n}\r\n\r\nexport function GetTops(Header, accessor,noData){\r\n    return {\r\n        show: false,\r\n        Header: Header,\r\n        accessor: accessor,\r\n        Cell:(props) => {\r\n            if(props.value?.length){\r\n                return props.value.map(key=>{\r\n                    return <div className='m-0'>{key['name_uz']}={key.perc} % </div>\r\n                })\r\n            } else {\r\n                return noData\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\nexport function GetDiffferens(value, st){\r\n    if(value){\r\n        return (\r\n            <>\r\n                <i className={` ${(value > 0)? \r\n                                `${st.green} fa-arrow-up`:`${st.red} fa-arrow-down`} fas`}/> \r\n                {NumberToStr(Number(value).toFixed(2))}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n        <>\r\n            <i className={`${st.blue} fas fa-equals`}/>\r\n            0.00\r\n        </>\r\n        )\r\n    }\r\n}\r\nexport function MakeDifferenceObj(Header,accessor, st){\r\n    return {\r\n        show: false,\r\n        Header: Header,\r\n        accessor: accessor,\r\n        Cell:(props) => GetDiffferens(props.value, st)\r\n    }\r\n}\r\nexport function MakeObj(Header, accessor, fixed, ret, show){\r\n    return {\r\n        show: (show)?true:false,\r\n        Header: Header,\r\n        accessor: accessor,\r\n        Cell:(props) => {\r\n            if(props.value){\r\n                return NumberToStr(Number(props.value).toFixed(fixed))+ ret;\r\n            } else {\r\n                return (0).toFixed(fixed) + ret;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function DateFormat(dateProp){\r\n    const parsedDate = new Date(dateProp);\r\n    let date = parsedDate.getDate().toString();\r\n    let month = parsedDate.getMonth()+1;\r\n    month = month.toString();\r\n    if(date.length == 1) date = '0'+ date;\r\n    if(month.length == 1) month = '0'+ month;\r\n    const dateStr = date+'/'+month+'/'+parsedDate.getFullYear(); \r\n    return dateStr;\r\n}\r\nexport function ExcelCells(number){\r\n    if(number >= 26){\r\n        return (String.fromCharCode(65+Math.floor(number/26)-1) + String.fromCharCode(65+number%26))\r\n    } else {\r\n        return String.fromCharCode(65+number);\r\n    }\r\n}\r\nexport function customFilter(option, searchText) {\r\n    if (\r\n        option.label.toLowerCase().includes(searchText.toLowerCase())\r\n    ) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}","F:\\farmaFinal\\farma\\src\\pages\\auth\\signUp\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\loading\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\privateRoute\\index.js",["584"],"import React, {useContext} from \"react\";\r\nimport {Route, Redirect, useHistory} from \"react-router-dom\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport checkPrivilegeOfRole from \"../../authorization/checkPrivilegeOnRole\";\r\n\r\n\r\nconst PrivateRoute = (props) => {\r\n    const {role} = useContext(UserContext);\r\n    const history = useHistory();\r\n    return(\r\n        checkPrivilegeOfRole(role, \"ACCESS_PRIVATE_ROUTES\")\r\n        ?\r\n        <Route {...props} />\r\n        :\r\n        history.goBack()\r\n        // <Redirect to=\"/\" />\r\n    ) \r\n        \r\n}\r\n\r\nexport default PrivateRoute;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugType\\index.js",["585"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {dtApi} from \"../../../services/drugsService\";\r\n\r\nfunction DrugType(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"table.dt\");\r\n    const addTitle = TranslateExp(lang, \"cruds.dt\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.dt\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(dtApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default DrugType;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugForm\\index.js",["586"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {dfApi} from \"../../../services/drugsService\";\r\n\r\nfunction DrugForm(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.df\");\r\n    const addTitle = TranslateExp(lang, \"cruds.df\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.df\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor:\"counter\",\r\n            notSort:true,\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n            Cell:(props)=>{\r\n                const text = props.row.original;\r\n                return `${text.name_uz}   (${text.counter})`\r\n            }\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(dfApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default DrugForm;\r\n// 2021 18 yanvardan 13martgacha","F:\\farmaFinal\\farma\\src\\pages\\cruds\\tradeMark\\index.js",["587"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {tradeMarkApi} from \"../../../services/tdService\";\r\n\r\n\r\nfunction TradeMark(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.td\"),\r\n          addTitle = TranslateExp(lang, \"cruds.td\")+' '+TranslateExp(lang, \"cruds.add\"),\r\n          editTitle = TranslateExp(lang, \"cruds.td\")+' '+TranslateExp(lang, \"cruds.edit\"),\r\n        columns =[\r\n            {\r\n                Header: TranslateExp(lang, \"table.id\"),\r\n                accessor: \"counter\",\r\n                notSort:true\r\n            },\r\n            {\r\n                Header: TranslateExp(lang, \"table.name\"),\r\n                accessor: \"name_uz\",\r\n            }\r\n        ];\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(tradeMarkApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                columns={columns} \r\n                data={respData} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default TradeMark;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\dfg\\index.js",["588"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {dfgApi} from \"../../../services/medService\";\r\n\r\nfunction Dfg(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.dfg\");\r\n    const addTitle = TranslateExp(lang, \"cruds.dfg\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.dfg\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(dfgApi);\r\n    },[])\r\n    \r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default Dfg;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\tpg\\index.js",["589"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {tpgApi} from \"../../../services/tpgService\";\r\n\r\nfunction Tpg(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.tpg\");\r\n    const addTitle = TranslateExp(lang, \"cruds.tpg\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.rpg\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n   \r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(tpgApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default Tpg;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\countries\\index.js",["590","591","592"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, Modal,Form} from \"react-bootstrap\";\r\nimport st from \"../crud.module.scss\";\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable';\r\nimport {countryApi} from \"../../../services/countryService\";\r\n\r\nfunction Countries(props){\r\n    const {edit, saveEditCountry, addCountry, code, setCode, setEditingCode, respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.mfc\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        },\r\n        \r\n        {   \r\n            Header: TranslateExp(lang, \"table.codeCity\"),\r\n            accessor: \"code\"\r\n        }\r\n    ]\r\n\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(countryApi);\r\n    },[])\r\n\r\n    \r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                uploadExcel={uploadExcel}\r\n                title={title}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <Modal show={props.isMOpen} onHide={props.toggle}>\r\n                <Modal.Header><h5 className='m-0'>{TranslateExp(lang, \"content.adding\")} {TranslateExp(lang, \"cruds.country\")} {TranslateExp(lang, \"cruds.add\")}</h5></Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={e=>addCountry(e)}>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.name\")}</Form.Label>\r\n                            <Form.Control onChange={e=>{props.setData(e.target.value)}}\r\n                                            name={\"name_uz\"} type = 'text' placeholder = 'Узбекистан' required/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"content.code\")}</Form.Label>\r\n                            <Form.Control onChange={e=>{setCode(e.target.value)}}\r\n                                            name={\"code\"} type = 'text' placeholder = '1573899491' required/>\r\n                        </Form.Group>\r\n                        <div className='d-flex mb-3'>\r\n                            <Form.Check type=\"switch\" id=\"active\" checked={props.isActive} label={TranslateExp(lang, \"content.activeOne\")} onChange={()=>props.handleActive()} className='mr-2' />\r\n                            <Form.Check type=\"switch\" id=\"delete\" checked={props.isDeleted} onChange={()=>props.handleDelete()} label={TranslateExp(lang, \"content.deletedOne\")}/>\r\n                            <br/>\r\n                        </div>\r\n                        <div className='d-flex justify-content-between'>\r\n                            <Button type='button' className={`btn ${st.btn__white}`} onClick={props.toggle}>{TranslateExp(lang, \"content.cancel\")}</Button>\r\n                            <Button type='submit' className={`btn ${st.btn__primary}`}>{TranslateExp(lang, \"content.toAdd\")}</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n            {/*    edit modal*/}\r\n            <Modal show={props.editModal} onHide={props.editToggle}>\r\n                <Modal.Header><h5 className='m-0'>{TranslateExp(lang, \"content.editing\")} {TranslateExp(lang, \"cruds.country\")} {TranslateExp(lang, \"content.edit\")}</h5></Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={e=>saveEditCountry(e)}>\r\n                        <Form.Group>\r\n                        <Form.Label>{TranslateExp(lang, \"table.name\")}</Form.Label>\r\n                        <Form.Control onChange={e => props.setEditingData(e.target.value)}\r\n                                        defaultValue={props.id===1?\"\":props.name} name={\"name_uz\"} type = 'text' placeholder = 'Узбекистан' required/>\r\n                    </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"content.code\")}</Form.Label>\r\n                            <Form.Control onChange={e => setEditingCode(e.target.value)}\r\n                                            defaultValue={props.id===1?\"\":code} name={\"code\"} type = 'text' placeholder = '158334998' required/>\r\n                        </Form.Group>\r\n                        <div className='d-flex justify-content-between'>\r\n                            <Button type='button' className={`btn ${st.btn__white}`} onClick={props.editToggle}>{TranslateExp(lang, \"content.cancel\")}</Button>\r\n                            <Button type='submit' className={`btn ${st.btn__primary}`}>{TranslateExp(lang, \"content.save\")}</Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            <ModalDeleteCrud {...props} />\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    );\r\n}\r\nexport default Countries;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\dist\\index.js",["593"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {distApi} from \"../../../services/distService\";\r\n\r\nfunction Dist(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.dist\");\r\n    const addTitle = TranslateExp(lang, \"cruds.dist\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.dist\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(distApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default Dist;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\sdr\\index.js",["594"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {sdrApi} from \"../../../services/sdrService\";\r\n\r\nfunction Sdr(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.senders\");\r\n    const addTitle = TranslateExp(lang, \"cruds.sdr\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.sdr\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(sdrApi);\r\n    },[])\r\n    \r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                uploadExcel={uploadExcel}\r\n                title={title}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default Sdr;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\mnn\\index.js",["595"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {mnnApi} from \"../../../services/mnnService\";\r\n\r\nfunction MNN(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.mnn\");\r\n    const addTitle = TranslateExp(lang, \"products.mnn\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"products.mnn\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {\r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(mnnApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                uploadExcel={uploadExcel} \r\n                title={title}\r\n                data={respData}\r\n                columns={columns}\r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n\r\n}\r\nexport default MNN;\r\n","F:\\farmaFinal\\farma\\src\\pages\\cruds\\mf\\index.js",["596"],"import React, {useEffect} from \"react\";\r\nimport ModalAdd from '../../../components/modalAdd';\r\nimport ModalEdit from '../../../components/modalEdit';\r\nimport ModalDeleteCrud from '../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../components/modalStatus';\r\nimport ToastEx from \"../../../components/toasts\";\r\nimport CrudTable from '../../../components/crudTable'\r\nimport ModalSoftDelete from \"../../../components/modalSoftDelete\";\r\n\r\nimport {mfApi} from \"../../../services/mfService\";\r\n\r\nfunction Mf(props){\r\n    const {respData, setApi, setLoading, lang, TranslateExp, uploadExcel} = props;\r\n    const title = TranslateExp(lang, \"products.mf\");\r\n    const addTitle = TranslateExp(lang, \"cruds.mf\")+' '+TranslateExp(lang, \"cruds.add\");\r\n    const editTitle = TranslateExp(lang, \"cruds.mf\")+' '+TranslateExp(lang, \"cruds.edit\");\r\n    const columns = [\r\n        {\r\n            Header: TranslateExp(lang, \"table.id\"),\r\n            accessor: \"counter\",\r\n            notSort:true\r\n        },\r\n        {   \r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        }\r\n    ]\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        setApi(mfApi);\r\n    },[])\r\n    return(\r\n        <>\r\n            <ToastEx {...props}/>\r\n            <CrudTable \r\n                title={title}\r\n                uploadExcel={uploadExcel}\r\n                data={respData} \r\n                columns={columns} \r\n                {...props}\r\n            />\r\n            <ModalAdd {...props} addTitle={addTitle}/>\r\n            <ModalEdit {...props} editTitle={editTitle}/>\r\n            <ModalDeleteCrud {...props}/>\r\n            <ModalStatus {...props} />\r\n            <ModalSoftDelete {...props} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default Mf;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\users\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\auth\\login\\index.js",["597","598","599"],"import React, {useState, useContext, useEffect, useRef} from 'react'\r\nimport st from \"./login.module.scss\"\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {Dropdown} from 'react-bootstrap';\r\nimport {authApi} from \"../../../services/authService\";\r\nimport UserContext from \"../../../context/UserContext\";\r\nimport LangContext from \"../../../context/LangContext\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport Loading from '../../../components/loading';\r\nimport {Alert, Button, Toast} from \"react-bootstrap\";\r\n\r\nfunction Login(props){\r\n    const {TranslateExp} = props;\r\n    const {lang, setLang} = useContext(LangContext);\r\n    const [eye, setEye] = useState(false);\r\n    const [isStatus,setIsStatus] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [regSuccess, setRegSuccess] = useState(window?.regSuccess);\r\n\r\n    console.log(\"reg success\", window.regSuccess);\r\n\r\n    const [data,setData] = useState({\r\n        email:\"\",\r\n        password:\"\",\r\n        user_mac:\"\"\r\n    });\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n\r\n    const {setStateValue, mac, getMac} = useContext(UserContext);\r\n    console.log(\"mac\", mac);\r\n    const login = e => {\r\n        console.log(\"login\");\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        const user_mac = mac?.slice(mac.indexOf(\":\") + 1);\r\n        authApi.login({...data, user_mac: user_mac}).then(resp=>{\r\n            if (resp.status===201){\r\n               \r\n                setIsStatus(true);\r\n\r\n                // if(mac !== undefined){\r\n                    sessionStorage.setItem(\"token\",resp.data.token);\r\n\r\n                    // Decode token to take role value of authenticated user\r\n                    const decoded = jwt_decode(resp.data.token);\r\n\r\n\r\n                    setStateValue({\r\n                        token:resp.data.token,\r\n                        role:decoded.data?.role\r\n                    });\r\n                // }\r\n            }\r\n\r\n        }).catch(error => {\r\n            setErrMsg(error?.response?.data?.message?.ru);\r\n        }).finally(() => setLoading(false));\r\n       \r\n    };\r\n\r\n    useEffect(()=> {\r\n        setTimeout(() => {\r\n            if(regSuccess !== undefined){\r\n                delete window.regSuccess;\r\n                setRegSuccess(undefined);\r\n            }\r\n        }, 4000);\r\n    }, [])\r\n  \r\n    const handleLangChange = (lang) => {\r\n        setLang({\r\n            lang\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                console.log(\"reg success var\", window.regSuccess)\r\n            }\r\n            {\r\n                (regSuccess === undefined)? null : \r\n               <div className={st.successReg}>\r\n                   {\r\n                       regSuccess.ru\r\n                   }\r\n               </div>\r\n            }\r\n           {\r\n               loading? <Loading /> :\r\n            <div className={st.login_body}>\r\n                <div className={st.login_card}>\r\n                    {\r\n                        // Check mac address before authentication\r\n                        // (isStatus && mac)? <Redirect to=\"/\" /> : (mac === undefined)? <Alert variant=\"danger\">Включите расширение Pharm Analytics или загрузите этот модуль!\r\n\r\n                        // Don't check mac address authenticate user even without mac\r\n                        // Just show notification that user should install our app\r\n                        isStatus? <Redirect to=\"/\" /> : (mac === undefined)? <Alert variant=\"danger\">{TranslateExp(lang, \"content.signUpTitle\")}\r\n                        <br />\r\n                        <Link to=\"/doc\">{TranslateExp(lang, \"content.redDoc\")}</Link>{` ${TranslateExp(lang, \"content.or\")} `}<Link to=\"/download\">{TranslateExp(lang, \"content.downMod\")}</Link>\r\n                        <hr />\r\n                        {TranslateExp(lang, \"content.tryAg\")} :{\"   \"}\r\n                        <Button variant=\"info\" onClick={getMac} size=\"sm\"><i className=\"fa fa-refresh\"></i></Button>\r\n                        </Alert> : null\r\n                    }\r\n                    <div className={st.login_cardHeader}>\r\n                        <h1>{TranslateExp(lang, \"auth.login\")}</h1>\r\n                        <h6>{TranslateExp(lang, \"login.title\")}</h6>\r\n                    </div>\r\n                    {\r\n                        errMsg && <p className={st.authMessage}>{errMsg}</p>\r\n                    }\r\n                    <form className={st.login_cardBody} onSubmit={event => login(event)}>\r\n                        <div className={st.login_formGroup}>\r\n                            <label className={st.login_formLabel}>{TranslateExp(lang, \"auth.email\")}</label>\r\n                            <input className={st.login_formControl} onChange={e=>setData({...data,email: e.target.value})} name={\"email\"} type='email' placeholder='example@email.com' required/>\r\n                        </div>\r\n                        <div className={st.login_formGroup}>\r\n                            <label className={st.login_formLabel}>{TranslateExp(lang, \"auth.password\")}</label>\r\n                            <div className={st.password_box}>\r\n                                <input className={st.login_formControl} name={\"password\"} onChange={e=>setData({...data,password: e.target.value})} type={`${(eye)?'text':'password'}`} placeholder='*********' required/>\r\n                                <div className={st.password_eye}>\r\n                                    <i className={`far ${(eye)? 'fa-eye':'fa-eye-slash'}`} onClick={()=>setEye(!eye)}></i>\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                        <button type='submit' className={st.login_formButton}>\r\n                            {TranslateExp(lang, \"auth.signIn\")}\r\n                        </button>\r\n                    </form>\r\n        \r\n                    <p className={st.login_forgotPassword}>\r\n                        <Link className={st.login_forgotPasswordLink} to='/signUp'>{TranslateExp(lang, \"auth.signUp\")}</Link>\r\n                        <Link className={st.login_forgotPasswordLink} to='/reset'>{TranslateExp(lang, \"login.forgotPass\")}?</Link>\r\n                    </p>\r\n                </div>\r\n                <div className={st.lang}>\r\n                    <Dropdown className='w-0'>\r\n                        <Dropdown.Toggle  className={`${st.dropdown} nav-link dropdown-toggle p-0`} as='a' id=\"dropdown-basic\">\r\n                            <span className={\"text-uppercase\"}>{lang}</span>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu >\r\n                            <Dropdown.Item onClick={() => handleLangChange(\"eng\")}>ENG</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => handleLangChange(\"ўзб\")}>ЎЗБ</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => handleLangChange(\"рус\")}>РУС</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default Login;","F:\\farmaFinal\\farma\\src\\pages\\analyze\\namesAnalyze\\index.js",["600","601","602","603","604","605","606","607","608","609","610","611","612","613"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { namesApi } from '../../../services/analyzeNames';\r\nimport {medApi} from \"../../../services/medService\";\r\nimport {NumberToStr, getId, GetDiffferens} from '../../../utils';\r\nfunction NamesAnalyze (props) {\r\n    const {lang, TranslateExp} = props;\r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang, \"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang, \"analyzes.names\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"}];\r\n    const [drugs, setDrugs] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState([{started:'', ended:''}]);\r\n    const [totalPriceCol, setTotalPriceCol] = useState([])\r\n    const [totalPriceSumCol, setTotalPriceSumCol] = useState([])\r\n    const [percentagesCol, setPercentagesCol] = useState([])\r\n    const [countsCol, setCountsCol] = useState([]);\r\n    let selectData = [];\r\n\r\n    async function getActiveList(obj){\r\n        const res = await namesApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {drugID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.drugID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n        getActiveList(Datas).then(data => {\r\n            data.map((elem) => {\r\n                DATA.push(elem);\r\n            })\r\n            console.log(DATA);\r\n            setResult(add(DATA));\r\n            setLoading(false)\r\n        })\r\n    }\r\n    useEffect(()=> getSelectData(),[])\r\n    const getSelectData=()=>{\r\n        medApi.getList().then(resp =>{\r\n            setDrugs(resp.data.data);\r\n            setLoadingSelect(false);\r\n        });\r\n    }\r\n    useEffect(()=>{\r\n        const totalPrice =[]; \r\n        const totalPriceSum =[]; \r\n        const percentageCol = [];\r\n        const countCol = [];\r\n\r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differenceTotalSumPrice=[];\r\n            const differencePercentageCol=[];\r\n            const differenceCountCol = [];\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalSumPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllSum',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffTurnInSum\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].uzs`,\r\n                    Cell:(props)=>{\r\n                        if(props.value){\r\n                            return (\r\n                                <div>\r\n                                    <i className={` ${(props.value > 0)? \r\n                                                    `${st.green} fa-arrow-up`:`${st.red} fa-arrow-down`} fas`}/> \r\n                                    {NumberToStr(Number(props.value).toFixed(2))}\r\n                                </div>\r\n                            )\r\n                        } else {\r\n                            return <div>\r\n                                <i className={`${st.blue} fas fa-equals`}/>\r\n                                {(0).toFixed(2)}\r\n                            </div>\r\n                        }\r\n                    }\r\n                })\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return (\r\n                            <>\r\n                                {GetDiffferens(props.value, st)} %\r\n                            </>\r\n                        )\r\n                    }\r\n                })\r\n                differenceCountCol.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceCountCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n            }\r\n            totalPrice.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    'id': i+1,\r\n                    'role': 'price'\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>{\r\n                    if(props.value){\r\n                        return NumberToStr(Number(props.value).toFixed(2))\r\n                    } else {\r\n                        return (0).toFixed(2)\r\n                    }\r\n                },\r\n            },\r\n            ...differenceTotalPrice            \r\n            )\r\n            totalPriceSum.push({   \r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    'id': i+1,\r\n                    'role': 'sum'\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverInSum\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].uzs`,\r\n                Cell:(props)=>{\r\n                    if(props.value){\r\n                        return NumberToStr(Number(props.value).toFixed(2))\r\n                    } else {\r\n                        return (0).toFixed(2)\r\n                    }\r\n                }\r\n            },\r\n            ...differenceTotalSumPrice\r\n            )\r\n            percentageCol.push({\r\n                HeaderVal:{per:i+1},\r\n                Header: `${TranslateExp(lang, \"table.percIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `percentage[${i}]`,\r\n                Cell:(props)=>{\r\n                    if(props.value){\r\n                        return NumberToStr(Number(props.value).toFixed(2))+' %';\r\n                    } else {\r\n                        return (0).toFixed(2) + ' %'\r\n                    }\r\n                    \r\n                }\r\n            },\r\n            ...differencePercentageCol\r\n            )\r\n            countCol.push({\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    'id': i+1,\r\n                    'role': 'count'\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.qty\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=>{\r\n                    if(props.value){\r\n                        return NumberToStr(props.value)\r\n                    } else {\r\n                        return (0)\r\n                    }\r\n                }\r\n            },\r\n            ...differenceCountCol\r\n            )\r\n        })\r\n        setCountsCol(countCol);\r\n        setPercentagesCol(percentageCol);\r\n        setTotalPriceSumCol(totalPriceSum);\r\n        setTotalPriceCol(totalPrice);\r\n\r\n    },[price, date, lang])\r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n        let AllDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            const TempDATA = [];    \r\n            let sumLength = 0;\r\n            date.forEach((elem,i) => {\r\n                sumLength = sumLength + key[`filterBy_${i}`].length\r\n            });\r\n            if(sumLength > 0){\r\n                date.map((elem,i) => {\r\n                    if(i > 0){\r\n                        key[`filterBy_${i}`].map((element, ll)=>{\r\n                            let bool = true;\r\n                            for (let index = 0; index < TempDATA.length; index++) {\r\n                                if(TempDATA[index].id?.drug_name === element._id.drug_name &&\r\n                                TempDATA[index].id?.sender_company === element._id.sender_company &&\r\n                                TempDATA[index].id?.mode_40_distributor === element._id.mode_40_distributor){\r\n                                    bool = false;\r\n                                    let tempTotalPrice = TempDATA[index].totalPrice;\r\n                                    tempTotalPrice[i] = element.totalPrice;\r\n                                    let tempQty = TempDATA[index].qty;\r\n                                    tempQty[i] = element.qty;\r\n                                    TempDATA[index] = {\r\n                                        ...TempDATA[index],\r\n                                        'totalPrice':tempTotalPrice,\r\n                                        'qty': tempQty\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if(bool){\r\n                                if(TempDATA[0].totalPrice[0].usd || ll){\r\n                                    let qty = [0, 0, 0, 0]; \r\n                                    let price =  [{usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}];\r\n                                    price[i] = element.totalPrice;\r\n                                    qty[i] = element.qty;\r\n                                    TempDATA.push({\r\n                                        'name_uz': key.name_uz,\r\n                                        'drug_farm_group':key.drug_farm_group, \r\n                                        'drug_form': key.drug_form,\r\n                                        'drug_inn': key.drug_inn,\r\n                                        'drug_ts_group': key.drug_ts_group,\r\n                                        'drug_type' : key.drug_type,\r\n                                        'manufacturer': element.manufacturer,\r\n                                        'manufacturer_country': element.manufacturer_country,\r\n                                        'trademark': element.trademark,\r\n                                        'qty': qty, \r\n                                        'totalPrice':price,\r\n                                        'distributor40': element.distributor40,\r\n                                        'sender_company':element.sender_company,\r\n                                        'id':element._id\r\n                                    });\r\n                                } else{\r\n                                    for (let index = 0; index < TempDATA.length; index++) {                                    \r\n                                        let tempTotalPrice = TempDATA[index].totalPrice;\r\n                                        tempTotalPrice[i] = element.totalPrice;\r\n                                        let tempQty = TempDATA[index].qty;\r\n                                        tempQty[i] = element.qty;\r\n                                        TempDATA[index] = {\r\n                                            ...TempDATA[index],\r\n                                            'manufacturer': element.manufacturer,\r\n                                            'manufacturer_country': element.manufacturer_country,\r\n                                            'trademark': element.trademark,\r\n                                            'totalPrice':tempTotalPrice,\r\n                                            'qty': tempQty,\r\n                                            'distributor40': element.distributor40,\r\n                                            'sender_company':element.sender_company,\r\n                                            'id':element._id,\r\n                                            \r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    } else {\r\n                        let element = key[`filterBy_0`]\r\n                        if(element.length > 0){\r\n                            element.map(kk=>{\r\n                                TempDATA.push({\r\n                                    'name_uz': key.name_uz,\r\n                                    'drug_farm_group':key.drug_farm_group, \r\n                                    'drug_form': key.drug_form,\r\n                                    'drug_inn': key.drug_inn,\r\n                                    'drug_ts_group': key.drug_ts_group,\r\n                                    'drug_type' : key.drug_type,\r\n                                    'manufacturer': kk.manufacturer,\r\n                                    'manufacturer_country': kk.manufacturer_country,\r\n                                    'trademark': kk.trademark,\r\n                                    'qty':[kk.qty, 0, 0, 0], \r\n                                    'totalPrice':[kk.totalPrice, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}],\r\n                                    'distributor40': kk.distributor40,\r\n                                    'sender_company':kk.sender_company,\r\n                                    'id':kk._id\r\n                                });\r\n                            })\r\n                        } else {\r\n                            TempDATA.push({\r\n                                'name_uz': key.name_uz,\r\n                                'drug_farm_group':key.drug_farm_group, \r\n                                'drug_form': key.drug_form,\r\n                                'drug_inn': key.drug_inn,\r\n                                'drug_ts_group': key.drug_ts_group,\r\n                                'drug_type' : key.drug_type,\r\n                                'manufacturer':TranslateExp(lang, \"content.noData\"),\r\n                                'manufacturer_country':TranslateExp(lang, \"content.noData\"),\r\n                                'trademark': TranslateExp(lang, \"content.noData\"),\r\n                                'qty':[0, 0, 0, 0], \r\n                                'totalPrice':[{usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}],\r\n                                'distributor40': TranslateExp(lang, \"content.noData\"),\r\n                                'sender_company':TranslateExp(lang, \"content.noData\"),\r\n                                'id':{}\r\n                            });\r\n                        }\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            } \r\n            else {\r\n                TempDATA.push({\r\n                    'name_uz': key.name_uz,\r\n                    'drug_farm_group':key.drug_farm_group, \r\n                    'drug_form': key.drug_form,\r\n                    'drug_inn': key.drug_inn,\r\n                    'drug_ts_group': key.drug_ts_group,\r\n                    'drug_type' : key.drug_type,\r\n                    'manufacturer':TranslateExp(lang, \"content.noData\"),\r\n                    'manufacturer_country':TranslateExp(lang, \"content.noData\"),\r\n                    'trademark': TranslateExp(lang, \"content.noData\"),\r\n                    'qty':[0, 0, 0, 0], \r\n                    'totalPrice':[{usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}, {usd: 0, eur: 0, uzs: 0, rub: 0}],\r\n                    'distributor40': TranslateExp(lang, \"content.noData\"),\r\n                    'sender_company':TranslateExp(lang, \"content.noData\"),\r\n                    'id':{}\r\n                });\r\n            }\r\n            LastDATA.push(...TempDATA);  \r\n        })\r\n        date.map((s,i) => {\r\n            let ALLTotalPrice = {usd: 0, uzs: 0, eur: 0, rub: 0};\r\n            let ALLCount = 0;\r\n            LastDATA.map((key)=>{\r\n                ALLTotalPrice.usd += +(key.totalPrice[i].usd);\r\n                ALLTotalPrice.eur += +(key.totalPrice[i].eur);\r\n                ALLTotalPrice.rub += +(key.totalPrice[i].rub);\r\n                ALLTotalPrice.uzs += +(key.totalPrice[i].uzs);\r\n                ALLCount += (key.qty[i]);\r\n            })\r\n            AllDATA.push({'allTotalPrice':ALLTotalPrice, 'allCount':ALLCount});\r\n        });\r\n        setAllTotalPrice(AllDATA);        \r\n        return percentAdd(LastDATA, AllDATA);\r\n    }\r\n    const percentAdd = (respData, allTotalPrice) => {\r\n        let DATA = [];\r\n        let returnData =[];\r\n        let rating =[];\r\n        respData.map(element => {\r\n            const percentage = [];\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            const differenceCountCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                if(element.totalPrice[i]?.usd){\r\n                    percentage.push(\r\n                        ((element.totalPrice[i].usd*100)/allTotalPrice[i].allTotalPrice.usd).toFixed(2)\r\n                        );\r\n                } else {\r\n                    percentage.push(0);\r\n                }\r\n                if(i){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    differencePercentageCol.push((percentage[i] - percentage[i-1]))\r\n                    differenceCountCol.push(element.qty[i] - element.qty[i-1]);\r\n                }\r\n            }\r\n            DATA.push({...element, percentage , differenceTotalPrice, differenceCountCol, differencePercentageCol});\r\n            \r\n        })\r\n        DATA.map(f => rating.push({'percentage': f.percentage, 'id': f._id}));\r\n        rating.sort(function(b, a){return a.percentage - b.percentage});\r\n        DATA.map(f => returnData.push({...f, 'rating': getId(rating, f._id)}))\r\n        return returnData;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role : 'name'\r\n            },\r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPriceCol,\r\n        ...totalPriceSumCol,\r\n        ...percentagesCol,\r\n        ...countsCol,        \r\n        // {\r\n        //     Header: 'Рейтинг',\r\n        //     accessor: 'rating' // рейтинг надо изменить\r\n        // },\r\n        {\r\n            Header: TranslateExp(lang, \"products.td\"),\r\n            accessor: 'trademark',\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"products.mnn\"),\r\n            accessor: 'drug_inn'\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"table.dt\"),\r\n            accessor: 'drug_type'\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"table.df\"),\r\n            accessor: 'drug_form'\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"table.mf\"),\r\n            accessor:'manufacturer',\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"table.mfc\"),\r\n            accessor:'manufacturer_country',\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"table.sender\"),\r\n            accessor : 'sender_company'\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"table.dist\"),\r\n            accessor : 'distributor40'\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"products.dfg\"),\r\n            accessor: 'drug_farm_group'\r\n        },\r\n        {\r\n            HeaderVal:{per:0},\r\n            Header: TranslateExp(lang, \"products.tpg\"),\r\n            accessor: 'drug_ts_group'\r\n        }\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = drugs.map(item => ({value: item._id, label: item.name_uz}))\r\n\r\n    return(\r\n        <>\r\n            <DataTable\r\n                {...props}\r\n                menu={menu} \r\n                RebootAll={RebootAll}\r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                loadingSelect={loadingSelect}\r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NamesAnalyze;","F:\\farmaFinal\\farma\\src\\pages\\auth\\resetPassword\\index.js",["614","615","616","617","618"],"import React, {useEffect, useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport st from './resetPassword.module.scss'\r\nimport {authApi} from \"../../../services/authService\";\r\nimport {userApi} from \"../../../services/userService\";\r\nexport default function ResetPassword (){\r\n    const [password,setPassword] = useState('');\r\n    const [confirmPassword,setConfirmPassword] = useState('');\r\n    const[userList,setUserList] = useState([]);\r\n\r\n    const changePassword = (e) =>{\r\n        e.preventDefault();\r\n        if (password===confirmPassword){\r\n            //agar bazada mavjud bulmagan email yuborilsa nma buladi?\r\n            // authApi.reset({password}).then(resp=>{\r\n            //     console.log(\"resp\",resp);\r\n            // })\r\n        } else {\r\n            console.log(\"not confirmed\");\r\n        }\r\n    };\r\n    console.log(\"password\",password);\r\n    console.log(\"ConfirmPass\",confirmPassword);\r\n        return (\r\n            <div className={st.reset_body}>\r\n                <div className={st.reset_card}>\r\n                    <div className={st.reset_cardHeader}>\r\n                        <h3>Reset Password</h3>\r\n                    </div>\r\n                    <form onSubmit={e=>changePassword(e)} className={st.reset_cardBody}>\r\n                        <div className={st.reset_formGroup}>\r\n                            <label className={st.reset_formLabel}>Password</label>\r\n                            <input onChange={e=>setPassword(e.target.value)} className={st.reset_formControl} type='password' placeholder='************' required/>\r\n                        </div>\r\n                        <div className={st.reset_formGroup}>\r\n                            <label className={st.reset_formLabel}>Confirm password</label>\r\n                            <input onChange={e=>setConfirmPassword(e.target.value)} className={st.reset_formControl} type='password' placeholder='************' required/>\r\n                        </div>\r\n                        <button type='submit' className={st.reset_formButton}>\r\n                            Send\r\n                        </button>\r\n                    </form>\r\n                    <p className={st.reset_forgotPassword}>\r\n                        <Link className={st.reset_forgotPasswordLink} to='/login'>Login</Link>\r\n                     </p>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n","F:\\farmaFinal\\farma\\src\\pages\\analyze\\companiesAnalyze\\index.js",["619","620","621","622","623","624","625","626","627","628","629"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { companiesApi } from '../../../services/analyzeCompanies';\r\nimport {sdrApi} from \"../../../services/sdrService\";\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj} from '../../../utils';\r\n\r\nfunction CompanyAnalyze (props) {\r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"analyzes.companies\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = (props.allInfo)?1:5;\r\n    const [sdr, setSdr] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState([{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [mnn, setMnn] = useState({qty:[], percent:[], tops:[]});\r\n    const [drugs, setDrugs] = useState({qty:[], percent:[], tops:[]});\r\n    const [df, setDF] = useState({qty:[], percent:[], tops:[]});\r\n    const [dist, setDist] = useState({qty:[], percent:[], tops:[]});\r\n    const [tradeMarks, setTradeMarks] = useState({qty:[], percent:[], tops:[]});\r\n    const [manufacturers, setManufacturers] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData=[];\r\n    async function getActiveList(obj){\r\n        const res = await companiesApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.dataID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n       \r\n \r\n        getActiveList(Datas).then(data => {\r\n            data.map((elem) => {\r\n                DATA.push(elem);\r\n            })\r\n            setResult(add(DATA));\r\n            setLoading(false);\r\n        });\r\n    }\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        } else {\r\n            getSelectData()\r\n        }\r\n    },[])\r\n    useEffect(() => {\r\n        console.log(lang);\r\n    }, [lang])\r\n    const getSelectData=()=>{\r\n        sdrApi.getList()\r\n        .then(resp => {\r\n            setSdr(resp.data.data)\r\n            setLoadingSelect(false);\r\n        })\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]}\r\n        const COUNT = {qty:[], percent:[], raiting:[]}\r\n        const MNN = {qty:[], percent:[], tops:[]};\r\n        const DRUGS = {qty:[], percent:[], tops:[]};\r\n        const DF = {qty:[], percent:[], tops:[]};\r\n        const DIST = {qty:[], percent:[], tops:[]};\r\n        const TRADEMARK = {qty:[], percent:[], tops:[]};\r\n        const MANUFACTURERS = {qty:[], percent:[], tops:[]};\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                difference.qty.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.mnn[${i-1}]`, st))\r\n                difference.qty.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.drugs[${i-1}]`, st))\r\n                difference.qty.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.df[${i-1}]`, st))\r\n                difference.qty.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.dist[${i-1}]`, st))\r\n                difference.qty.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.trademark[${i-1}]`, st))\r\n                difference.qty.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.manufacturer[${i-1}]`, st))\r\n                difference.part.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.mnn[${i-1}]`, st))\r\n                difference.part.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.drugs[${i-1}]`, st))\r\n                difference.part.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.df[${i-1}]`, st))\r\n                difference.part.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.dist[${i-1}]`, st))\r\n                difference.part.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.trademark[${i-1}]`, st))\r\n                difference.part.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.manufacturer[${i-1}]`, st))\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per: i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>NumberToStr(Number(props.value).toFixed(2))\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %', true), HeaderVal:{per:i+1}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '', true),HeaderVal:{per:i+1}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per: i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n                    \r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %', true),HeaderVal:{per:i+1}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, '', true),HeaderVal:{per:i+1}})\r\n            \r\n            MNN.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentINN[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mnn\"), per:i+1, group:true}},...difference.part.mnn);\r\n            MNN.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyINN[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.mnn);\r\n            MNN.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMnn\") : TranslateExp(lang, \"table.topMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsINN[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n            \r\n            DRUGS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDrugs[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.med\"),per:i+1, group:true}},...difference.part.drugs);\r\n            DRUGS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDrugs[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.drugs);\r\n            DRUGS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDrug\") : TranslateExp(lang, \"table.topDrugs\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDrugs[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            DF.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDF[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.df\"),per:i+1, group:true}},...difference.part.df);\r\n            DF.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDF[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.df); \r\n            DF.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDf\") : TranslateExp(lang, \"table.topDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDF[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            DIST.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDist[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.dist\"),per:i+1, group:true}},...difference.part.dist);\r\n            DIST.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDist[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.dist);  \r\n            DIST.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDist\") : TranslateExp(lang, \"table.topDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDist[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            TRADEMARK.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTradeMarks[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.td\"),per:i+1, group:true}},...difference.part.trademark);\r\n            TRADEMARK.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyTradeMarks[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.trademark); \r\n            TRADEMARK.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidTd\") : TranslateExp(lang, \"table.topTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsTradeMarks[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            MANUFACTURERS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentManufacturers[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mf\"),per:i+1, group:true}},...difference.part.manufacturer);\r\n            MANUFACTURERS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyManufacturers[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.manufacturer);  \r\n            MANUFACTURERS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMf\") : TranslateExp(lang, \"table.topMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsManufacturers[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setMnn({qty:MNN.qty, percent: MNN.percent, tops:MNN.tops});\r\n        setDrugs({qty:DRUGS.qty, percent: DRUGS.percent, tops:DRUGS.tops});\r\n        setDF({qty:DF.qty, percent: DF.percent, tops:DF.tops});\r\n        setDist({qty:DIST.qty, percent: DIST.percent, tops:DIST.tops});\r\n        setTradeMarks({qty:TRADEMARK.qty, percent: TRADEMARK.percent, tops:TRADEMARK.tops});\r\n        setManufacturers({qty:MANUFACTURERS.qty, percent: MANUFACTURERS.percent, tops:MANUFACTURERS.tops});\r\n    },[price, date, result, lang])\r\n    \r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n    useEffect(() => {\r\n        console.log(allTotalPrice)\r\n    },[allTotalPrice]);\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, element.totalDrugInn.length],\r\n                                'percentINN':[ ...TempDATA.percentINN, TCPP.usd/element.totalDrugInn.length],\r\n                                'topsINN':[ ...TempDATA.topsINN, CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, element.totalDrugNames.length],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDF':[ ...TempDATA.qtyDF, element.filterByDrugForms.length],\r\n                                'percentDF':[ ...TempDATA.percentDF, TCPP.usd/element.filterByDrugForms.length],\r\n                                'topsDF':[ ...TempDATA.topsDF, CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, element.totalDistributors.length],\r\n                                'percentDist':[ ...TempDATA.percentDist, TCPP.usd/element.totalDistributors.length],\r\n                                'topsDist':[ ...TempDATA.topsDist, CalculateTops(element.totalDistributors, TCPP.usd,countTops)],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, element.filterByTrademarks.length],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, TCPP.usd/element.filterByTrademarks.length],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, element.filterByManufacturers.length],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, TCPP.usd/element.filterByManufacturers.length],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, 0],\r\n                                'percentINN':[ ...TempDATA.percentINN, 0],\r\n                                'topsINN':[ ...TempDATA.topsINN, ''],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, 0],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, 0],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, ''],\r\n    \r\n                                'qtyDF':[ ...TempDATA.qtyDF, 0],\r\n                                'percentDF':[ ...TempDATA.percentDF, 0],\r\n                                'topsDF':[ ...TempDATA.topsDF, ''],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, 0],\r\n                                'percentDist':[ ...TempDATA.percentDist, 0],\r\n                                'topsDist':[ ...TempDATA.topsDist, ''],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, 0],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, 0],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, ''],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, 0],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, 0],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, ''],\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyINN' :[element.totalDrugInn.length],\r\n                            'percentINN':[TCPP.usd/element.totalDrugInn.length],\r\n                            'topsINN':[CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n\r\n                            'qtyDrugs':[element.totalDrugNames.length],\r\n                            'percentDrugs':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsDrugs':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'qtyDF':[element.filterByDrugForms.length],\r\n                            'percentDF':[TCPP.usd/element.filterByDrugForms.length],\r\n                            'topsDF':[CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n\r\n                            'qtyDist':[element.totalDistributors.length],\r\n                            'percentDist':[TCPP.usd/element.totalDistributors.length],\r\n                            'topsDist':[CalculateTops(element.totalDistributors, TCPP.usd,countTops)],\r\n\r\n                            'qtyTradeMarks':[element.filterByTrademarks.length],\r\n                            'percentTradeMarks':[TCPP.usd/element.filterByTrademarks.length],\r\n                            'topsTradeMarks':[CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n\r\n                            'qtyManufacturers':[element.filterByManufacturers.length],\r\n                            'percentManufacturers':[TCPP.usd/element.filterByManufacturers.length],\r\n                            'topsManufacturers':[CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyINN' :[0],\r\n                            'percentINN':[0],\r\n                            'topsINN':[''],\r\n\r\n                            'qtyDrugs':[0],\r\n                            'percentDrugs':[0],\r\n                            'topsDrugs':[''],\r\n\r\n                            'qtyDF':[0],\r\n                            'percentDF':[0],\r\n                            'topsDF':[''],\r\n\r\n                            'qtyDist':[0],\r\n                            'percentDist':[0],\r\n                            'topsDist':[''],\r\n\r\n                            'qtyTradeMarks':[0],\r\n                            'percentTradeMarks':[0],\r\n                            'topsTradeMarks':[''],\r\n\r\n                            'qtyManufacturers':[0],\r\n                            'percentManufacturers':[0],\r\n                            'topsManufacturers':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.qty.mnn.push(element.qtyINN[i] - element.qtyINN[i-1]);\r\n                    difference.qty.drugs.push(element.qtyDrugs[i] - element.qtyDrugs[i-1]);\r\n                    difference.qty.df.push(element.qtyDF[i] - element.qtyDF[i-1]);\r\n                    difference.qty.dist.push(element.qtyDist[i] - element.qtyDist[i-1]);\r\n                    difference.qty.trademark.push(element.qtyTradeMarks[i] - element.qtyTradeMarks[i-1]);\r\n                    difference.qty.manufacturer.push(element.qtyManufacturers[i] - element.qtyManufacturers[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.mnn.push(element.percentINN[i]-element.percentINN[i-1]);\r\n                    difference.part.drugs.push(element.percentDrugs[i]-element.percentDrugs[i-1]);\r\n                    difference.part.df.push(element.percentDF[i]-element.percentDF[i-1]);\r\n                    difference.part.dist.push(element.percentDist[i]-element.percentDist[i-1]);\r\n                    difference.part.trademark.push(element.percentTradeMarks[i]-element.percentTradeMarks[i-1]);\r\n                    difference.part.manufacturer.push(element.percentManufacturers[i]-element.percentManufacturers[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang,\"table.name\"),\r\n            accessor: 'name_uz',\r\n        },\r\n    ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.qty,\r\n        ...count.percent,\r\n        ...count.raiting,\r\n        ...mnn.percent,\r\n        ...mnn.qty,\r\n        ...mnn.tops,\r\n        ...drugs.percent,\r\n        ...drugs.qty,\r\n        ...drugs.tops,\r\n        ...df.percent,\r\n        ...df.qty,\r\n        ...df.tops,\r\n        ...dist.percent,\r\n        ...dist.qty,\r\n        ...dist.tops,\r\n        ...tradeMarks.percent,\r\n        ...tradeMarks.qty,\r\n        ...tradeMarks.tops,\r\n        ...manufacturers.percent,\r\n        ...manufacturers.qty,\r\n        ...manufacturers.tops,\r\n    ];\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = sdr.map(item => ({value: item._id, label: item.name_uz}))\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                loadingSelect={loadingSelect} \r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CompanyAnalyze;","F:\\farmaFinal\\farma\\src\\pages\\analyze\\manufacturerAnalyze\\index.js",["630","631","632","633","634","635","636","637","638","639","640","641"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { manufacturersApi } from '../../../services/analyzeManufacturer';\r\nimport {mfApi} from \"../../../services/mfService\";\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj} from '../../../utils';\r\n\r\nfunction ManufacturerAnalyze (props) {\r\n    \r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"analyzes.mf\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = (props.allInfo)?1:5;\r\n    const [mf, setMf] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState(props.allInfo?[...props.dateAll]:[{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [mnn, setMnn] = useState({qty:[], percent:[], tops:[]});\r\n    const [drugs, setDrugs] = useState({qty:[], percent:[], tops:[]});\r\n    const [Companies, setCompanies] = useState({qty:[], percent:[], tops:[]});\r\n    const [df, setDF] = useState({qty:[], percent:[], tops:[]});\r\n    const [dist, setDist] = useState({qty:[], percent:[], tops:[]});\r\n    const [tradeMarks, setTradeMarks] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData = [];\r\n\r\n    async function getActiveList(obj){\r\n        const res = await manufacturersApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.dataID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n\r\n        getActiveList(Datas).then(data => {\r\n                data.map((elem) => {\r\n                    DATA.push(elem);\r\n                })\r\n                setResult(add(DATA));\r\n                setLoading(false)\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        } else {\r\n            getSelectData()\r\n        }\r\n    },[])\r\n    const getSelectData=()=>{\r\n        mfApi.getList()\r\n        .then(resp => {\r\n            setMf(resp.data.data)\r\n            setLoadingSelect(false);\r\n        }\r\n        );\r\n    }\r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]}\r\n        const COUNT = {qty:[], percent:[], raiting:[]}\r\n        const MNN = {qty:[], percent:[], tops:[]};\r\n        const DRUGS = {qty:[], percent:[], tops:[]};\r\n        const COMPANIES = {qty:[], percent:[], tops:[]};\r\n        const DF = {qty:[], percent:[], tops:[]};\r\n        const DIST = {qty:[], percent:[], tops:[]};\r\n        const TRADEMARK = {qty:[], percent:[], tops:[]};\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    Companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    Companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                difference.qty.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.mnn[${i-1}]`, st))\r\n                difference.qty.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.drugs[${i-1}]`, st))\r\n                difference.qty.Companies.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.Companies[${i-1}]`, st))\r\n                difference.qty.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.df[${i-1}]`, st))\r\n                difference.qty.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.dist[${i-1}]`, st))\r\n                difference.qty.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.trademark[${i-1}]`, st))\r\n                difference.part.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.mnn[${i-1}]`, st))\r\n                difference.part.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.drugs[${i-1}]`, st))\r\n                difference.part.Companies.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.Companies[${i-1}]`, st))\r\n                difference.part.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.df[${i-1}]`, st))\r\n                difference.part.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.dist[${i-1}]`, st))\r\n                difference.part.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.trademark[${i-1}]`, st))\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>NumberToStr(Number(props.value).toFixed(2))\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '',true),'HeaderVal':{per:i+1}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n                    \r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, '',true),'HeaderVal':{per:i+1}})\r\n            \r\n            MNN.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentINN[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mnn\"),group:true, per:i+1}},...difference.part.mnn);\r\n            MNN.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyINN[${i}]`, 0, ''),'HeaderVal':{group:true, per:i+1}},...difference.qty.mnn);\r\n            MNN.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMnn\") : TranslateExp(lang, \"table.topMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsINN[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:true, per:i+1}});\r\n            \r\n            DRUGS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDrugs[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.med\"),group:true, per:i+1}},...difference.part.drugs);\r\n            DRUGS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDrugs[${i}]`, 0, ''),'HeaderVal':{group:true, per:i+1}},...difference.qty.drugs);\r\n            DRUGS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDrug\") : TranslateExp(lang, \"table.topDrugs\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDrugs[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:true, per:i+1}});\r\n\r\n            COMPANIES.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentCompanies[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.comp\"),group:true, per:i+1}},...difference.part.Companies);\r\n            COMPANIES.qty.push({...MakeObj(`${TranslateExp(lang, \"home.qtyComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyCompanies[${i}]`, 0, ''),'HeaderVal':{group:true, per:i+1}},...difference.qty.Companies);\r\n            COMPANIES.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidComp\") : TranslateExp(lang, \"table.topComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsCompanies[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:true, per:i+1}});\r\n\r\n            DF.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDF[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.df\"),group:true, per:i+1}},...difference.part.df);\r\n            DF.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDF[${i}]`, 0, ''),'HeaderVal':{group:true, per:i+1}},...difference.qty.df); \r\n            DF.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDf\") : TranslateExp(lang, \"table.topDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDF[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:true, per:i+1}});\r\n\r\n            DIST.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDist[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.dist\"),group:true, per:i+1}},...difference.part.dist);\r\n            DIST.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDist[${i}]`, 0, ''),'HeaderVal':{group:true, per:i+1}},...difference.qty.dist);  \r\n            DIST.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDist\") : TranslateExp(lang, \"table.topDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDist[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:true, per:i+1}});\r\n\r\n            TRADEMARK.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTradeMarks[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.td\"),group:true, per:i+1}},...difference.part.trademark);\r\n            TRADEMARK.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyTradeMarks[${i}]`, 0, ''),'HeaderVal':{group:true, per:i+1}},...difference.qty.trademark); \r\n            TRADEMARK.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidTd\") : TranslateExp(lang, \"table.topTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsTradeMarks[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:true, per:i+1}});\r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setMnn({qty:MNN.qty, percent: MNN.percent, tops:MNN.tops});\r\n        setDrugs({qty:DRUGS.qty, percent: DRUGS.percent, tops:DRUGS.tops});\r\n        setCompanies({qty:COMPANIES.qty, percent: COMPANIES.percent, tops:COMPANIES.tops});\r\n        setDF({qty:DF.qty, percent: DF.percent, tops:DF.tops});\r\n        setDist({qty:DIST.qty, percent: DIST.percent, tops:DIST.tops});\r\n        setTradeMarks({qty:TRADEMARK.qty, percent: TRADEMARK.percent, tops:TRADEMARK.tops});\r\n        \r\n    },[price, date, lang])\r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, element.totalDrugInn.length],\r\n                                'percentINN':[ ...TempDATA.percentINN, TCPP.usd/element.totalDrugInn.length],\r\n                                'topsINN':[ ...TempDATA.topsINN, CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, element.totalDrugNames.length],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n    \r\n                                'qtyCompanies':[ ...TempDATA.qtyCompanies, element.filterByCompanies.length],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, TCPP.usd/element.filterByCompanies.length],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, CalculateTops(element.filterByCompanies, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDF':[ ...TempDATA.qtyDF, element.filterByDrugForms.length],\r\n                                'percentDF':[ ...TempDATA.percentDF, TCPP.usd/element.filterByDrugForms.length],\r\n                                'topsDF':[ ...TempDATA.topsDF, CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, element.totalDistributors.length],\r\n                                'percentDist':[ ...TempDATA.percentDist, TCPP.usd/element.totalDistributors.length],\r\n                                'topsDist':[ ...TempDATA.topsDist, CalculateTops(element.totalDistributors, TCPP.usd,countTops)],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, element.filterByTrademarks.length],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, TCPP.usd/element.filterByTrademarks.length],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n    \r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, 0],\r\n                                'percentINN':[ ...TempDATA.percentINN, 0],\r\n                                'topsINN':[ ...TempDATA.topsINN, ''],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, 0],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, 0],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, ''],\r\n    \r\n                                'qtyCompanies':[ ...TempDATA.qtyCompanies, 0],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, 0],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, ''],\r\n\r\n                                'qtyDF':[ ...TempDATA.qtyDF, 0],\r\n                                'percentDF':[ ...TempDATA.percentDF, 0],\r\n                                'topsDF':[ ...TempDATA.topsDF, ''],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, 0],\r\n                                'percentDist':[ ...TempDATA.percentDist, 0],\r\n                                'topsDist':[ ...TempDATA.topsDist, ''],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, 0],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, 0],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, ''],\r\n                         }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyINN' :[element.totalDrugInn.length],\r\n                            'percentINN':[TCPP.usd/element.totalDrugInn.length],\r\n                            'topsINN':[CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n\r\n                            'qtyDrugs':[element.totalDrugNames.length],\r\n                            'percentDrugs':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsDrugs':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'qtyCompanies':[element.filterByCompanies.length],\r\n                            'percentCompanies':[TCPP.usd/element.filterByCompanies.length],\r\n                            'topsCompanies':[CalculateTops(element.filterByCompanies, TCPP.usd, countTops)],\r\n\r\n                            'qtyDF':[element.filterByDrugForms.length],\r\n                            'percentDF':[TCPP.usd/element.filterByDrugForms.length],\r\n                            'topsDF':[CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n\r\n                            'qtyDist':[element.totalDistributors.length],\r\n                            'percentDist':[TCPP.usd/element.totalDistributors.length],\r\n                            'topsDist':[CalculateTops(element.totalDistributors, TCPP.usd,countTops)],\r\n\r\n                            'qtyTradeMarks':[element.filterByTrademarks.length],\r\n                            'percentTradeMarks':[TCPP.usd/element.filterByTrademarks.length],\r\n                            'topsTradeMarks':[CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n                          };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyINN' :[0],\r\n                            'percentINN':[0],\r\n                            'topsINN':[''],\r\n\r\n                            'qtyDrugs':[0],\r\n                            'percentDrugs':[0],\r\n                            'topsDrugs':[''],\r\n\r\n                            'qtyCompanies':[0],\r\n                            'percentCompanies':[0],\r\n                            'topsCompanies':[''],\r\n\r\n                            'qtyDF':[0],\r\n                            'percentDF':[0],\r\n                            'topsDF':[''],\r\n\r\n                            'qtyDist':[0],\r\n                            'percentDist':[0],\r\n                            'topsDist':[''],\r\n\r\n                            'qtyTradeMarks':[0],\r\n                            'percentTradeMarks':[0],\r\n                            'topsTradeMarks':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    Companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    Companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.qty.mnn.push(element.qtyINN[i] - element.qtyINN[i-1]);\r\n                    difference.qty.drugs.push(element.qtyDrugs[i] - element.qtyDrugs[i-1]);\r\n                    difference.qty.Companies.push(element.qtyCompanies[i] - element.qtyCompanies[i-1]);\r\n                    difference.qty.df.push(element.qtyDF[i] - element.qtyDF[i-1]);\r\n                    difference.qty.dist.push(element.qtyDist[i] - element.qtyDist[i-1]);\r\n                    difference.qty.trademark.push(element.qtyTradeMarks[i] - element.qtyTradeMarks[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.mnn.push(element.percentINN[i]-element.percentINN[i-1]);\r\n                    difference.part.drugs.push(element.percentDrugs[i]-element.percentDrugs[i-1]);\r\n                    difference.part.Companies.push(element.percentCompanies[i]-element.percentCompanies[i-1]);\r\n                    difference.part.df.push(element.percentDF[i]-element.percentDF[i-1]);\r\n                    difference.part.dist.push(element.percentDist[i]-element.percentDist[i-1]);\r\n                    difference.part.trademark.push(element.percentTradeMarks[i]-element.percentTradeMarks[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang, \"analyzes.namesMf\"),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.qty,\r\n        ...count.percent,\r\n        ...count.raiting,\r\n        ...mnn.percent,\r\n        ...mnn.qty,\r\n        ...mnn.tops,\r\n        ...drugs.percent,\r\n        ...drugs.qty,\r\n        ...drugs.tops,\r\n        ...Companies.percent,\r\n        ...Companies.qty,\r\n        ...Companies.tops,\r\n        ...df.percent,\r\n        ...df.qty,\r\n        ...df.tops,\r\n        ...dist.percent,\r\n        ...dist.qty,\r\n        ...dist.tops,\r\n        ...tradeMarks.percent,\r\n        ...tradeMarks.qty,\r\n        ...tradeMarks.tops,\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = mf.map(item => ({value: item._id, label: item.name_uz}))\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ManufacturerAnalyze;","F:\\farmaFinal\\farma\\src\\pages\\analyze\\tradeMarkAnalyze\\index.js",["642","643","644","645","646","647","648","649","650","651","652","653"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { trademarksApi } from '../../../services/analyzeTradeMark';\r\nimport {tradeMarkApi} from \"../../../services/tdService\";\r\n\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj} from '../../../utils';\r\n\r\nfunction TrademarkAnalyze (props) {\r\n    \r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"analyzes.td\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = (props.allInfo)?1:5;\r\n    const [trademark, setTrademark] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState(props.allInfo?[...props.dateAll]:[{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [mnn, setMnn] = useState({qty:[], percent:[], tops:[]});\r\n    const [drugs, setDrugs] = useState({qty:[], percent:[], tops:[]});\r\n    const [df, setDF] = useState({qty:[], percent:[], tops:[]});\r\n    const [dftotal, setDfTotal] = useState({usd:[]});\r\n    const [dist, setDist] = useState({qty:[], percent:[], tops:[]});\r\n    const [manufacturers, setManufacturers] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData = [];\r\n\r\n    async function getActiveList(obj){\r\n        const res = await trademarksApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.dataID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n\r\n        getActiveList(Datas).then(data => {\r\n                data.map((elem) => {\r\n                    DATA.push(elem);\r\n                })\r\n                setResult(add(DATA));\r\n                setLoading(false)\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        } else {\r\n            getSelectData()\r\n        }\r\n    },[])\r\n    const getSelectData=()=>{\r\n        tradeMarkApi.getList().then(resp => {\r\n            setTrademark(resp.data.data);\r\n            setLoadingSelect(false)\r\n        });\r\n    }\r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]},\r\n              COUNT = {qty:[], percent:[], raiting:[]},\r\n              MNN = {qty:[], percent:[], tops:[]},\r\n              DRUGS = {qty:[], percent:[], tops:[]},\r\n              DF = {qty:[], percent:[], tops:[]},\r\n              DFTOTAL = {usd:[]},\r\n              DIST = {qty:[], percent:[], tops:[]},\r\n              MANUFACTURERS = {qty:[], percent:[], tops:[]}\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                usd:{dftotal:[]},\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                difference.usd.dftotal.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.usd.dftotal[${i-1}]`, st))\r\n                difference.qty.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.mnn[${i-1}]`, st))\r\n                difference.qty.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.drugs[${i-1}]`, st))\r\n                difference.qty.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.df[${i-1}]`, st))\r\n                difference.qty.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.dist[${i-1}]`, st))\r\n                difference.qty.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.manufacturer[${i-1}]`, st))\r\n                difference.part.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.mnn[${i-1}]`, st))\r\n                difference.part.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.drugs[${i-1}]`, st))\r\n                difference.part.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.df[${i-1}]`, st))\r\n                difference.part.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.dist[${i-1}]`, st))\r\n                difference.part.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.manufacturer[${i-1}]`, st))\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>NumberToStr(Number(props.value).toFixed(2))\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1,}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '',true),'HeaderVal':{per:i+1,}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1,}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, '',true),'HeaderVal':{per:i+1,}})\r\n            \r\n            MNN.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentINN[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mnn\"),per:i+1,group:true}},...difference.part.mnn);\r\n            MNN.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyINN[${i}]`, 0, ''),'HeaderVal':{per:i+1,group:true}},...difference.qty.mnn);\r\n            MNN.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMnn\") : TranslateExp(lang, \"table.topMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsINN[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1,group:true}});\r\n            \r\n            DRUGS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDrugs[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.med\"),per:i+1,group:true}},...difference.part.drugs);\r\n            DRUGS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDrugs[${i}]`, 0, ''),'HeaderVal':{per:i+1,group:true}},...difference.qty.drugs);\r\n            DRUGS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDrug\") : TranslateExp(lang, \"table.topDrugs\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDrugs[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1,group:true}});\r\n\r\n            DFTOTAL.usd.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverUSD\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `usdDF[${i}]`, 2, ''),'HeaderVal':{per:i+1,}},...difference.usd.dftotal)\r\n            DF.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDF[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.df\"),per:i+1,group:true}},...difference.part.df);\r\n            DF.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDF[${i}]`, 0, ''),'HeaderVal':{per:i+1,group:true}},...difference.qty.df); \r\n            DF.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDf\") : TranslateExp(lang, \"table.topDf\")}  ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDF[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1,group:true}});\r\n\r\n            DIST.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDist[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.dist\"),per:i+1,group:true}},...difference.part.dist);\r\n            DIST.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDist[${i}]`, 0, ''),'HeaderVal':{per:i+1,group:true}},...difference.qty.dist);  \r\n            DIST.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDist\") : TranslateExp(lang, \"table.topDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDist[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1,group:true}});\r\n\r\n            MANUFACTURERS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentManufacturers[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mf\"),per:i+1,group:true}},...difference.part.manufacturer);\r\n            MANUFACTURERS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyManufacturers[${i}]`, 0, ''),'HeaderVal':{per:i+1,group:true}},...difference.qty.manufacturer);  \r\n            MANUFACTURERS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMf\") : TranslateExp(lang, \"table.topMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsManufacturers[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1,group:true}});\r\n\r\n            \r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setMnn({qty:MNN.qty, percent: MNN.percent, tops:MNN.tops});\r\n        setDrugs({qty:DRUGS.qty, percent: DRUGS.percent, tops:DRUGS.tops});\r\n        setDF({qty:DF.qty, percent: DF.percent, tops:DF.tops});\r\n        setDfTotal({usd:DFTOTAL.usd});\r\n        setDist({qty:DIST.qty, percent: DIST.percent, tops:DIST.tops});\r\n        setManufacturers({qty:MANUFACTURERS.qty, percent: MANUFACTURERS.percent, tops:MANUFACTURERS.tops});\r\n        \r\n    },[price, date, lang])\r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, element.totalDrugInn.length],\r\n                                'percentINN':[ ...TempDATA.percentINN, TCPP.usd/element.totalDrugInn.length],\r\n                                'topsINN':[ ...TempDATA.topsINN, CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, element.totalDrugNames.length],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                                'usdDF':[ ...TempDATA.usdDF, element.totalDrugForms[0].usd],\r\n                                'qtyDF':[ ...TempDATA.qtyDF, element.filterByDrugForms.length],\r\n                                'percentDF':[ ...TempDATA.percentDF, TCPP.usd/element.filterByDrugForms.length],\r\n                                'topsDF':[ ...TempDATA.topsDF, CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, element.totalDistributors.length],\r\n                                'percentDist':[ ...TempDATA.percentDist, TCPP.usd/element.totalDistributors.length],\r\n                                'topsDist':[ ...TempDATA.topsDist, CalculateTops(element.totalDistributors, TCPP.usd,countTops)],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, element.filterByManufacturers.length],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, TCPP.usd/element.filterByManufacturers.length],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, 0],\r\n                                'percentINN':[ ...TempDATA.percentINN, 0],\r\n                                'topsINN':[ ...TempDATA.topsINN, ''],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, 0],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, 0],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, ''],\r\n    \r\n                                'usdDF':[...TempDATA.usdDF, 0],\r\n                                'qtyDF':[...TempDATA.qtyDF, 0],\r\n                                'percentDF':[ ...TempDATA.percentDF, 0],\r\n                                'topsDF':[ ...TempDATA.topsDF, ''],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, 0],\r\n                                'percentDist':[ ...TempDATA.percentDist, 0],\r\n                                'topsDist':[ ...TempDATA.topsDist, ''],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, 0],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, 0],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, ''],\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyINN' :[element.totalDrugInn.length],\r\n                            'percentINN':[TCPP.usd/element.totalDrugInn.length],\r\n                            'topsINN':[CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n\r\n                            'qtyDrugs':[element.totalDrugNames.length],\r\n                            'percentDrugs':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsDrugs':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'usdDF':[element.totalDrugForms[0].usd],\r\n                            'qtyDF':[element.filterByDrugForms.length],\r\n                            'percentDF':[TCPP.usd/element.filterByDrugForms.length],\r\n                            'topsDF':[CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n\r\n                            'qtyDist':[element.totalDistributors.length],\r\n                            'percentDist':[TCPP.usd/element.totalDistributors.length],\r\n                            'topsDist':[CalculateTops(element.totalDistributors, TCPP.usd,countTops)],\r\n\r\n                            'qtyManufacturers':[element.filterByManufacturers.length],\r\n                            'percentManufacturers':[TCPP.usd/element.filterByManufacturers.length],\r\n                            'topsManufacturers':[CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyINN' :[0],\r\n                            'percentINN':[0],\r\n                            'topsINN':[''],\r\n\r\n                            'qtyDrugs':[0],\r\n                            'percentDrugs':[0],\r\n                            'topsDrugs':[''],\r\n\r\n                            'usdDF':[0],\r\n                            'qtyDF':[0],\r\n                            'percentDF':[0],\r\n                            'topsDF':[''],\r\n\r\n                            'qtyDist':[0],\r\n                            'percentDist':[0],\r\n                            'topsDist':[''],\r\n\r\n                            'qtyManufacturers':[0],\r\n                            'percentManufacturers':[0],\r\n                            'topsManufacturers':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                usd:{dftotal:[]},\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.usd.dftotal.push(element.usdDF[i] - element.usdDF[i-1]);\r\n                    difference.qty.mnn.push(element.qtyINN[i] - element.qtyINN[i-1]);\r\n                    difference.qty.drugs.push(element.qtyDrugs[i] - element.qtyDrugs[i-1]);\r\n                    difference.qty.df.push(element.qtyDF[i] - element.qtyDF[i-1]);\r\n                    difference.qty.dist.push(element.qtyDist[i] - element.qtyDist[i-1]);\r\n                    difference.qty.manufacturer.push(element.qtyManufacturers[i] - element.qtyManufacturers[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.mnn.push(element.percentINN[i]-element.percentINN[i-1]);\r\n                    difference.part.drugs.push(element.percentDrugs[i]-element.percentDrugs[i-1]);\r\n                    difference.part.df.push(element.percentDF[i]-element.percentDF[i-1]);\r\n                    difference.part.dist.push(element.percentDist[i]-element.percentDist[i-1]);\r\n                    difference.part.manufacturer.push(element.percentManufacturers[i]-element.percentManufacturers[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang, \"table.tdName\"),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.percent,\r\n        ...count.qty,\r\n        ...count.raiting,\r\n        ...dftotal.usd,\r\n        ...mnn.percent,\r\n        ...mnn.qty,\r\n        ...mnn.tops,\r\n        ...drugs.percent,\r\n        ...drugs.qty,\r\n        ...drugs.tops,\r\n        ...df.percent,\r\n        ...df.qty,\r\n        ...df.tops,\r\n        ...dist.percent,\r\n        ...dist.qty,\r\n        ...dist.tops,\r\n        ...manufacturers.percent,\r\n        ...manufacturers.qty,\r\n        ...manufacturers.tops,\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = trademark.map(item => ({value: item._id, label: item.name_uz}))\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TrademarkAnalyze;","F:\\farmaFinal\\farma\\src\\pages\\analyze\\mnnAnalyze\\index.js",["654","655","656","657","658","659","660","661","662","663","664","665","666","667","668"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { MNNApi } from '../../../services/analyzeMnn';\r\nimport {mnnApi} from \"../../../services/mnnService\";\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj, differencePeriod} from '../../../utils';\r\n\r\nfunction MnnAnalyze (props) {\r\n    \r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"analyzes.mnn\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = (props.allInfo)?1:5;\r\n    const [mnn, setMnn] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState(props.allInfo?[...props.dateAll]:[{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [drugs, setDrugs] = useState({qty:[], percent:[], tops:[]});\r\n    const [companies, setCompanies] = useState({qty:[], percent:[], tops:[]});\r\n    const [df, setDF] = useState({qty:[], percent:[], tops:[]});\r\n    const [dist, setDist] = useState({qty:[], percent:[], tops:[]});\r\n    const [tradeMarks, setTradeMarks] = useState({qty:[], percent:[], tops:[]});\r\n    const [manufacturers, setManufacturers] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData = [];\r\n    async function getActiveList(obj){\r\n        const res = await MNNApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.dataID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n\r\n        const start = new Date();\r\n        getActiveList(Datas).then(data => {\r\n            data.map((elem) => {\r\n                DATA.push(elem);\r\n            })\r\n            const middle = new Date();\r\n            setResult(add(DATA));\r\n            setLoading(false);\r\n            const end = new Date();\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        } else {\r\n            getSelectData()\r\n        }\r\n    },[])\r\n    const getSelectData=()=>{\r\n        mnnApi.getList().then(resp =>{\r\n            setMnn(resp.data.data);\r\n            setLoadingSelect(false);\r\n        });\r\n    }\r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]}\r\n        const COUNT = {qty:[], percent:[], raiting:[]}\r\n        const DRUGS = {qty:[], percent:[], tops:[]};\r\n        const COMPANIES = {qty:[], percent:[], tops:[]};\r\n        const DF = {qty:[], percent:[], tops:[]};\r\n        const DIST = {qty:[], percent:[], tops:[]};\r\n        const TRADEMARK = {qty:[], percent:[], tops:[]};\r\n        const MANUFACTURERS = {qty:[], percent:[], tops:[]};\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    drugs:[],\r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    drugs:[],\r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                difference.qty.drugs.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.drugs[${i-1}]`, st)\r\n                )\r\n                difference.qty.companies.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.companies[${i-1}]`, st)\r\n                )\r\n                difference.qty.df.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.df[${i-1}]`, st)\r\n                )\r\n                difference.qty.dist.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.dist[${i-1}]`, st)\r\n                )\r\n                difference.qty.trademark.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.trademark[${i-1}]`, st)\r\n                )\r\n                difference.qty.manufacturer.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.manufacturer[${i-1}]`, st)\r\n                )\r\n                difference.part.drugs.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.drugs[${i-1}]`, st)\r\n                )\r\n                difference.part.companies.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.companies[${i-1}]`, st)\r\n                )\r\n                difference.part.df.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.df[${i-1}]`, st)\r\n                )\r\n                difference.part.dist.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.dist[${i-1}]`, st)\r\n                )\r\n                difference.part.trademark.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.trademark[${i-1}]`, st)\r\n                )\r\n                difference.part.manufacturer.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.manufacturer[${i-1}]`, st)\r\n                )\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>{\r\n                    if(props.value){\r\n                        return NumberToStr(Number(props.value).toFixed(2))\r\n                    } else {\r\n                        return '0.00'\r\n                    }\r\n                }\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '',true),'HeaderVal':{per:i+1}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n                    \r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %'),'HeaderVal':{per:i+1}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, ''),'HeaderVal':{per:i+1}})\r\n            \r\n            DRUGS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDrugs[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.med\"),per:i+1, group:true}},...difference.part.drugs);\r\n            DRUGS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDrugs[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.drugs);\r\n            DRUGS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDrug\") : TranslateExp(lang, \"table.topDrugs\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDrugs[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            COMPANIES.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentCompanies[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.comp\"),per:i+1, group:true}},...difference.part.companies);\r\n            COMPANIES.qty.push({...MakeObj(`${TranslateExp(lang, \"home.qtyComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyCompanies[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.companies);\r\n            COMPANIES.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidComp\") : TranslateExp(lang, \"table.topComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsCompanies[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            DF.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDF[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.df\"),per:i+1, group:true}},...difference.part.df);\r\n            DF.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDF[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.df); \r\n            DF.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDf\") : TranslateExp(lang, \"table.topDf\")}  ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDF[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            DIST.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDist[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.dist\"),per:i+1, group:true}},...difference.part.dist);\r\n            DIST.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDist[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.dist);  \r\n            DIST.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDist\") : TranslateExp(lang, \"table.topDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDist[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            TRADEMARK.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTradeMarks[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.td\"),per:i+1, group:true}},...difference.part.trademark);\r\n            TRADEMARK.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyTradeMarks[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.trademark); \r\n            TRADEMARK.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidTd\") : TranslateExp(lang, \"table.topTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsTradeMarks[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            MANUFACTURERS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentManufacturers[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mf\"),per:i+1, group:true}},...difference.part.manufacturer);\r\n            MANUFACTURERS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyManufacturers[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.manufacturer);  \r\n            MANUFACTURERS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMf\") : TranslateExp(lang, \"table.topMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsManufacturers[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setDrugs({qty:DRUGS.qty, percent: DRUGS.percent, tops:DRUGS.tops});\r\n        setCompanies({qty:COMPANIES.qty, percent: COMPANIES.percent, tops:COMPANIES.tops});\r\n        setDF({qty:DF.qty, percent: DF.percent, tops:DF.tops});\r\n        setDist({qty:DIST.qty, percent: DIST.percent, tops:DIST.tops});\r\n        setTradeMarks({qty:TRADEMARK.qty, percent: TRADEMARK.percent, tops:TRADEMARK.tops});\r\n        setManufacturers({qty:MANUFACTURERS.qty, percent: MANUFACTURERS.percent, tops:MANUFACTURERS.tops});\r\n        \r\n    },[price, date, lang])\r\n   \r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, element.totalDrugNames.length],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n    \r\n                                'qtyCompanies':[ ...TempDATA.qtyCompanies, element.totalDrugNames.length],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                                'qtyDF':[ ...TempDATA.qtyDF, element.filterByDrugForms.length],\r\n                                'percentDF':[ ...TempDATA.percentDF, TCPP.usd/element.filterByDrugForms.length],\r\n                                'topsDF':[ ...TempDATA.topsDF, CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, element.filterByDistributors.length],\r\n                                'percentDist':[ ...TempDATA.percentDist, TCPP.usd/element.filterByDistributors.length],\r\n                                'topsDist':[ ...TempDATA.topsDist, CalculateTops(element.filterByDistributors, TCPP.usd, countTops)],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, element.filterByTrademarks.length],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, TCPP.usd/element.filterByTrademarks.length],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, element.filterByManufacturers.length],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, TCPP.usd/element.filterByManufacturers.length],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, 0],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, 0],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, ''],\r\n\r\n                                'qtyCompanies':[ ...TempDATA.qtyCompanies, 0],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, 0],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, ''],\r\n\r\n                                'qtyDF':[ ...TempDATA.qtyDF, 0],\r\n                                'percentDF':[ ...TempDATA.percentDF, 0],\r\n                                'topsDF':[ ...TempDATA.topsDF, ''],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, 0],\r\n                                'percentDist':[ ...TempDATA.percentDist, 0],\r\n                                'topsDist':[ ...TempDATA.topsDist, ''],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, 0],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, 0],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, ''],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, 0],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, 0],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, ''],\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyDrugs':[element.totalDrugNames.length],\r\n                            'percentDrugs':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsDrugs':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'qtyCompanies':[element.totalDrugNames.length],\r\n                            'percentCompanies':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsCompanies':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'qtyDF':[element.filterByDrugForms.length],\r\n                            'percentDF':[TCPP.usd/element.filterByDrugForms.length],\r\n                            'topsDF':[CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n\r\n                            'qtyDist':[element.filterByDistributors.length],\r\n                            'percentDist':[TCPP.usd/element.filterByDistributors.length],\r\n                            'topsDist':[CalculateTops(element.filterByDistributors, TCPP.usd, countTops)],\r\n\r\n                            'qtyTradeMarks':[element.filterByTrademarks.length],\r\n                            'percentTradeMarks':[TCPP.usd/element.filterByTrademarks.length],\r\n                            'topsTradeMarks':[CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n\r\n                            'qtyManufacturers':[element.filterByManufacturers.length],\r\n                            'percentManufacturers':[TCPP.usd/element.filterByManufacturers.length],\r\n                            'topsManufacturers':[CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyDrugs':[0],\r\n                            'percentDrugs':[0],\r\n                            'topsDrugs':[''],\r\n\r\n                            'qtyCompanies':[0],\r\n                            'percentCompanies':[0],\r\n                            'topsCompanies':[''],\r\n\r\n                            'qtyDF':[0],\r\n                            'percentDF':[0],\r\n                            'topsDF':[''],\r\n\r\n                            'qtyDist':[0],\r\n                            'percentDist':[0],\r\n                            'topsDist':[''],\r\n\r\n                            'qtyTradeMarks':[0],\r\n                            'percentTradeMarks':[0],\r\n                            'topsTradeMarks':[''],\r\n\r\n                            'qtyManufacturers':[0],\r\n                            'percentManufacturers':[0],\r\n                            'topsManufacturers':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    drugs:[],\r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    drugs:[],\r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.qty.drugs.push(element.qtyDrugs[i] - element.qtyDrugs[i-1]);\r\n                    difference.qty.companies.push(element.qtyCompanies[i] - element.qtyCompanies[i-1]);\r\n                    difference.qty.df.push(element.qtyDF[i] - element.qtyDF[i-1]);\r\n                    difference.qty.dist.push(element.qtyDist[i] - element.qtyDist[i-1]);\r\n                    difference.qty.trademark.push(element.qtyTradeMarks[i] - element.qtyTradeMarks[i-1]);\r\n                    difference.qty.manufacturer.push(element.qtyManufacturers[i] - element.qtyManufacturers[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.drugs.push(element.percentDrugs[i]-element.percentDrugs[i-1]);\r\n                    difference.part.companies.push(element.percentCompanies[i]-element.percentCompanies[i-1]);\r\n                    difference.part.df.push(element.percentDF[i]-element.percentDF[i-1]);\r\n                    difference.part.dist.push(element.percentDist[i]-element.percentDist[i-1]);\r\n                    difference.part.trademark.push(element.percentTradeMarks[i]-element.percentTradeMarks[i-1]);\r\n                    difference.part.manufacturer.push(element.percentManufacturers[i]-element.percentManufacturers[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang, \"products.mnn\"),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.qty,\r\n        ...count.percent,\r\n        ...count.raiting,\r\n        ...drugs.percent,\r\n        ...drugs.qty,\r\n        ...drugs.tops,\r\n        ...companies.percent,\r\n        ...companies.qty,\r\n        ...companies.tops,\r\n        ...df.percent,\r\n        ...df.qty,\r\n        ...df.tops,\r\n        ...dist.percent,\r\n        ...dist.qty,\r\n        ...dist.tops,\r\n        ...tradeMarks.percent,\r\n        ...tradeMarks.qty,\r\n        ...tradeMarks.tops,\r\n        ...manufacturers.percent,\r\n        ...manufacturers.qty,\r\n        ...manufacturers.tops,\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = mnn.map(item => ({value: item._id, label: item.name_uz}))\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                loadingSelect={loadingSelect} \r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n          \r\n        </>\r\n    );\r\n}\r\n\r\nexport default MnnAnalyze;","F:\\farmaFinal\\farma\\src\\pages\\analyze\\distAnalyze\\index.js",["669","670","671","672","673","674","675","676","677","678","679","680"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { distributorsApi } from '../../../services/analyzeDist';\r\nimport {distApi} from \"../../../services/distService\";\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj} from '../../../utils';\r\n\r\nfunction DistributorAnalyze (props) {\r\n    \r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"analyzes.dist\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = (props.allInfo)?1:5;\r\n    const [dist, setDist] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState(props.allInfo?[...props.dateAll]:[{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [mnn, setMnn] = useState({qty:[], percent:[], tops:[]});\r\n    const [companies, setCompanies] = useState({qty:[], percent:[], tops:[]});\r\n    const [drugs, setDrugs] = useState({qty:[], percent:[], tops:[]});\r\n    const [df, setDF] = useState({qty:[], percent:[], tops:[]});\r\n    const [tradeMarks, setTradeMarks] = useState({qty:[], percent:[], tops:[]});\r\n    const [manufacturers, setManufacturers] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData = [];\r\n    async function getActiveList(obj){\r\n        const res = await distributorsApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.dataID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n\r\n        getActiveList(Datas).then(data => {\r\n                data.map((elem) => {\r\n                    DATA.push(elem);\r\n                })\r\n                setResult(add(DATA));\r\n                setLoading(false)\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        } else {\r\n            getSelectData()\r\n        }\r\n    },[])\r\n    const getSelectData=()=>{\r\n        distApi.getList()\r\n        .then(resp => {\r\n            setDist(resp.data.data)\r\n            setLoadingSelect(false);\r\n        }\r\n        );\r\n    }\r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]}\r\n        const COUNT = {qty:[], percent:[], raiting:[]}\r\n        const MNN = {qty:[], percent:[], tops:[]};\r\n        const DRUGS = {qty:[], percent:[], tops:[]};\r\n        const COMPANIES = {qty:[], percent:[], tops:[]};\r\n        const DF = {qty:[], percent:[], tops:[]};\r\n        const TRADEMARK = {qty:[], percent:[], tops:[]};\r\n        const MANUFACTURERS = {qty:[], percent:[], tops:[]};\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    companies:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    companies:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                difference.qty.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.mnn[${i-1}]`, st))\r\n                difference.qty.companies.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.companies[${i-1}]`, st))\r\n                difference.qty.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.drugs[${i-1}]`, st))\r\n                difference.qty.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.df[${i-1}]`, st))\r\n                difference.qty.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.trademark[${i-1}]`, st))\r\n                difference.qty.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.manufacturer[${i-1}]`, st))\r\n                difference.part.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.mnn[${i-1}]`, st))\r\n                difference.part.companies.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.companies[${i-1}]`, st))\r\n                difference.part.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.drugs[${i-1}]`, st))\r\n                difference.part.df.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.df[${i-1}]`, st))\r\n                difference.part.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.trademark[${i-1}]`, st))\r\n                difference.part.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.manufacturer[${i-1}]`, st))\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per: i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>NumberToStr(Number(props.value).toFixed(2))\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %',true), HeaderVal:{per:i+1}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '',true),HeaderVal:{per:i+1}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per: i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n                    \r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, '',true),'HeaderVal':{per:i+1}})\r\n            \r\n            MNN.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentINN[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mnn\"), per:i+1, group:'mnn'}},...difference.part.mnn);\r\n            MNN.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyINN[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:'mnn'}},...difference.qty.mnn);\r\n            MNN.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMnn\") : TranslateExp(lang, \"table.topMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsINN[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:'mnn'}});\r\n            \r\n            DRUGS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDrugs[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.med\"),per:i+1, group:'drugs'}},...difference.part.drugs);\r\n            DRUGS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDrugs[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:'drugs'}},...difference.qty.drugs);\r\n            DRUGS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDrug\") : TranslateExp(lang, \"table.topDrugs\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDrugs[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:'drugs'}});\r\n\r\n            COMPANIES.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentCompanies[${i}]`, 0, ''),'HeaderVal':{group:'companies', text:TranslateExp(lang, \"products.comp\"), per:i+1}},...difference.part.companies);\r\n            COMPANIES.qty.push({...MakeObj(`${TranslateExp(lang, \"home.qtyComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyCompanies[${i}]`, 0, ''),'HeaderVal':{group:'companies', per:i+1}},...difference.qty.companies);\r\n            COMPANIES.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidComp\") : TranslateExp(lang, \"table.topComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsCompanies[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{group:'companies', per:i+1}});\r\n\r\n            DF.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDF[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.df\"),per:i+1, group:'df'}},...difference.part.df);\r\n            DF.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDF[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:'df'}},...difference.qty.df); \r\n            DF.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDf\") : TranslateExp(lang, \"table.topDf\")}  ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDF[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:'df'}});\r\n\r\n            TRADEMARK.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTradeMarks[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.td\"),per:i+1, group:'trademark'}},...difference.part.trademark);\r\n            TRADEMARK.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyTradeMarks[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:'trademark'}},...difference.qty.trademark); \r\n            TRADEMARK.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidTd\") : TranslateExp(lang, \"table.topTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsTradeMarks[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:'trademark'}});\r\n\r\n            MANUFACTURERS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentManufacturers[${i}]`, 2, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mf\"),per:i+1, group:'manufacturer'}},...difference.part.manufacturer);\r\n            MANUFACTURERS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyManufacturers[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:'manufacturer'}},...difference.qty.manufacturer);  \r\n            MANUFACTURERS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMf\") : TranslateExp(lang, \"table.topMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsManufacturers[${i}]`, 'manufacturer'),'HeaderVal':{per:i+1, group:'manufacturer'}});\r\n\r\n            \r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setMnn({qty:MNN.qty, percent: MNN.percent, tops:MNN.tops});\r\n        setCompanies({qty:COMPANIES.qty, percent: COMPANIES.percent, tops:COMPANIES.tops});\r\n        setDrugs({qty:DRUGS.qty, percent: DRUGS.percent, tops:DRUGS.tops});\r\n        setDF({qty:DF.qty, percent: DF.percent, tops:DF.tops});\r\n        setTradeMarks({qty:TRADEMARK.qty, percent: TRADEMARK.percent, tops:TRADEMARK.tops});\r\n        setManufacturers({qty:MANUFACTURERS.qty, percent: MANUFACTURERS.percent, tops:MANUFACTURERS.tops});\r\n        \r\n    },[price, date, lang])\r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n                \r\n\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, element.totalDrugInn.length],\r\n                                'percentINN':[ ...TempDATA.percentINN, TCPP.usd/element.totalDrugInn.length],\r\n                                'topsINN':[ ...TempDATA.topsINN, CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n\r\n                                'qtyCompanies' :[ ...TempDATA.qtyCompanies, element.filterByCompanies.length],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, TCPP.usd/element.filterByCompanies.length],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, CalculateTops(element.filterByCompanies, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, element.totalDrugNames.length],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDF':[ ...TempDATA.qtyDF, element.totalDrugForms.length],\r\n                                'percentDF':[ ...TempDATA.percentDF, TCPP.usd/element.totalDrugForms.length],\r\n                                'topsDF':[ ...TempDATA.topsDF, CalculateTops(element.totalDrugForms, TCPP.usd, countTops)],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, element.totalTrademarks_.length],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, TCPP.usd/element.totalTrademarks_.length],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, CalculateTops(element.totalTrademarks_, TCPP.usd, countTops)],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, element.filterByManufacturers.length],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, TCPP.usd/element.filterByManufacturers.length],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, 0],\r\n                                'percentINN':[ ...TempDATA.percentINN, 0],\r\n                                'topsINN':[ ...TempDATA.topsINN, ''],\r\n\r\n                                'qtyCompanies' :[ ...TempDATA.qtyCompanies, 0],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, 0],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, ''],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, 0],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, 0],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, ''],\r\n    \r\n                                'qtyDF':[ ...TempDATA.qtyDF, 0],\r\n                                'percentDF':[ ...TempDATA.percentDF, 0],\r\n                                'topsDF':[ ...TempDATA.topsDF, ''],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, 0],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, 0],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, ''],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, 0],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, 0],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, ''],\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyINN' :[element.totalDrugInn.length],\r\n                            'percentINN':[TCPP.usd/element.totalDrugInn.length],\r\n                            'topsINN':[CalculateTops(element.totalDrugInn, TCPP.usd, countTops)],\r\n\r\n                            'qtyCompanies' :[element.filterByCompanies.length],\r\n                            'percentCompanies':[TCPP.usd/element.filterByCompanies.length],\r\n                            'topsCompanies':[CalculateTops(element.filterByCompanies, TCPP.usd, countTops)],\r\n\r\n                            'qtyDrugs':[element.totalDrugNames.length],\r\n                            'percentDrugs':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsDrugs':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'qtyDF':[element.totalDrugForms.length],\r\n                            'percentDF':[TCPP.usd/element.totalDrugForms.length],\r\n                            'topsDF':[CalculateTops(element.totalDrugForms, TCPP.usd, countTops)],\r\n\r\n                            'qtyTradeMarks':[element.totalTrademarks_.length],\r\n                            'percentTradeMarks':[TCPP.usd/element.totalTrademarks_.length],\r\n                            'topsTradeMarks':[CalculateTops(element.totalTrademarks_, TCPP.usd, countTops)],\r\n\r\n                            'qtyManufacturers':[element.filterByManufacturers.length],\r\n                            'percentManufacturers':[TCPP.usd/element.filterByManufacturers.length],\r\n                            'topsManufacturers':[CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyINN' :[0],\r\n                            'percentINN':[0],\r\n                            'topsINN':[''],\r\n\r\n                            'qtyCompanies' :[0],\r\n                            'percentCompanies':[0],\r\n                            'topsCompanies':[''],\r\n\r\n                            'qtyDrugs':[0],\r\n                            'percentDrugs':[0],\r\n                            'topsDrugs':[''],\r\n\r\n                            'qtyDF':[0],\r\n                            'percentDF':[0],\r\n                            'topsDF':[''],\r\n\r\n                            'qtyTradeMarks':[0],\r\n                            'percentTradeMarks':[0],\r\n                            'topsTradeMarks':[''],\r\n\r\n                            'qtyManufacturers':[0],\r\n                            'percentManufacturers':[0],\r\n                            'topsManufacturers':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    companies:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    companies:[],\r\n                    drugs:[],\r\n                    df:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.qty.mnn.push(element.qtyINN[i] - element.qtyINN[i-1]);\r\n                    difference.qty.companies.push(element.qtyCompanies[i] - element.qtyCompanies[i-1]);\r\n                    difference.qty.drugs.push(element.qtyDrugs[i] - element.qtyDrugs[i-1]);\r\n                    difference.qty.df.push(element.qtyDF[i] - element.qtyDF[i-1]);\r\n                    difference.qty.trademark.push(element.qtyTradeMarks[i] - element.qtyTradeMarks[i-1]);\r\n                    difference.qty.manufacturer.push(element.qtyManufacturers[i] - element.qtyManufacturers[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.mnn.push(element.percentINN[i]-element.percentINN[i-1]);\r\n                    difference.part.companies.push(element.percentCompanies[i]-element.percentCompanies[i-1]);\r\n                    difference.part.drugs.push(element.percentDrugs[i]-element.percentDrugs[i-1]);\r\n                    difference.part.df.push(element.percentDF[i]-element.percentDF[i-1]);\r\n                    difference.part.trademark.push(element.percentTradeMarks[i]-element.percentTradeMarks[i-1]);\r\n                    difference.part.manufacturer.push(element.percentManufacturers[i]-element.percentManufacturers[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang,'table.name'),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.percent,\r\n        ...count.qty,\r\n        ...count.raiting,\r\n        ...mnn.percent,\r\n        ...mnn.qty,\r\n        ...mnn.tops,\r\n        ...companies.percent,\r\n        ...companies.qty,\r\n        ...companies.tops,\r\n        ...drugs.percent,\r\n        ...drugs.qty,\r\n        ...drugs.tops,\r\n        ...df.percent,\r\n        ...df.qty,\r\n        ...df.tops,\r\n        ...tradeMarks.percent,\r\n        ...tradeMarks.qty,\r\n        ...tradeMarks.tops,\r\n        ...manufacturers.percent,\r\n        ...manufacturers.qty,\r\n        ...manufacturers.tops,\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = dist.map(item => ({value: item._id, label: item.name_uz}));\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                selected={selected}\r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                loadingSelect={loadingSelect} \r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DistributorAnalyze;","F:\\farmaFinal\\farma\\src\\pages\\analyze\\dfAnalyze\\index.js",["681","682","683","684","685","686","687","688","689","690","691","692"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport { drugFormApi } from '../../../services/analyzeDF';\r\nimport {dfApi} from \"../../../services/drugsService\";\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj} from '../../../utils';\r\n\r\nfunction DrugFormsAnalyze (props) {\r\n    \r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"analyzes.df\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = (props.allInfo)?1:5;\r\n    const [df, setDf] = useState([]);\r\n    const [show, setShow] = useState(true);\r\n    const [selected, setSelected] = useState([]);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState(props.allInfo?[...props.dateAll]:[{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [mnn, setMnn] = useState({qty:[], percent:[], tops:[]});\r\n    const [drugs, setDrugs] = useState({qty:[], percent:[], tops:[]});\r\n    const [dist, setDist] = useState({qty:[], percent:[], tops:[]});\r\n    const [tradeMarks, setTradeMarks] = useState({qty:[], percent:[], tops:[]});\r\n    const [manufacturers, setManufacturers] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData = [];\r\n    async function getActiveList(obj){\r\n        const res = await drugFormApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        selected?.map(key =>{\r\n            Datas.dataID.push(key.value);\r\n        })\r\n        Datas.filterDate.push(...date);\r\n       \r\n \r\n        getActiveList(Datas).then(data => {\r\n                data.map((elem) => {\r\n                    DATA.push(elem);\r\n                })\r\n                console.log(DATA);\r\n                setResult(add(DATA));\r\n                setLoading(false);\r\n            })\r\n        \r\n\r\n    }\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        } else {\r\n            getSelectData()\r\n        }\r\n    },[])\r\n    const getSelectData=()=>{\r\n        dfApi.getList()\r\n        .then(resp => {\r\n            setDf(resp.data.data)\r\n            setLoadingSelect(false);\r\n        }\r\n        );\r\n    }\r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]}\r\n        const COUNT = {qty:[], percent:[], raiting:[]}\r\n        const MNN = {qty:[], percent:[], tops:[]};\r\n        const DRUGS = {qty:[], percent:[], tops:[]};\r\n        const DIST = {qty:[], percent:[], tops:[]};\r\n        const TRADEMARK = {qty:[], percent:[], tops:[]};\r\n        const MANUFACTURERS = {qty:[], percent:[], tops:[]};\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                difference.qty.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.mnn[${i-1}]`, st))\r\n                difference.qty.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.drugs[${i-1}]`, st))\r\n                difference.qty.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.dist[${i-1}]`, st))\r\n                difference.qty.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.trademark[${i-1}]`, st))\r\n                difference.qty.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.manufacturer[${i-1}]`, st))\r\n                difference.part.mnn.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.mnn[${i-1}]`, st))\r\n                difference.part.drugs.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.drugs[${i-1}]`, st))\r\n                difference.part.dist.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.dist[${i-1}]`, st))\r\n                difference.part.trademark.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.trademark[${i-1}]`, st))\r\n                difference.part.manufacturer.push(MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.manufacturer[${i-1}]`, st))\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>NumberToStr(Number(props.value).toFixed(2))\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %', true),HeaderVal:{per:i+1}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '', true),HeaderVal:{per:i+1}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n                    \r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %',true),HeaderVal:{per:i+1}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, '',true),HeaderVal:{per:i+1}})\r\n            \r\n            MNN.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentINN[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'mnn', text:TranslateExp(lang, \"products.mnn\")}},...difference.part.mnn);\r\n            MNN.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyINN[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'mnn'}},...difference.qty.mnn);\r\n            MNN.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMnn\") : TranslateExp(lang, \"table.topMnn\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsINN[${i}]`,TranslateExp(lang, \"content.noData\")),HeaderVal:{per:i+1,group:'mnn'}});\r\n            \r\n            DRUGS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDrugs[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'drugs',text:TranslateExp(lang, \"products.med\")}},...difference.part.drugs);\r\n            DRUGS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDrug\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDrugs[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'drugs'}},...difference.qty.drugs);\r\n            DRUGS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDrug\") : TranslateExp(lang, \"table.topDrugs\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDrugs[${i}]`,TranslateExp(lang, \"content.noData\")),HeaderVal:{per:i+1,group:'drugs'}});\r\n\r\n            DIST.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDist[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'dist',text:TranslateExp(lang, \"products.dist\")}},...difference.part.dist);\r\n            DIST.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDist[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'dist'}},...difference.qty.dist);  \r\n            DIST.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDist\") : TranslateExp(lang, \"table.topDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDist[${i}]`,TranslateExp(lang, \"content.noData\")),HeaderVal:{per:i+1,group:'dist'}});\r\n\r\n            TRADEMARK.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTradeMarks[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'trademark',text:TranslateExp(lang, \"products.td\")}},...difference.part.trademark);\r\n            TRADEMARK.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyTradeMarks[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'trademark'}},...difference.qty.trademark); \r\n            TRADEMARK.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidTd\") : TranslateExp(lang, \"table.topTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsTradeMarks[${i}]`,TranslateExp(lang, \"content.noData\")),HeaderVal:{per:i+1,group:'trademark'}});\r\n\r\n            MANUFACTURERS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentManufacturers[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'manufacturer',text:TranslateExp(lang, \"products.mf\")}},...difference.part.manufacturer);\r\n            MANUFACTURERS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyManufacturers[${i}]`, 0, ''),HeaderVal:{per:i+1,group:'manufacturer'}},...difference.qty.manufacturer);  \r\n            MANUFACTURERS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMf\") : TranslateExp(lang, \"table.topMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsManufacturers[${i}]`, TranslateExp(lang, \"content.noData\")),HeaderVal:{per:i+1,group:'manufacturer'}});\r\n\r\n            \r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setMnn({qty:MNN.qty, percent: MNN.percent, tops:MNN.tops});\r\n        setDrugs({qty:DRUGS.qty, percent: DRUGS.percent, tops:DRUGS.tops});\r\n        setDist({qty:DIST.qty, percent: DIST.percent, tops:DIST.tops});\r\n        setTradeMarks({qty:TRADEMARK.qty, percent: TRADEMARK.percent, tops:TRADEMARK.tops});\r\n        setManufacturers({qty:MANUFACTURERS.qty, percent: MANUFACTURERS.percent, tops:MANUFACTURERS.tops});\r\n        \r\n    },[price, date, lang])\r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd, countTops)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, element.filterByDrugInn.length],\r\n                                'percentINN':[ ...TempDATA.percentINN, TCPP.usd/element.filterByDrugInn.length],\r\n                                'topsINN':[ ...TempDATA.topsINN, CalculateTops(element.filterByDrugInn, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, element.totalDrugNames.length],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, TCPP.usd/element.totalDrugNames.length],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, element.filterByDistributors.length],\r\n                                'percentDist':[ ...TempDATA.percentDist, TCPP.usd/element.filterByDistributors.length],\r\n                                'topsDist':[ ...TempDATA.topsDist, CalculateTops(element.filterByDistributors, TCPP.usd, countTops)],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, element.filterByTrademarks.length],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, TCPP.usd/element.filterByTrademarks.length],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, CalculateTops(element.filterByTrademarks, TCPP.usd, countTops)],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, element.filterByManufacturers.length],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, TCPP.usd/element.filterByManufacturers.length],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyINN' :[ ...TempDATA.qtyINN, 0],\r\n                                'percentINN':[ ...TempDATA.percentINN, 0],\r\n                                'topsINN':[ ...TempDATA.topsINN, ''],\r\n    \r\n                                'qtyDrugs':[ ...TempDATA.qtyDrugs, 0],\r\n                                'percentDrugs':[ ...TempDATA.percentDrugs, 0],\r\n                                'topsDrugs':[ ...TempDATA.topsDrugs, ''],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, 0],\r\n                                'percentDist':[ ...TempDATA.percentDist, 0],\r\n                                'topsDist':[ ...TempDATA.topsDist, ''],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, 0],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, 0],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, ''],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, 0],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, 0],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, ''],\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd, countTops)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyINN' :[element.filterByDrugInn.length],\r\n                            'percentINN':[TCPP.usd/element.filterByDrugInn.length],\r\n                            'topsINN':[CalculateTops(element.filterByDrugInn, TCPP.usd, countTops)],\r\n\r\n                            'qtyDrugs':[element.totalDrugNames.length],\r\n                            'percentDrugs':[TCPP.usd/element.totalDrugNames.length],\r\n                            'topsDrugs':[CalculateTops(element.totalDrugNames, TCPP.usd, countTops)],\r\n\r\n                            'qtyDist':[element.filterByDistributors.length],\r\n                            'percentDist':[TCPP.usd/element.filterByDistributors.length],\r\n                            'topsDist':[CalculateTops(element.filterByDistributors, TCPP.usd, countTops)],\r\n\r\n                            'qtyTradeMarks':[element.filterByTrademarks.length],\r\n                            'percentTradeMarks':[TCPP.usd/element.filterByTrademarks.length],\r\n                            'topsTradeMarks':[CalculateTops(element.filterByTrademarks, TCPP.usd, countTops)],\r\n\r\n                            'qtyManufacturers':[element.filterByManufacturers.length],\r\n                            'percentManufacturers':[TCPP.usd/element.filterByManufacturers.length],\r\n                            'topsManufacturers':[CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyINN' :[0],\r\n                            'percentINN':[0],\r\n                            'topsINN':[''],\r\n\r\n                            'qtyDrugs':[0],\r\n                            'percentDrugs':[0],\r\n                            'topsDrugs':[''],\r\n\r\n                            'qtyDist':[0],\r\n                            'percentDist':[0],\r\n                            'topsDist':[''],\r\n\r\n                            'qtyTradeMarks':[0],\r\n                            'percentTradeMarks':[0],\r\n                            'topsTradeMarks':[''],\r\n\r\n                            'qtyManufacturers':[0],\r\n                            'percentManufacturers':[0],\r\n                            'topsManufacturers':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    mnn:[],\r\n                    drugs:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    mnn:[],\r\n                    drugs:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.qty.mnn.push(element.qtyINN[i] - element.qtyINN[i-1]);\r\n                    difference.qty.drugs.push(element.qtyDrugs[i] - element.qtyDrugs[i-1]);\r\n                    difference.qty.dist.push(element.qtyDist[i] - element.qtyDist[i-1]);\r\n                    difference.qty.trademark.push(element.qtyTradeMarks[i] - element.qtyTradeMarks[i-1]);\r\n                    difference.qty.manufacturer.push(element.qtyManufacturers[i] - element.qtyManufacturers[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.mnn.push(element.percentINN[i]-element.percentINN[i-1]);\r\n                    difference.part.drugs.push(element.percentDrugs[i]-element.percentDrugs[i-1]);\r\n                    difference.part.dist.push(element.percentDist[i]-element.percentDist[i-1]);\r\n                    difference.part.trademark.push(element.percentTradeMarks[i]-element.percentTradeMarks[i-1]);\r\n                    difference.part.manufacturer.push(element.percentManufacturers[i]-element.percentManufacturers[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang, \"table.df\"),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.qty,\r\n        ...count.percent,\r\n        ...count.raiting,\r\n        ...mnn.percent,\r\n        ...mnn.qty,\r\n        ...mnn.tops,\r\n        ...drugs.percent,\r\n        ...drugs.qty,\r\n        ...drugs.tops,\r\n        ...dist.percent,\r\n        ...dist.qty,\r\n        ...dist.tops,\r\n        ...tradeMarks.percent,\r\n        ...tradeMarks.qty,\r\n        ...tradeMarks.tops,\r\n        ...manufacturers.percent,\r\n        ...manufacturers.qty,\r\n        ...manufacturers.tops,\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n            setSelected([])\r\n            selectData=[];\r\n        }\r\n    }\r\n    selectData = df.map(item => ({value: item._id, label: item.name_uz}));\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                loadingSelect={loadingSelect} \r\n                first={first} \r\n                first={first}\r\n                showTable={show} \r\n                name={true} \r\n                selected={selected}\r\n                setSelected={setSelected}\r\n                handleSubmit={handleSubmit} \r\n                optionSelectedData={selectData} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DrugFormsAnalyze;","F:\\farmaFinal\\farma\\src\\components\\modalDeleteCrud\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\modalStatus\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\toasts\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\crudTable\\index.js",["693"],"F:\\farmaFinal\\farma\\src\\components\\modalSoftDelete\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\analyze\\namesAllAnalyze\\index.js",["694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709"],"import React, { useState, useEffect} from 'react';\r\nimport Select from '../../../components/reactSelect';\r\nimport st from '../../../components/dataTable/dataTable.module.scss';\r\nimport DataTable from '../../../components/dataTable';\r\nimport {allAnalyzeApi} from \"../../../services/allInfoService\";\r\n\r\nimport {NumberToStr, CalculateTops, CalculatePercent, GetTops, GetDiffferens, MakeDifferenceObj, MakeObj, differencePeriod} from '../../../utils';\r\n\r\nfunction AllInfoAnalyze (props) {\r\n    \r\n    const {lang, TranslateExp} = props; \r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingSelect, setLoadingSelect] = useState(true);\r\n    const [first, setFirst] = useState(true);\r\n    const menu = TranslateExp(lang,\"sidebar.Analyzes\");\r\n    const title = TranslateExp(lang,\"sidebar.AllInfo\");\r\n    const [price, setPrice] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label: \"сум\"}];\r\n    const countTops = 1;\r\n    const [show, setShow] = useState(true);\r\n    const [result, setResult] = useState([])\r\n    const [allTotalPrice, setAllTotalPrice] = useState([]);\r\n    const [date,setDate] = useState(props.allInfo?[...props.dateAll]:[{started:'', ended:''}]);\r\n    const [totalPrice, setTotalPrice] = useState({usd:[], percent:[], raiting:[]});\r\n    const [count, setCount] = useState({qty:[], percent:[], raiting:[]});\r\n    const [companies, setCompanies] = useState({qty:[], percent:[], tops:[]});\r\n    const [df, setDF] = useState({qty:[], percent:[], tops:[]});\r\n    const [dist, setDist] = useState({qty:[], percent:[], tops:[]});\r\n    const [tradeMarks, setTradeMarks] = useState({qty:[], percent:[], tops:[]});\r\n    const [manufacturers, setManufacturers] = useState({qty:[], percent:[], tops:[]});\r\n    let selectData = [];\r\n    async function getActiveList(obj){\r\n        const res = await allAnalyzeApi.getActiveList(obj);\r\n        return res.data.data;\r\n    };\r\n    function handleSubmit(){\r\n        setFirst(false);\r\n        setLoading(true);\r\n        setShow(false);\r\n        const DATA = [];\r\n        const Datas = {dataID:[], filterDate: []};\r\n        Datas.filterDate.push(...date);\r\n\r\n        const start = new Date();\r\n        getActiveList(Datas).then(data => {\r\n            data.map((elem) => {\r\n                DATA.push(elem);\r\n            })\r\n            const middle = new Date();\r\n            setResult(add(DATA.slice(0, 500)));\r\n            setLoading(false);\r\n            const end = new Date();\r\n        });\r\n    }\r\n    useEffect(()=>{\r\n        if(props.allInfo){\r\n            setDate(props.dateAll)\r\n        }\r\n    },[])\r\n    useEffect(()=>{\r\n        const TOTALPRICE = {usd:[], percent:[], raiting:[]}\r\n        const COUNT = {qty:[], percent:[], raiting:[]}\r\n        const COMPANIES = {qty:[], percent:[], tops:[]};\r\n        const DF = {qty:[], percent:[], tops:[]};\r\n        const DIST = {qty:[], percent:[], tops:[]};\r\n        const TRADEMARK = {qty:[], percent:[], tops:[]};\r\n        const MANUFACTURERS = {qty:[], percent:[], tops:[]};\r\n     \r\n        date.map((key,i)=>{\r\n            const differenceTotalPrice=[];\r\n            const differencePercentageCol=[];\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            if((date.length % 2 == 0 && i % 2 == 1 ) || (date.length % 2 == 1 && i > 0) ){\r\n                differenceTotalPrice.push({\r\n                    HeaderVal:{\r\n                        role:'dAllPrice',\r\n                        id: i-1\r\n                    },\r\n                    Header: ()=>{\r\n                        return(\r\n                            <span className={st.price__th}>\r\n                                {`${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`}\r\n                                <Select \r\n                                    options={optionsPrice}\r\n                                    disabled={true}\r\n                                    value={optionsPrice.filter(f=>f.value === price)}\r\n                                    onChange={(e)=>setPrice(e.value)}\r\n                                    styles={customStyles}\r\n                                />\r\n                            </span>\r\n                        )\r\n                    },\r\n                    HeaderTitle: `${TranslateExp(lang, \"table.diffTurn\")} (${i} - ${i+1})`,\r\n                    accessor: `differenceTotalPrice[${i-1}].${price}`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n                differencePercentageCol.push({\r\n                    HeaderVal:{\r\n                        role:'dPercent',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffPerc\")} % (${i} - ${i+1})`,\r\n                    accessor: `differencePercentageCol[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st)+' %';\r\n                    }\r\n                })\r\n                difference.qty.count.push({\r\n                    HeaderVal:{\r\n                        role:'dCount',\r\n                        id: i-1\r\n                    },\r\n                    Header: `${TranslateExp(lang, \"table.diffQty\")} (${i} - ${i+1})`,\r\n                    accessor: `difference.qty.count[${i-1}]`,\r\n                    Cell:(props)=>{\r\n                        return GetDiffferens(props.value, st);\r\n                    }\r\n                })\r\n               \r\n                difference.qty.companies.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.companies[${i-1}]`, st)\r\n                )\r\n                difference.qty.df.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.df[${i-1}]`, st)\r\n                )\r\n                difference.qty.dist.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.dist[${i-1}]`, st)\r\n                )\r\n                difference.qty.trademark.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.trademark[${i-1}]`, st)\r\n                )\r\n                difference.qty.manufacturer.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.qty.manufacturer[${i-1}]`, st)\r\n                )\r\n                difference.part.companies.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.companies[${i-1}]`, st)\r\n                )\r\n                difference.part.df.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.df[${i-1}]`, st)\r\n                )\r\n                difference.part.dist.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.dist[${i-1}]`, st)\r\n                )\r\n                difference.part.trademark.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.trademark[${i-1}]`, st)\r\n                )\r\n                difference.part.manufacturer.push(\r\n                    MakeDifferenceObj(`(${i} - ${i+1})`, `difference.part.manufacturer[${i-1}]`, st)\r\n                )\r\n            }\r\n            \r\n            TOTALPRICE.usd.push(\r\n                {\r\n                Header: ()=>{\r\n                    return(\r\n                        <span className={st.price__th}>\r\n                            {`${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`}\r\n                            <Select \r\n                                options={optionsPrice}\r\n                                disabled={true}\r\n                                value={optionsPrice.filter(f=>f.value === price)}\r\n                                onChange={(e)=>setPrice(e.value)}\r\n                                styles={customStyles}\r\n                            />\r\n                        </span>\r\n                    )\r\n                },\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'price',\r\n                    id: i+1\r\n                },\r\n                HeaderTitle: `${TranslateExp(lang, \"table.turnOverCompFor\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `totalPrice[${i}].${price}`,\r\n                Cell:(props)=>{\r\n                    if(props.value){\r\n                        return NumberToStr(Number(props.value).toFixed(2))\r\n                    } else {\r\n                        return '0.00'\r\n                    }\r\n                }\r\n                    \r\n            },...differenceTotalPrice)\r\n            TOTALPRICE.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompIn\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTotalPrice[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1}})\r\n            TOTALPRICE.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raiting\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingUSD[${i}]`, 0, '',true),'HeaderVal':{per:i+1}})\r\n            COUNT.qty.push({\r\n                HeaderVal:{\r\n                    per:i+1,\r\n                    role:'count',\r\n                    id: i+1\r\n                },\r\n                Header: `${TranslateExp(lang, \"table.turnOverCompPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`,\r\n                accessor: `qty[${i}]`,\r\n                Cell:(props)=> NumberToStr(props.value)\r\n                    \r\n            },...difference.qty.count)\r\n            COUNT.percent.push({...MakeObj(`${TranslateExp(lang, \"table.percCompPac\")} % ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentQty[${i}]`, 2, ' %',true),'HeaderVal':{per:i+1}})\r\n            COUNT.raiting.push({...MakeObj(`${TranslateExp(lang, \"table.raitingPac\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `raitingQTY[${i}]`, 0, '',true),'HeaderVal':{per:i+1}})\r\n            \r\n            COMPANIES.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentCompanies[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.comp\"),per:i+1, group:true}},...difference.part.companies);\r\n            COMPANIES.qty.push({...MakeObj(`${TranslateExp(lang, \"home.qtyComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyCompanies[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.companies);\r\n            COMPANIES.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidComp\") : TranslateExp(lang, \"table.topComp\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsCompanies[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            DF.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDF[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.df\"),per:i+1, group:true}},...difference.part.df);\r\n            DF.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDF[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.df); \r\n            DF.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDf\") : TranslateExp(lang, \"table.topDf\")}  ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDF[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            DIST.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentDist[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.dist\"),per:i+1, group:true}},...difference.part.dist);\r\n            DIST.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyDist[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.dist);  \r\n            DIST.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidDist\") : TranslateExp(lang, \"table.topDist\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsDist[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            TRADEMARK.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentTradeMarks[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.td\"),per:i+1, group:true}},...difference.part.trademark);\r\n            TRADEMARK.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyTradeMarks[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.trademark); \r\n            TRADEMARK.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidTd\") : TranslateExp(lang, \"table.topTd\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsTradeMarks[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n            MANUFACTURERS.percent.push({...MakeObj(`${TranslateExp(lang, \"table.turnOverMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `percentManufacturers[${i}]`, 0, ''),'HeaderVal':{text:TranslateExp(lang, \"products.mf\"),per:i+1, group:true}},...difference.part.manufacturer);\r\n            MANUFACTURERS.qty.push({...MakeObj(`${TranslateExp(lang, \"table.qtyMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `qtyManufacturers[${i}]`, 0, ''),'HeaderVal':{per:i+1, group:true}},...difference.qty.manufacturer);  \r\n            MANUFACTURERS.tops.push({...GetTops(`${props.allInfo? TranslateExp(lang, \"table.lidMf\") : TranslateExp(lang, \"table.topMf\")} ${i+1}-${TranslateExp(lang, \"content.periodShort\")}.`, `topsManufacturers[${i}]`,TranslateExp(lang, \"content.noData\")),'HeaderVal':{per:i+1, group:true}});\r\n\r\n        })\r\n        setTotalPrice({usd: TOTALPRICE.usd, percent: TOTALPRICE.percent, raiting: TOTALPRICE.raiting})\r\n        setCount({qty:COUNT.qty, percent: COUNT.percent, raiting: COUNT.raiting})\r\n        setCompanies({qty:COMPANIES.qty, percent: COMPANIES.percent, tops:COMPANIES.tops});\r\n        setDF({qty:DF.qty, percent: DF.percent, tops:DF.tops});\r\n        setDist({qty:DIST.qty, percent: DIST.percent, tops:DIST.tops});\r\n        setTradeMarks({qty:TRADEMARK.qty, percent: TRADEMARK.percent, tops:TRADEMARK.tops});\r\n        setManufacturers({qty:MANUFACTURERS.qty, percent: MANUFACTURERS.percent, tops:MANUFACTURERS.tops});\r\n        \r\n    },[price, date, lang])\r\n   \r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n    };\r\n\r\n    const add=(respData)=>{\r\n        let LastDATA = [];\r\n\r\n        respData?.map((key, k) => {\r\n            let TempDATA = null;  \r\n\r\n            date.map((elem,i) => {\r\n                let element = key[`filterBy_${i}`];\r\n                let TCPP = element.TotalCommonPerPrice;\r\n                let TCP = element.TotalCommonPrice;\r\n                if(i > 0){\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([...allTotalPrice, {'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, CalculatePercent(TCPP.usd, TCP.usd)],\r\n                                'qty': [...TempDATA.qty, TCPP.qty],\r\n                                'percentQty': [...TempDATA.percentQty, CalculatePercent(TCPP.qty,TCP.qty)],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, element.rankByUSD+1],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, element.rankByQty+1],\r\n    \r\n                                'qtyCompanies':[ ...TempDATA.qtyCompanies, element.filterByCompanies.length],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, TCPP.usd/element.filterByCompanies.length],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, CalculateTops(element.filterByCompanies, TCPP.usd, countTops)],\r\n\r\n                                'qtyDF':[ ...TempDATA.qtyDF, element.filterByDrugForms.length],\r\n                                'percentDF':[ ...TempDATA.percentDF, TCPP.usd/element.filterByDrugForms.length],\r\n                                'topsDF':[ ...TempDATA.topsDF, CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, element.filterByDistributors.length],\r\n                                'percentDist':[ ...TempDATA.percentDist, TCPP.usd/element.filterByDistributors.length],\r\n                                'topsDist':[ ...TempDATA.topsDist, CalculateTops(element.filterByDistributors, TCPP.usd, countTops)],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, element.filterByTrademarks.length],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, TCPP.usd/element.filterByTrademarks.length],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, element.filterByManufacturers.length],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, TCPP.usd/element.filterByManufacturers.length],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        }\r\n                    } else {\r\n                        TempDATA = {\r\n                            ...TempDATA,\r\n                                'totalPrice': [...TempDATA.totalPrice, {usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                                'percentTotalPrice': [...TempDATA.percentTotalPrice, 0],\r\n                                'qty': [...TempDATA.qty, 0],\r\n                                'percentQty': [...TempDATA.percentQty, 0],\r\n                                'raitingUSD':[...TempDATA.raitingUSD, 0],\r\n                                'raitingQTY':[...TempDATA.raitingQTY, 0],\r\n    \r\n                                'qtyCompanies':[ ...TempDATA.qtyCompanies, 0],\r\n                                'percentCompanies':[ ...TempDATA.percentCompanies, 0],\r\n                                'topsCompanies':[ ...TempDATA.topsCompanies, ''],\r\n\r\n                                'qtyDF':[ ...TempDATA.qtyDF, 0],\r\n                                'percentDF':[ ...TempDATA.percentDF, 0],\r\n                                'topsDF':[ ...TempDATA.topsDF, ''],\r\n    \r\n                                'qtyDist':[ ...TempDATA.qtyDist, 0],\r\n                                'percentDist':[ ...TempDATA.percentDist, 0],\r\n                                'topsDist':[ ...TempDATA.topsDist, ''],\r\n    \r\n                                'qtyTradeMarks':[ ...TempDATA.qtyTradeMarks, 0],\r\n                                'percentTradeMarks':[ ...TempDATA.percentTradeMarks, 0],\r\n                                'topsTradeMarks':[ ...TempDATA.topsTradeMarks, ''],\r\n    \r\n                                'qtyManufacturers':[ ...TempDATA.qtyManufacturers, 0],\r\n                                'percentManufacturers':[ ...TempDATA.percentManufacturers, 0],\r\n                                'topsManufacturers':[ ...TempDATA.topsManufacturers, ''],\r\n                        }\r\n                    }\r\n                    \r\n                } else {\r\n                    if(TCP.usd){\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: TCP.usd, uzs: TCP.uzs, eur: TCP.eur, rub: TCP.rub}, 'allCount':TCP.qty}])\r\n                    } else {\r\n                        setAllTotalPrice([{'allTotalPrice':{usd: 0, uzs: 0, eur: 0, rub: 0}, 'allCount':0}])\r\n                    }\r\n                    if(TCPP.usd){\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: TCPP.usd, uzs: TCPP.uzs, eur: TCPP.eur, rub: TCPP.rub}],\r\n                            'percentTotalPrice': [CalculatePercent(TCPP.usd, TCP.usd)],\r\n                            'raitingUSD':[element.rankByUSD+1],\r\n                            'raitingQTY':[element.rankByQty+1],\r\n                            'qty': [TCPP.qty],\r\n                            'percentQty': [CalculatePercent(TCPP.qty,TCP.qty)],\r\n\r\n                            'qtyCompanies':[element.filterByCompanies.length],\r\n                            'percentCompanies':[TCPP.usd/element.filterByCompanies.length],\r\n                            'topsCompanies':[CalculateTops(element.filterByCompanies, TCPP.usd, countTops)],\r\n\r\n                            'qtyDF':[element.filterByDrugForms.length],\r\n                            'percentDF':[TCPP.usd/element.filterByDrugForms.length],\r\n                            'topsDF':[CalculateTops(element.filterByDrugForms, TCPP.usd, countTops)],\r\n\r\n                            'qtyDist':[element.filterByDistributors.length],\r\n                            'percentDist':[TCPP.usd/element.filterByDistributors.length],\r\n                            'topsDist':[CalculateTops(element.filterByDistributors, TCPP.usd, countTops)],\r\n\r\n                            'qtyTradeMarks':[element.filterByTrademarks.length],\r\n                            'percentTradeMarks':[TCPP.usd/element.filterByTrademarks.length],\r\n                            'topsTradeMarks':[CalculateTops(element.filterByTrademarks, TCPP.usd,countTops)],\r\n\r\n                            'qtyManufacturers':[element.filterByManufacturers.length],\r\n                            'percentManufacturers':[TCPP.usd/element.filterByManufacturers.length],\r\n                            'topsManufacturers':[CalculateTops(element.filterByManufacturers, TCPP.usd, countTops)],\r\n                        };\r\n                    } else {\r\n                        TempDATA = {\r\n                            'name_uz': key.name_uz,\r\n                            'totalPrice': [{usd: 0, uzs: 0, eur: 0, rub: 0}],\r\n                            'percentTotalPrice': [0],\r\n                            'raitingUSD':[0],\r\n                            'raitingQTY':[0],\r\n                            'qty': [0],\r\n                            'percentQty': [0],\r\n\r\n                            'qtyCompanies':[0],\r\n                            'percentCompanies':[0],\r\n                            'topsCompanies':[''],\r\n\r\n                            'qtyDF':[0],\r\n                            'percentDF':[0],\r\n                            'topsDF':[''],\r\n\r\n                            'qtyDist':[0],\r\n                            'percentDist':[0],\r\n                            'topsDist':[''],\r\n\r\n                            'qtyTradeMarks':[0],\r\n                            'percentTradeMarks':[0],\r\n                            'topsTradeMarks':[''],\r\n\r\n                            'qtyManufacturers':[0],\r\n                            'percentManufacturers':[0],\r\n                            'topsManufacturers':[''],\r\n                        };\r\n                    }\r\n                        \r\n                }\r\n            })\r\n            LastDATA.push(TempDATA);  \r\n        })   \r\n        return percentAdd(LastDATA);\r\n    }\r\n    const percentAdd = (respData) => {\r\n        let DATA = [];\r\n        respData.map(element => {\r\n            const difference = {\r\n                qty:{\r\n                    count:[],\r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                },\r\n                part:{     \r\n                    companies:[],\r\n                    df:[],\r\n                    dist:[],\r\n                    trademark:[],\r\n                    manufacturer:[]\r\n                }\r\n            }\r\n            const differenceTotalPrice =[];\r\n            const differencePercentageCol=[];\r\n            for (let i = 0; i < date.length; i++) {\r\n                \r\n                if(i>0){\r\n                    differenceTotalPrice.push({\r\n                        uzs: element.totalPrice[i].uzs - element.totalPrice[i-1].uzs,\r\n                        usd: element.totalPrice[i].usd - element.totalPrice[i-1].usd,\r\n                        rub: element.totalPrice[i].rub - element.totalPrice[i-1].rub,\r\n                        eur: element.totalPrice[i].eur - element.totalPrice[i-1].eur\r\n                    });\r\n                    difference.qty.companies.push(element.qtyCompanies[i] - element.qtyCompanies[i-1]);\r\n                    difference.qty.df.push(element.qtyDF[i] - element.qtyDF[i-1]);\r\n                    difference.qty.dist.push(element.qtyDist[i] - element.qtyDist[i-1]);\r\n                    difference.qty.trademark.push(element.qtyTradeMarks[i] - element.qtyTradeMarks[i-1]);\r\n                    difference.qty.manufacturer.push(element.qtyManufacturers[i] - element.qtyManufacturers[i-1]);\r\n                    difference.qty.count.push(element.qty[i] - element.qty[i-1]);\r\n                    difference.part.companies.push(element.percentCompanies[i]-element.percentCompanies[i-1]);\r\n                    difference.part.df.push(element.percentDF[i]-element.percentDF[i-1]);\r\n                    difference.part.dist.push(element.percentDist[i]-element.percentDist[i-1]);\r\n                    difference.part.trademark.push(element.percentTradeMarks[i]-element.percentTradeMarks[i-1]);\r\n                    difference.part.manufacturer.push(element.percentManufacturers[i]-element.percentManufacturers[i-1]);\r\n                    differencePercentageCol.push(element.percentTotalPrice[i] - element.percentTotalPrice[i-1]);\r\n                }\r\n\r\n            }\r\n            DATA.push({...element , differenceTotalPrice, differencePercentageCol, difference});\r\n            \r\n        })\r\n        return DATA;\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            HeaderVal:{\r\n                role:'name'\r\n            },\r\n            Header: TranslateExp(lang, \"products.med\"),\r\n            accessor: 'name_uz',\r\n        },\r\n        ...totalPrice.usd,\r\n        ...totalPrice.percent,\r\n        ...totalPrice.raiting,\r\n        ...count.qty,\r\n        ...count.percent,\r\n        ...count.raiting,\r\n        ...companies.percent,\r\n        ...companies.qty,\r\n        ...companies.tops,\r\n        ...df.percent,\r\n        ...df.qty,\r\n        ...df.tops,\r\n        ...dist.percent,\r\n        ...dist.qty,\r\n        ...dist.tops,\r\n        ...tradeMarks.percent,\r\n        ...tradeMarks.qty,\r\n        ...tradeMarks.tops,\r\n        ...manufacturers.percent,\r\n        ...manufacturers.qty,\r\n        ...manufacturers.tops,\r\n    ];\r\n\r\n    const RebootAll=()=>{\r\n        const val = window.confirm(`${TranslateExp(lang, \"content.rebootAllTitle\")}?`);\r\n        if(val)\r\n        {\r\n           if(props.allInfo)props.setFirstAll(true);\r\n           if(props.allInfo)props.setDateAll([{started:'', ended:''}])\r\n            setDate([{started:'', ended:''}])\r\n            setResult([]);\r\n            setAllTotalPrice([]);\r\n            setLoading(true);\r\n            setFirst(true);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <DataTable \r\n                {...props}\r\n                RebootAll={RebootAll}\r\n                menu={menu} \r\n                title={title}\r\n                date={date}\r\n                setDate={setDate}\r\n                loading={loading} \r\n                loadingSelect={loadingSelect} \r\n                first={first} \r\n                showTable={show} \r\n                name={true} \r\n                handleSubmit={handleSubmit} \r\n                price={price} \r\n                columns={columns} \r\n                allTotalPrice={allTotalPrice}\r\n                data ={result} \r\n            />\r\n          \r\n        </>\r\n    );\r\n}\r\n\r\nexport default AllInfoAnalyze;","F:\\farmaFinal\\farma\\src\\history\\index.js",[],"F:\\farmaFinal\\farma\\src\\services\\drugsService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeDF.js",[],"F:\\farmaFinal\\farma\\src\\services\\distService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeDist.js",[],"F:\\farmaFinal\\farma\\src\\services\\mnnService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeMnn.js",[],"F:\\farmaFinal\\farma\\src\\services\\tdService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeTradeMark.js",[],"F:\\farmaFinal\\farma\\src\\services\\mfService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeManufacturer.js",[],"F:\\farmaFinal\\farma\\src\\services\\sdrService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeCompanies.js",[],"F:\\farmaFinal\\farma\\src\\services\\medService.js",[],"F:\\farmaFinal\\farma\\src\\services\\analyzeNames.js",[],"F:\\farmaFinal\\farma\\src\\services\\allInfoService.js",[],"F:\\farmaFinal\\farma\\src\\components\\dataTable\\index.js",["710","711","712"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useTable, useFilters, useGlobalFilter, useSortBy ,usePagination } from 'react-table';\r\nimport ReactToPrint from 'react-to-print';\r\nimport st from './dataTable.module.scss';\r\nimport {Button, Form, Nav} from 'react-bootstrap';\r\nimport { GlobalFilter } from './globalFilter';\r\nimport ExportExcel from \"../../components/excelXLSX\";\r\nimport { Table } from 'react-bootstrap';\r\nimport Loading from \"../loading\";\r\nimport { GetDiffferens, NumberToStr, customFilter } from '../../utils';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport ModalInfo from '../modalInfo';\r\n\r\nfunction DataTable(props){\r\n    const {lang, TranslateExp} = props;\r\n    const {loading, loadingSelect, showTable, name, first,\r\n            date, dateAll, firstAll, setDateAll, allInfo, setDate , allTotalPrice, price,  selected} = props;\r\n    const [dropdown, setDropdown] = useState(false);\r\n    const [exportDrop, setExportDrop] = useState(false);\r\n    const [filtAll, setFiltAll]= useState(false);\r\n    const animatedComponents = makeAnimated();\r\n    const columns = props.columns;\r\n    const data = props.data;\r\n    const [isOpenInfoModal, setIsOpenInfoModal] = useState(false);\r\n    const [selectedModalData, setSelectedModalData] = useState(null)\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        prepareRow,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        state,\r\n        setGlobalFilter,\r\n        allColumns,\r\n        getToggleHideAllColumnsProps\r\n    } = useTable(\r\n        {\r\n        columns,\r\n        data,\r\n        initialState: {\r\n            pageSize: 25,\r\n            hiddenColumns: columns.map(column => {\r\n                if (column.show === false) return column.accessor || column.id;\r\n            }),\r\n        } \r\n        },\r\n        useFilters,\r\n        useGlobalFilter,\r\n        useSortBy,\r\n        usePagination\r\n    );\r\n    const filterCategories = [\r\n        {\r\n            value: \"drugs/all\",\r\n            label: TranslateExp(lang,'products.med')\r\n        },\r\n        {\r\n            value: \"trademarks\",\r\n            label: TranslateExp(lang,'products.td')\r\n        },\r\n        {\r\n            value: \"inn\",\r\n            label: TranslateExp(lang,'products.mnn')\r\n        },\r\n        {\r\n            value: \"manufacturers\",\r\n            label: TranslateExp(lang,'products.mf')\r\n        },\r\n        {\r\n            value: \"companies\",\r\n            label: TranslateExp(lang,'products.senders')\r\n        },\r\n        {\r\n            value: \"distributors\",\r\n            label: TranslateExp(lang,'products.dist')\r\n        },\r\n        {\r\n            value: \"drugs/forms\",\r\n            label: TranslateExp(lang,'products.df')\r\n        }\r\n    ];\r\n\r\n    \r\n    const { pageIndex, pageSize } = state;\r\n    const {globalFilter} = state;\r\n\r\n    const handleChange=(e,index,id)=>{\r\n        const DATA = [...date];\r\n        DATA[index][id] = e.target.value;\r\n        setDate(DATA);\r\n        if(allInfo) setDateAll(DATA);\r\n    }\r\n    const handleAdd=()=>{\r\n        setDate([...date, {started:'', ended:''}])\r\n        if(allInfo) setDateAll([...dateAll,{started:'', ended:''}]);\r\n    }\r\n    const handleClear= (index)=>{\r\n       const DATA = [...date]; \r\n       DATA[index] = {started:'', ended:''};\r\n            \r\n        setDate([...DATA]);\r\n        if(allInfo) setDateAll(DATA);\r\n        document.querySelector(`#date${index}started`).value = '';\r\n        document.querySelector(`#date${index}ended`).value = '';\r\n    }\r\n    const handleDelete = (index)=>{\r\n        const DATA = [];\r\n        date.forEach((key,i)=>{\r\n            if(i !== index) DATA.push(key);\r\n        })\r\n        setDate(DATA);\r\n        if(allInfo) setDateAll(DATA);\r\n    }\r\n\r\n    const dPStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '100%',\r\n            margin: '0 auto',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        }),\r\n        multiValue: (provided) => ({\r\n            ...provided,\r\n            backgroundColor: 'transparent',\r\n            border: '1px solid #3A7AFE'\r\n        })\r\n    };\r\n    \r\n    /* Function which needs for animation of DataPickers*/ \r\n    function setAnalyzeChangeBlock () {\r\n        const analyzeMainBlock = document.querySelector('#analyzeMainBlock');\r\n        const analyzeBlock = document.querySelector('#analyzeChangeBlock');\r\n        if(analyzeBlock.classList.contains(st.hide_analyze__form)){\r\n            analyzeMainBlock.classList.remove('d-none')\r\n            setTimeout(()=> {\r\n                analyzeBlock.classList.remove(st.hide_analyze__form)\r\n                analyzeBlock.classList.add(st.show_analyze__form)\r\n            },50);\r\n        }\r\n        else {\r\n            analyzeBlock.classList.add(st.hide_analyze__form);\r\n            analyzeBlock.classList.remove(st.show_analyze__form)\r\n            setTimeout(()=> {\r\n                analyzeMainBlock.classList.add('d-none')\r\n            },200)\r\n        }\r\n    } \r\n    function handleSearch() { \r\n        \r\n        let bool = true;\r\n        const inputs = document.querySelectorAll(`.${st.dates_container__input}`);\r\n        // const selectOptions = document.querySelector('#selectOptions');\r\n        // if(!selected?.length){\r\n        //     bool = false;\r\n        //     selectOptions.style = \"border: 1px solid red; border-radius: 5px\";\r\n        // }\r\n        // else selectOptions.style = \"border: 0\";\r\n\r\n        inputs.forEach(e => {\r\n            if(!e.value.length){\r\n                bool = false;\r\n                e.style = \"border: 1px solid red\";\r\n            }\r\n            else {e.style = \"border: 1px solid hsl(0,0%,80%)\"; }\r\n        });\r\n        if(bool) { \r\n            if(allInfo){\r\n                if(firstAll){\r\n                    setAnalyzeChangeBlock(); \r\n                    props.setFirstAll(false);\r\n                }\r\n            } else {\r\n                setAnalyzeChangeBlock(); \r\n            }\r\n            props.handleSubmit();\r\n        }\r\n        else alert(TranslateExp(lang,'content.alertMessage')); \r\n    }\r\n    useEffect(()=>{\r\n        \r\n        const analyzeMainBlock = document.querySelector('#analyzeMainBlock');\r\n        const analyzeBlock = document.querySelector('#analyzeChangeBlock');\r\n        \r\n        if(allInfo) {\r\n            dateAll.forEach((key, index)=>{\r\n                document.querySelector(`#date${index}started`).value = key.started;\r\n                document.querySelector(`#date${index}ended`).value = key.ended;\r\n            })\r\n            if(!firstAll) {\r\n                analyzeMainBlock.classList.add('d-none')\r\n                analyzeBlock.classList.add(st.hide_analyze__form);\r\n                analyzeBlock.classList.remove(st.show_analyze__form)\r\n                props.handleSubmit();\r\n            }\r\n            \r\n        } \r\n        analyzeMainBlock.addEventListener('click', (event) => {\r\n            if(event.target.matches(`div.${st.analyze_change_block}`))\r\n            setAnalyzeChangeBlock ();\r\n        });\r\n    },[])\r\n    function handleFilterClick (){\r\n        setFiltAll(!filtAll);\r\n        const filterLabel = document.querySelector('#filterLabel');\r\n        if(!filtAll) {\r\n            filterLabel.innerHTML = TranslateExp(lang,\"content.clearAll\")\r\n        }\r\n        else {\r\n            filterLabel.innerHTML = TranslateExp(lang,\"content.checkAll\")\r\n        }\r\n    }\r\n    const closeInfoModal=()=>{\r\n        setIsOpenInfoModal(false);\r\n    }\r\n    const OpenInfoModal=(data)=>{\r\n        setSelectedModalData(data);\r\n        setIsOpenInfoModal(true);\r\n    }\r\n    return (\r\n        <div className={st.info__page}>\r\n            <div className={`${st.header}`}>\r\n                <div className='d-flex align-items-baseline'>\r\n                    <h3>{props.title}</h3>\r\n                    <p className={st.title__p}>{allInfo? TranslateExp(lang, \"sidebar.AllInfo\") :props.menu} <span>{'>'}</span> {props.title}</p>\r\n                </div>\r\n                <div className={`${st.head__btn} ${(showTable||name)?'':'d-none'}`}>\r\n                    <button className={`btn btn-sm mr-2 ${st.btn__white}`} onClick={setAnalyzeChangeBlock}>\r\n                        <i className=\"fas fa-diagnoses mr-1\"></i> {TranslateExp(lang,\"content.analyze\")}\r\n                    </button>\r\n                    <button className={`btn btn-sm mr-2 ${st.btn__white}`} disabled={first? true : false} onClick={props.RebootAll}>\r\n                    <i className=\"fas fa-broom\"></i> {TranslateExp(lang,\"content.clearData\")}\r\n                    </button>\r\n                    <div  \r\n                        className={`${st.filtr_button} ${(columns.length<=3)? 'd-none' : ''}`}\r\n                        onMouseEnter={() => setDropdown(true)}\r\n                        onMouseLeave={() => setDropdown(false)} >\r\n                        <button disabled={(loading)? true : false} className={`btn btn-sm ${st.btn__white}`} >\r\n                            <i className=\"fas fa-sliders-h mr-1\" /> {TranslateExp(lang,\"content.filter\")}\r\n                        </button>\r\n                        <div className={` ${(dropdown && !loading)?'d-block':'d-none'} ${st.dropdown_menu} ${(name)? st.dropdown_menu_datas : ''}`} style={name?{right: '140px'}:''}>\r\n                            <div id='filterLabelBlock' style={name?{textAlign: 'right', fontSize: '14px'}:''} className={`${st.drop__items} custom-control custom-switch`}>\r\n                                <input type='checkbox' onClick={handleFilterClick}  id='all' className='custom-control-input' {...getToggleHideAllColumnsProps()} /> \r\n                                <label className='mx-0' style={{float:'right'}} id='filterLabel' for='all'>{TranslateExp(lang,\"content.checkAll\")}</label>  \r\n                            </div>\r\n                            {allColumns.map(column => (\r\n                                <div className={`${st.drop__items} custom-control custom-switch`} key={column.id}>\r\n                                    <input type='checkbox' className='custom-control-input' id={column.id} {...column.getToggleHiddenProps()} />\r\n                                    <label className='custom-control-label' for={column.id} key={column.id}>\r\n                                        {(column?.HeaderTitle !== undefined)?column.HeaderTitle:column.Header}\r\n                                    </label>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={st.export__btn}\r\n                         onMouseEnter={() => setExportDrop(true)}\r\n                         onMouseLeave={() => setExportDrop(false)}>\r\n                        <button disabled={(loading || page.length < 1)? true : false} className={`btn btn-sm ${st.btn__white}`} >\r\n                            <i className=\"fas fa-file-export mr-1\" /> {TranslateExp(lang,\"content.export\")}\r\n                        </button>\r\n                        <div className={`${((exportDrop && !loading && page.length>0))?'d-block':'d-none'} ${st.export__drop}`}>\r\n                            <div>\r\n                                <ExportExcel\r\n                                    tableData={page}\r\n                                    fileName={props.title}\r\n                                    loading={loading}\r\n                                    lang={lang}\r\n                                    TranslateExp={TranslateExp}\r\n                                    />\r\n                            </div>\r\n                            <div onClick={() => setExportDrop(false)}>\r\n                                <ReactToPrint \r\n                                    documentTitle={props.title}\r\n                                    trigger={() => <button disabled={(loading)? true : false}>\r\n                                        <i className=\"fas fa-print\" style={{margin: '0 13px 0 6px'}} />{TranslateExp(lang,\"content.print\")}</button>}\r\n                                    content={() => document.querySelector(\"#table\")}\r\n                                    copyStyles={true}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <div className={`${st.table__main} p-3 bg-white`}>\r\n               \r\n                <div className={`${st.table__nav} ${(showTable||first)?'d-none':''}`}>\r\n                    <Form className={st.form__select}>\r\n                        <Form.Label>{TranslateExp(lang,\"content.show\")}: </Form.Label>\r\n                        <Form.Control as=\"select\" custom\r\n                                      disabled={loading? true : false}\r\n                                      value={pageSize}\r\n                                      onChange={e => setPageSize(Number(e.target.value))}>\r\n                            <option disabled className='bg-light'>{TranslateExp(lang,\"content.limit\")}:</option>\r\n                            {[25, 50, 100].map(pageSize => (\r\n                                <option key={pageSize} value={pageSize}>\r\n                                    {pageSize}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                    </Form>\r\n                    <div className={st.table__search}>\r\n                        <GlobalFilter lang={lang} TranslateExp={TranslateExp} loading={loading}  filter={globalFilter} setFilter={setGlobalFilter} />\r\n                    </div>\r\n                    \r\n                </div>\r\n                {\r\n                    allInfo &&  \r\n                    <Nav variant=\"pills\" defaultActiveKey=\"/drugs/all\" className={first? '': 'mt-2'}>\r\n                        {\r\n                            filterCategories.map(fC => \r\n                            <Nav.Item onClick={() => props.handleSelectTab(fC)}>\r\n                                <Nav.Link \r\n                                active={props.currentPageTab===fC.value} \r\n                                eventKey={fC.value}>{fC.label}</Nav.Link>\r\n                            </Nav.Item>)\r\n                        }\r\n                    </Nav>\r\n                }\r\n\r\n                <div className={`position-relative ${loading&&allInfo? 'pt-2' : ''}`}>\r\n                    { \r\n                        (loading) ?\r\n                        name&&first?  TranslateExp(lang,\"content.fillTable\") : <Loading />\r\n                        :\r\n                        <Table id='table' responsive bordered className={st.table} {...getTableProps()}>\r\n                            <thead>\r\n                                {headerGroups.map(headerGroup => (\r\n                                \r\n                                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                    <th>№</th>\r\n                                    {headerGroup.headers.map(column => (\r\n                                        <th {...column.getHeaderProps()}>\r\n                                            <div className='d-flex align-items-center justify-content-center'>\r\n                                                <span className={`mr-2 ${st.column__header}`}>\r\n                                                    {column.render('Header')}\r\n                                                </span>\r\n                                                <span className='my-auto' {...column.getSortByToggleProps()}>\r\n                                                {   (!column.notSort)?\r\n                                                        column.isSorted ? \r\n                                                            column.isSortedDesc?\r\n                                                            <i className='fa fa-chevron-down'/> \r\n                                                            :<i className='fa fa-chevron-up'/>\r\n                                                        :<i className='fa fa-bars'/>\r\n                                                    :\"\"\r\n                                                }\r\n                                                </span>\r\n                                            </div>\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                                ))}\r\n                            </thead>\r\n                            <tbody {...getTableBodyProps()}>\r\n                                {\r\n                                    (name)?\r\n                                    headerGroups.map(headerGroup => (\r\n                                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                            <th className={st.allPrice__th}></th>\r\n                                            {headerGroup.headers.map(column => (\r\n                                                <th className={st.allPrice__th} {...column.getHeaderProps()}>\r\n                                                    {\r\n                                                        (column.HeaderVal?.role=== 'name')? \r\n                                                            <span>{TranslateExp(lang,\"table.mainTurnOver\")}</span> \r\n                                                            : \"\"\r\n                                                    }\r\n                                                    { \r\n                                                        (column.HeaderVal?.role === 'price')?\r\n                                                            (allTotalPrice[column.HeaderVal.id-1])?\r\n                                                            <div>{NumberToStr((+allTotalPrice[column.HeaderVal.id-1]?.allTotalPrice[price]).toFixed(2))}</div>\r\n                                                            :\"\"\r\n                                                        : \"\"\r\n                                                    }\r\n                                                    { \r\n                                                        (column.HeaderVal?.role === 'sum')?\r\n                                                            (allTotalPrice[column.HeaderVal.id-1])?\r\n                                                            <div>{NumberToStr((+allTotalPrice[column.HeaderVal.id-1]?.allTotalPrice['uzs']).toFixed(2))}</div>\r\n                                                            :\"\"\r\n                                                        : \"\"\r\n                                                    }\r\n                                                    { \r\n                                                        (column.HeaderVal?.role === 'count')?\r\n                                                            (allTotalPrice[column.HeaderVal.id-1])?\r\n                                                            <div>{NumberToStr(allTotalPrice[column.HeaderVal.id-1]?.allCount)}</div>\r\n                                                            :\"\"\r\n                                                        : \"\"\r\n                                                    }\r\n                                                    { \r\n                                                        (column.HeaderVal?.role === 'dAllPrice')?\r\n                                                        GetDiffferens((allTotalPrice[column.HeaderVal.id+1]?.allTotalPrice[price] - allTotalPrice[column.HeaderVal.id]?.allTotalPrice[price]), st)\r\n                                                            :\"\"\r\n                                                    }\r\n                                                    { \r\n                                                        (column.HeaderVal?.role === 'dAllSum')?\r\n                                                            GetDiffferens(allTotalPrice[column.HeaderVal.id+1]?.allTotalPrice.uzs - allTotalPrice[column.HeaderVal.id]?.allTotalPrice.uzs, st)\r\n                                                        :\"\"\r\n                                                    }\r\n                                                    { \r\n                                                        (column.HeaderVal?.role === 'dCount')?\r\n                                                        GetDiffferens((allTotalPrice[column.HeaderVal.id+1]?.allCount - allTotalPrice[column.HeaderVal.id]?.allCount ), st)\r\n                                                            :\"\"\r\n                                                    }\r\n                                                </th>\r\n                                            ))}\r\n                                        </tr>\r\n                                    )) : ''  \r\n                                }\r\n                                {page.map((row, orderNumber) => {\r\n                                prepareRow(row)\r\n                                return (\r\n                                    <tr {...row.getRowProps()}\r\n                                        onDoubleClick={()=>{OpenInfoModal(row.allCells)}}\r\n                                    >\r\n                                        <td>{ pageIndex*pageSize + orderNumber + 1 }</td>\r\n                                        {\r\n                                            row.cells.map(cell => {\r\n                                                return <td {...cell.getCellProps()}>\r\n                                                    {cell.render('Cell')}\r\n                                                </td>\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    }\r\n\r\n                </div>\r\n\r\n                <div className={`${st.footer_pagination} ${(loading)?'d-none':''} `}>\r\n                    <div>\r\n                        {TranslateExp(lang,\"pagin.page\")} {pageIndex + 1} {TranslateExp(lang,\"pagin.of\")} {pageOptions.length}\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={() => gotoPage(0)} className={`${st.pagin__start} ${(!canPreviousPage)?st.disabled:\"\"}`}>\r\n                            <i className=\"fas fa-angle-double-left\"></i>\r\n                        </button>\r\n                        <button onClick={() =>  gotoPage(pageIndex-1)} className={`${st.pagin__prev} ${(!canPreviousPage)?st.disabled:\"\"}`}>\r\n                            {TranslateExp(lang,\"pagin.prev\")}\r\n                        </button>\r\n                        <button onClick={() =>  gotoPage(pageIndex+1)} className={`${st.pagin__next} ${(!canNextPage)?st.disabled:\"\"}`}>\r\n                            {TranslateExp(lang,\"pagin.next\")}\r\n                        </button>\r\n                        <button onClick={() => gotoPage(pageCount - 1)} className={`${st.pagin__end} ${(!canNextPage)?st.disabled:\"\"}`}>\r\n                            <i className=\"fas fa-angle-double-right\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                (name)?\r\n                <div id = 'analyzeMainBlock' className={`${(!firstAll && allInfo)?'d-none':''} ${st.analyze_change_block}`}>\r\n                    <div className='position-relative'>\r\n                        <Form id = 'analyzeChangeBlock' className={`text-center ${st.analyze__form}`}>\r\n                            <div>\r\n                                {\r\n                                    !allInfo &&\r\n                                    <div>\r\n                                        <h6> {TranslateExp(lang,\"content.analyzeTitle\")}</h6>\r\n                                        <Select\r\n                                            filterOption={customFilter}\r\n                                            id='selectOptions'\r\n                                            options={props.optionSelectedData}\r\n                                            isMulti\r\n                                            value={selected}\r\n                                            onChange={e => {props.setSelected(e)}}\r\n                                            components={animatedComponents}\r\n                                            isLoading={loadingSelect}\r\n                                            placeholder={''}\r\n                                            styles={dPStyles}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                                <div className='my-2'>\r\n                                    <h6>{TranslateExp(lang,\"content.analyzePer\")}</h6>\r\n                                    {\r\n                                        date.map((key,index)=>{\r\n                                            return(\r\n                                                <div key={index} className={st.dates_container}>\r\n                                                    <h6 className='text-nowrap mr-2'> {index+1} -  {TranslateExp(lang,\"content.period\")}:</h6>\r\n                                                    <Form.Control \r\n                                                        className={`mr-2 mb-2 ${st.dates_container__input}`}\r\n                                                        id={`date${index}started`} \r\n                                                        value={key.started}\r\n                                                        onChange={(e)=>handleChange(e,index,'started')} \r\n                                                        type='date'\r\n                                                        max={key.ended}\r\n                                                        required\r\n                                                    />\r\n                                                    <Form.Control\r\n                                                        className={`mb-2 ${st.dates_container__input}`}\r\n                                                        id={`date${index}ended`} \r\n                                                        value={key.ended}\r\n                                                        onChange={(e)=>handleChange(e,index,'ended')} \r\n                                                        type='date'\r\n                                                        min = {key.started}\r\n                                                        required\r\n                                                    />\r\n                                                    <i onClick={()=>handleClear(index)} className=\"fas fa-broom pl-2 pr-1\" role='button'></i>\r\n                                                    {\r\n                                                        (date.length>1)?\r\n                                                        <i onClick={()=>handleDelete(index)} className=\"px-1\" role='button'>X</i>:\"\"\r\n\r\n                                                    }\r\n                                                    {\r\n                                                        (index < 3 && date.length-1 === index)?   \r\n                                                        <i className=\"pl-1 cursor-pointer fas fa-plus\" onClick={()=>handleAdd()}></i>:\"\"\r\n                                                    }\r\n                                                </div>\r\n\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className='d-flex justify-content-between'>\r\n                                <Button className = {`p-1 w-25 ${st.btn__white}`} onClick={setAnalyzeChangeBlock}> {TranslateExp(lang,\"content.close\")}</Button>\r\n                                <Button className='p-1 w-25' onClick={handleSearch}>{ TranslateExp(lang,\"content.search\")}</Button>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </div>: \"\"\r\n            }\r\n            <ModalInfo data={selectedModalData} show={isOpenInfoModal} hide={closeInfoModal} price={price} dateLen={date.length} lang={lang} TranslateExp={TranslateExp}/>\r\n        </div>\r\n    \r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default DataTable;\r\n","F:\\farmaFinal\\farma\\src\\pages\\cruds\\users\\UserForm\\index.js",["713","714","715","716","717","718","719","720","721","722","723","724","725","726","727"],"import React, {useState, useEffect, useContext} from \"react\";\r\nimport {Button, Col, Container, Row, Form, Card, Toast} from \"react-bootstrap\";\r\nimport {userApi} from \"../../../../services/userService\";\r\nimport Select from \"react-select\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport UserContext from \"../../../../context/UserContext\";\r\nimport {authApi} from \"../../../../services/authService\";\r\nimport st from \"../../../../components/dataTable/dataTable.module.scss\";\r\nimport ToastEx from \"../../../../components/toasts\";\r\n\r\n\r\nconst roles = [\r\n    {\r\n        value:2,\r\n        label: \"админ\"\r\n    },\r\n    {\r\n        value:3,\r\n        label: \"пользователь\",\r\n    },\r\n    {\r\n        value:4,\r\n        label: \"покупатель\"\r\n    },\r\n    {\r\n        value:10,\r\n        label: \"DEMO\",\r\n    }\r\n]\r\n\r\nfunction UserForm(props){\r\n    const {userId, lang, TranslateExp, id} = props;\r\n    console.log('getProps = ',props);\r\n    // console.log('sdsd', props?.id);\r\n    let {currentRole}=useContext(UserContext);\r\n    const[isActive,setIsActive] = useState(false);\r\n    const[isConfirmed,setIsConfirmed] = useState(false);\r\n    const requestBodyTemplate = {\r\n    last_name: \"\",\r\n    first_name: \"\",\r\n    middle_name: \"\",\r\n    email: \"\",\r\n    role: undefined,\r\n    password: \"\",\r\n    confirmed: isConfirmed,\r\n    company_name: \"\",\r\n    company_inn: \"\",\r\n    phone_number: \"\",\r\n    user_mac: \"\",\r\n    um_created_at: \"\",\r\n    um_expired_at: \"\",\r\n    otm_created_at: \"\",\r\n    otm_expired_at: \"\",\r\n    one_time_mac: undefined,\r\n    passport_info: \"\",\r\n    user_address: \"\",\r\n    is_blocked: isActive\r\n    // avatar: null\r\n}\r\n    const [requestBody, setRequestBody] = useState(requestBodyTemplate);\r\n    const [validationMsg, setValidationMsg] = useState(\"\");\r\n    const [response,setResponse] = useState('');\r\n    const [status, setStatus] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const [status2, setStatus2] = useState(false);\r\n    const [password, setPassword] = useState({password:''});\r\n    useEffect(() => {\r\n        if(userId !== undefined){\r\n            delete requestBody.password;\r\n            try{\r\n                userApi.getList().then(({data: {data} }) => {\r\n                    const forEdit = data.find(user => user._id === userId);\r\n                    delete requestBody.otm_expired_at;\r\n                    delete requestBody.password;\r\n                    setRequestBody({\r\n                        ...requestBody,\r\n                        last_name: forEdit.last_name,\r\n                        first_name: forEdit.first_name,\r\n                        middle_name: forEdit.middle_name,\r\n                        email: forEdit.email,\r\n                        role: forEdit.role,\r\n                        confirmed: forEdit.confirmed,\r\n                        company_name: forEdit.company_name,\r\n                        company_inn: forEdit.company_inn,\r\n                        phone_number: forEdit.phone_number,\r\n                        user_mac: forEdit.user_mac,\r\n                        um_created_at: forEdit.um_created_at,\r\n                        um_expired_at: forEdit.um_expired_at,\r\n                        one_time_mac: forEdit.one_time_mac,\r\n                        otm_created_at: forEdit.otm_created_at,\r\n                        // otm_expired_at: forEdit.otm_expired_at,\r\n                        passport_info: forEdit.passport_info,\r\n                        user_address: forEdit.user_address,\r\n                        is_blocked: forEdit.is_blocked,\r\n                        avatar: forEdit.avatar,\r\n                    })\r\n                });\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n    }, [userId]);\r\n    useEffect(()=>{\r\n        if (requestBody.role!==0||requestBody.role!==undefined){\r\n            setIsConfirmed(true)\r\n        }else {\r\n            setIsConfirmed(false);\r\n        }\r\n    },[]);\r\n\r\n\r\n    const addUser =(e)=>{\r\n        const names = Object.keys(requestBody);\r\n        let failedField;\r\n        // for(let name of names){\r\n        //     if (requestBody[name]===\"password\"){\r\n        //         delete requestBody.password;\r\n        //     }else if(requestBody[name] === \"\" || requestBody[name] === undefined){\r\n        //         failedField = name;\r\n        //         console.log(\"name\",name)\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // setValidationMsg(`Поле ${failedField} должно быть заполнено`);\r\n        try{\r\n            if(userId){\r\n                console.log(\"ktt\",requestBody);\r\n                userApi.edit(userId,requestBody).then(res=>{\r\n                    // console.log(\"updatingData\",res);\r\n                    setShow(true);\r\n                    setResponse({\r\n                        message:res.data.message.ru,\r\n                        status:res.data.status\r\n                    });\r\n                    setTimeout(function () {\r\n                        setStatus(true);\r\n                    },1000)\r\n                });\r\n\r\n            }else{\r\n                userApi.save(requestBody).then(resp => {\r\n                    // console.log(\"resp:\",resp)\r\n                    setShow(true);\r\n                    setResponse({\r\n                        message:resp.data.message.ru,\r\n                        status:resp.data.status\r\n                    })\r\n                    setTimeout(function () {\r\n                        setStatus(true)\r\n                    },1000)\r\n                })\r\n            }\r\n\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    function handleActive(){\r\n        if(requestBody.is_blocked){\r\n            setIsActive(false);\r\n            requestBody.is_blocked=false;\r\n        } else {\r\n            setIsActive(true);\r\n            requestBody.is_blocked=true;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n    <>\r\n            <div className='p-3 bg-light'>\r\n            <h3>{id? TranslateExp(lang, \"content.editing\") : TranslateExp(lang, \"content.adding\")} {TranslateExp(lang, \"cruds.user\")} {TranslateExp(lang, \"cruds.add\")}</h3>\r\n            <p className='text-danger'>\r\n                {\r\n                    // validationMsg? validationMsg : \"\"\r\n                }\r\n            </p>\r\n                <Row>\r\n                    <Col md={9}></Col>\r\n                    <Col md={3}>\r\n                        <Toast style={{background:\"lime\"}} onClose={() => setShow(false)} show={show} delay={1500} autohide>\r\n                            <Toast.Header>\r\n                                <strong className=\"mr-auto\">{TranslateExp(lang, \"content.messageEdited\")}</strong>\r\n                            </Toast.Header>\r\n                            <Toast.Body>{response.message?response.message:\"Error\"}</Toast.Body>\r\n                        </Toast>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='pb-5'>\r\n                <Col md={8}>\r\n                    <Form onSubmit={e=>addUser(e)}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"reg.name\")}</Form.Label>\r\n                                            <Form.Control \r\n                                                 type = 'text'\r\n                                                 name={\"first_name\"}\r\n                                                 placeholder = {TranslateExp(lang, \"reg.placeName\")}\r\n                                                 defaultValue = {userId? requestBody.first_name : \"\"}\r\n                                                 onChange={e => setRequestBody({...requestBody, first_name: e.target.value})} required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"reg.secName\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                type = 'text'\r\n                                                placeholder = {TranslateExp(lang, \"reg.placeSecName\")}\r\n                                                name=\"last_name\"\r\n                                                defaultValue = {userId? requestBody.last_name : \"\"}\r\n                                                onChange={e => setRequestBody({...requestBody, last_name: e.target.value})}\r\n                                                required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"reg.lastName\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                type = 'text'\r\n                                                placeholder = {TranslateExp(lang, \"reg.placeLastName\")}\r\n                                                name=\"middle_name\"\r\n                                                defaultValue = {userId? requestBody.middle_name : \"\"}\r\n                                                onChange={e => setRequestBody({...requestBody, middle_name: e.target.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"auth.email\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                type = 'email'\r\n                                                name=\"email\"\r\n                                                placeholder = {TranslateExp(lang, \"auth.email\")}\r\n                                                defaultValue = {userId? requestBody.email : \"\"}\r\n                                                onChange={e => setRequestBody({...requestBody, email: e.target.value})}\r\n                                                required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"cruds.userMac\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                type = 'text'\r\n                                                name=\"user_mac\"\r\n                                                placeholder = {TranslateExp(lang, \"cruds.userMac\")}\r\n                                                defaultValue = {userId? requestBody.user_mac : \"\"}\r\n                                                onChange={e => setRequestBody({...requestBody, user_mac: e.target.value})} required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"cruds.disMac\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                type = 'text'\r\n                                                name=\"one_time_mac\"\r\n                                                placeholder = {TranslateExp(lang, \"cruds.disMac\")}\r\n                                                defaultValue = {userId? requestBody.one_time_mac: \"\"}\r\n                                                onChange={e => setRequestBody({...requestBody, one_time_mac: e.target.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group className={!userId?\"d-none\":\"\"}>\r\n                                            <Form.Label>{TranslateExp(lang, \"content.role\")}</Form.Label>\r\n                                            <Select\r\n                                                placeholder={TranslateExp(lang, \"content.role\")}\r\n                                                name=\"role\"\r\n                                                options={roles}\r\n                                                value = {userId?roles.filter(item=>item.value == requestBody.role):[]}\r\n                                                onChange={e =>{ setRequestBody({...requestBody, role:e.value })} }/>\r\n                                        </Form.Group>\r\n                                        <Form.Group className={userId?\"d-none\":\"\"}>\r\n                                            <Form.Label>{TranslateExp(lang, \"content.role\")}</Form.Label>\r\n                                            <Select\r\n                                                placeholder={TranslateExp(lang, \"content.role\")}\r\n                                                options={roles}\r\n                                                name={\"role\"}\r\n                                                onChange={e =>{setRequestBody({...requestBody,role:e.value,confirmed: true}); setIsConfirmed(true) }} />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                {/*setRequestBody({...requestBody, role : e.value})*/}\r\n                                {/*className={!userId?\"\":\"d-none\"}*/}\r\n                                <Row className={userId?\"d-none\":\"\"}>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"auth.password\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                 type = 'password'\r\n                                                 name={\"password\"}\r\n                                                 placeholder = {TranslateExp(lang, \"auth.password\")}\r\n                                                 onChange={e => {setRequestBody({...requestBody,password:e.target.value})} }/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                {/* onChange={e => setRequestBody({...requestBody, confirmed: e.target.value})} */}\r\n                                {/*setPassword({password:e.target.value});*/}\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Label>{TranslateExp(lang, \"cruds.UMCreated\")}</Form.Label>\r\n                                        <Form.Control\r\n                                            className={`mr-2 mb-2 ${st.dates_container__input}`}\r\n                                            id={`um_created_at`}\r\n                                            name={`um_created_at`}\r\n                                            onChange={(e)=>setRequestBody({...requestBody,um_created_at:e.target.value})}\r\n                                            defaultValue = {formatDate(requestBody?.um_created_at)}\r\n                                            type='date'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>{TranslateExp(lang, \"cruds.UMExp\")}</Form.Label>\r\n                                        <Form.Control\r\n                                            className={`mr-2 mb-2 ${st.dates_container__input}`}\r\n                                            name={`um_expired_at`}\r\n                                            onChange={(e)=>setRequestBody({...requestBody,um_expired_at:e.target.value})}\r\n                                            defaultValue = {formatDate(requestBody?.um_expired_at)}\r\n                                            type='date'\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Label>{TranslateExp(lang, \"cruds.OTMCreated\")}</Form.Label>\r\n                                        <Form.Control\r\n                                            className={`mr-2 mb-2 ${st.dates_container__input}`}\r\n                                            // id={`date${index}started`}\r\n                                            // value={key.started}\r\n                                            name={`otm_created_at`}\r\n                                            onChange={(e)=>setRequestBody({...requestBody,otm_created_at:e.target.value})}\r\n                                            defaultValue = {formatDate(requestBody?.otm_created_at)}\r\n                                            type='date'\r\n                                        />\r\n                                    </Col>\r\n                                    <Col className={userId?\"d-none\":\"\"}>\r\n                                        <Form.Label>{TranslateExp(lang, \"cruds.OTMExp\")}</Form.Label>\r\n                                        <Form.Control\r\n                                            type='date'\r\n                                            name=\"otm_expired_at\"\r\n                                            className={`mr-2 mb-2 ${st.dates_container__input}`}\r\n                                            onChange={(e)=>setRequestBody({...requestBody,otm_expired_at:e.target.value})}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"reg.compName\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                 type = 'text'\r\n                                                 placeholder = {TranslateExp(lang, \"reg.placeCompName\")}\r\n                                                 name={\"company_name\"}\r\n                                                 defaultValue = {userId? requestBody.company_name : \"\"}\r\n                                                 onChange={e => setRequestBody({...requestBody, company_name: e.target.value})}\r\n                                                 required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.mnn\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                 type = 'text'\r\n                                                 name={\"company_inn\"}\r\n                                                 placeholder = {TranslateExp(lang, \"products.mnn\")}\r\n                                                 defaultValue = {userId? requestBody.company_inn : \"\"}\r\n                                                 onChange={e => setRequestBody({...requestBody, company_inn: e.target.value})} required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"reg.phone\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                 type = 'text'\r\n                                                 name={\"phone_number\"}\r\n                                                 placeholder = {TranslateExp(lang, \"reg.phone\")}\r\n                                                 defaultValue = {userId? requestBody.phone_number : \"\"}\r\n                                                 onChange={e => setRequestBody({...requestBody, phone_number: e.target.value})}\r\n                                                 required/>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"content.serPass\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                 type = 'text'\r\n                                                 name={\"passport_info\"}\r\n                                                 placeholder = {TranslateExp(lang, \"content.serPass\")}\r\n                                                 defaultValue = {userId? requestBody.passport_info : \"\"}\r\n                                                 onChange={e => setRequestBody({...requestBody, passport_info: e.target.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"reg.address\")}</Form.Label>\r\n                                            <Form.Control\r\n                                                 type = 'text'\r\n                                                 name={\"user_address\"}\r\n                                                 placeholder = {TranslateExp(lang, \"reg.address\")}\r\n                                                 defaultValue = {userId? requestBody.user_address : \"\"}\r\n                                                 onChange={e => setRequestBody({...requestBody, user_address: e.target.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n\r\n                                    <Col className=\"mt-4 pt-1\">\r\n                                        <Form.Group>\r\n                                            <Form.Check\r\n                                                 type = \"switch\"\r\n                                                 label={TranslateExp(lang, \"content.block\")}\r\n                                                 id=\"active\"\r\n                                                 checked={userId?requestBody.is_blocked:isActive}\r\n                                                 onChange={()=>handleActive()}\r\n                                                 // onChange={e => setRequestBody({...requestBody, is_blocked: e.target.value})}\r\n                                                />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className='my-2'>\r\n                                    <Col><Button type=\"reset\" className={\"btn btn-block btn-warning\"}>{TranslateExp(lang, \"content.resetAll\")}</Button></Col>\r\n                                    <Col><Button type='submit' className={\"btn btn-block btn-success\"}>{TranslateExp(lang, \"content.save\")}</Button></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    </Col>\r\n                <Col></Col>\r\n                <Col md={3} className={userId?\"mt-5 d-block\":\"mt-5 d-none\"}>\r\n                        {/*<Card>*/}\r\n                        {/*    <Card.Header>*/}\r\n                        {/*        <h4>change user`s password</h4>*/}\r\n                        {/*    </Card.Header>*/}\r\n                        {/*    <Form onSubmit={e=>changePassword(e)}>*/}\r\n                        {/*        <Card.Body>*/}\r\n                        {/*            <Form.Group>*/}\r\n                        {/*                <Form.Label>Password</Form.Label>*/}\r\n                        {/*                <Form.Control onChange={e => {setPassword({password:e.target.value})}}*/}\r\n                        {/*                              name={\"password\"} type='password' placeholder='password' required/>*/}\r\n                        {/*            </Form.Group>*/}\r\n                        {/*        </Card.Body>*/}\r\n                        {/*        <Card.Footer>*/}\r\n                        {/*            <Button type={\"submit\"} className={\"btn btn-block\"} color={\"info\"}>Change</Button>*/}\r\n                        {/*        </Card.Footer>*/}\r\n                        {/*    </Form>*/}\r\n                        {/*</Card>*/}\r\n\r\n                    </Col>\r\n                {\r\n                    (status || status2) &&\r\n                        <Redirect to={\"/admin/users\"}/>\r\n                }\r\n            </Row>\r\n        </div>\r\n    </>\r\n  );\r\n    function formatDate(date){\r\n        if(date){\r\n            const parsedDate = new Date(date).toISOString().substr(0, 10);\r\n            return parsedDate;\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserForm;\r\n","F:\\farmaFinal\\farma\\src\\components\\uploadModal\\index.js",["728","729"],"import react, {useState, useRef} from \"react\";\r\nimport {Row, Modal, Form, Button} from \"react-bootstrap\";\r\n \r\nfunction UploadModal(props){\r\n\r\n  const {showUpload, handleUploadClose, lang, TranslateExp} = props;\r\n  const {uploadExcel} = props;\r\n  const [filename, setFilename] = useState(\"\");\r\n  const [msg, setMsg] = useState(\"\");\r\n  const fileName = useRef();\r\n\r\n\r\n  const styles = {\r\n    marginBottom: 0,\r\n    marginTop: \"10px\",\r\n    color: \"#999\"\r\n  }\r\n\r\n  const onclose = () => {\r\n    handleUploadClose();\r\n    setFilename(\"\");\r\n  }\r\n  \r\n  return (\r\n    <Modal show={showUpload} onHide={onclose} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{TranslateExp(lang,\"content.status\")} excel</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        {msg && <span style={{color: \"red\"}}>{msg}</span>}\r\n        <Form onSubmit={e => uploadExcel(e, handleUploadClose, setFilename, setMsg)}>\r\n          <Form.File \r\n            id=\"custom-file-translate-scss\"\r\n            label={TranslateExp(lang, \"content.excelFile\")}\r\n            custom\r\n            lang=\"en\"\r\n            data-browse={TranslateExp(lang, \"content.select\")}\r\n            accept=\".xlsx, .xls\"\r\n            onChange={e => setFilename(e.target?.files[0]?.name)}\r\n            required\r\n          />\r\n          <p  style={styles} ref={fileName}>{TranslateExp(lang, \"content.file\")}: {filename? filename : TranslateExp(lang, \"content.notSelected\")}</p>\r\n          <Button \r\n            className=\"float-right\" \r\n            variant=\"success\" \r\n            type=\"submit\">\r\n            {TranslateExp(lang, \"content.uploadFile\")}\r\n          </Button>\r\n        </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n  );\r\n\r\n}\r\n\r\nexport default UploadModal;","F:\\farmaFinal\\farma\\src\\components\\excelXLSX\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\dataTable\\globalFilter\\index.js",[],"F:\\farmaFinal\\farma\\src\\pages\\cruds\\users\\UserCrudTable\\index.js",["730","731","732","733","734","735"],"F:\\farmaFinal\\farma\\src\\components\\modalEdit\\index.js",[],"F:\\farmaFinal\\farma\\src\\components\\modalAdd\\index.js",[],"F:\\farmaFinal\\farma\\src\\services\\countryService.js",[],"F:\\farmaFinal\\farma\\src\\services\\tpgService.js",[],"F:\\farmaFinal\\farma\\src\\services\\drcService.js",[],"F:\\farmaFinal\\farma\\src\\utils\\genPass.js",[],"F:\\farmaFinal\\farma\\src\\services\\userService.js",[],"F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\drcEdit\\index.js",["736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752"],"import React, {useEffect, useState} from 'react';\r\nimport Select from '../../../../components/reactSelect';\r\nimport st from \"../../crud.module.scss\";\r\nimport {Button, Col, Row, Form } from \"react-bootstrap\";\r\nimport {DRCApi} from \"../../../../services/drcService\";\r\nimport {medApi} from \"../../../../services/medService\";\r\nimport {mfApi} from \"../../../../services/mfService\";\r\nimport {countryApi} from \"../../../../services/countryService\";\r\nimport {sdrApi} from \"../../../../services/sdrService\";\r\nimport {distApi} from \"../../../../services/distService\";\r\nimport {tradeMarkApi} from \"../../../../services/tdService\";\r\nimport {NumberToStr, StrtoNumber, customFilter} from '../../../../utils';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nfunction DRCEdit (props) {\r\n    const {id} = props.match.params;\r\n    const {lang, TranslateExp} = props;\r\n    const today = new Date();\r\n    const date = today.getDate()+'/'+(today.getMonth()+1)+'/'+today.getFullYear();\r\n    const[status,setStatus] = useState(false);\r\n    const[val, setVal] = useState('');\r\n\r\n    const[countries,setCountries] = useState([]);\r\n    const [drugs, setDrugs] = useState([]);\r\n    const [dist, setDist] = useState([]);\r\n    const [sdr, setSdr] = useState([]);\r\n    const [mfs,setMfs] = useState([]);\r\n    const [tds, setTds] = useState([]);\r\n\r\n    const [cPrice, setCPrice] = useState({\r\n        ccv: \"\",\r\n        ccy: \"\"\r\n    });\r\n\r\n    const [price, setPrice] = useState({\r\n        ccv: \"\",\r\n        ccy: \"\"\r\n    });\r\n\r\n    const [currencyListCp, setCurrencyListCp] = useState(null);\r\n    const [currencyListP, setCurrencyListP] = useState(null);\r\n\r\n    const[result,setResult] = useState({\r\n        drug_name:\"\",\r\n        trademark: \"\",\r\n        serial_number:\"\",\r\n        shelf_life:\"\",\r\n        mode_70_date:\"\",\r\n        mode_70_distributor:\"\",\r\n        mode_40_date:\"\",\r\n        mode_40_distributor:\"\",\r\n        sender_company:\"\",\r\n        quantity: \"\",\r\n        p_ccy_rate:0,\r\n        cp_ccy_rate:0,\r\n        is_active:1,\r\n        is_deleted:0,\r\n        manufacturer: \"\",\r\n        manufacturer_country:\"\"\r\n    });\r\n\r\n    const calculatePrice = ({type, body}) => {\r\n        DRCApi.getCurrencyList({...body, ccv: +body.ccv}).then(resp => {\r\n            if(resp.status == 200){\r\n                if(type){\r\n                    setCurrencyListCp(resp.data.data)\r\n                }else{\r\n                    setCurrencyListP(resp.data.data);\r\n                }\r\n              \r\n                setResult(result);\r\n            }\r\n        })\r\n        setVal(val);\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if(cPrice.ccy != \"\" && cPrice.ccv.trim() != \"\" && !isNaN(cPrice.ccv)){\r\n            calculatePrice({type: 1, body: cPrice});\r\n        }\r\n    }, [cPrice]);\r\n\r\n    useEffect(() => {\r\n        if(price.ccy != \"\" && price.ccv.trim() != \"\" && !isNaN(price.ccv)){\r\n            calculatePrice({type: 0, body: price});\r\n        }\r\n    }, [price]);\r\n\r\n    const getAllLists = () => {\r\n       \r\n        medApi.getList().then(resp => setDrugs(resp.data.data));\r\n        distApi.getList().then(resp => setDist(resp.data.data));\r\n        sdrApi.getList().then(resp => setSdr(resp.data.data));\r\n        mfApi.getList().then(res=>{\r\n            setMfs(res.data.data);\r\n        });\r\n        countryApi.getList().then(res=>{\r\n            setCountries(res.data.data)\r\n        });\r\n        tradeMarkApi.getList().then(res => {\r\n            setTds(res.data.data);\r\n        });\r\n    };\r\n\r\n    useEffect(async ()  =>{\r\n        getAllLists();\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        getDrc();\r\n    }, [mfs, countries]);\r\n\r\n    function getDrc(){\r\n        DRCApi.getList().then(resp => {\r\n            const res = resp.data.data.find(d => d._id == id);\r\n            const cp_prices = {};\r\n            const p_prices = {};\r\n            const sm_prices = {};\r\n            Object.keys(res.sum_price).forEach(curSmPrice => {\r\n                sm_prices[`sm_${curSmPrice}`] = res.sum_price[curSmPrice];\r\n            });\r\n            Object.keys(res.price).forEach(curPrice => {\r\n                p_prices[`p_${curPrice}`] = res.price[curPrice];\r\n            });\r\n            \r\n            Object.keys(res.customs_price).forEach(curCPrice => {\r\n                cp_prices[`cp_${curCPrice}`] = res.customs_price[curCPrice];\r\n            });\r\n                \r\n            setResult({...result,\r\n                drug_name:res.drug_name._id,\r\n                trademark:res.trademark._id,\r\n                serial_number:res.serial_number,\r\n                shelf_life:res.shelf_life,\r\n                mode_70_date:res.mode_70_date,\r\n                mode_70_distributor:res.mode_70_distributor._id,\r\n                mode_40_date:res.mode_40_date,\r\n                mode_40_distributor:res.mode_40_distributor._id,\r\n                sender_company:res.sender_company._id,\r\n                quantity: res.quantity,\r\n                manufacturer:res.manufacturer._id,\r\n                manufacturer_country:res.manufacturer_country._id,\r\n                ...cp_prices,\r\n                ...p_prices,\r\n                ...sm_prices\r\n            });\r\n\r\n            setCPrice({\r\n                ccy:res.customs_price.ccy,\r\n                ccv:new String(res.customs_price[res.customs_price.ccy.toLowerCase()])\r\n            });\r\n            setPrice({\r\n                ccy:res.price.ccy,\r\n                ccv:new String(res.price[res.customs_price.ccy.toLowerCase()])\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    const editDrc = e => {\r\n        e.preventDefault();\r\n\r\n        if(currencyListP && currencyListCp){\r\n            if(cPrice.ccy !== result.cp_ccy || cPrice.ccv !== result[result.cp_ccy.toLowerCase()]){\r\n                Object.keys(currencyListCp).forEach(curCp => {\r\n                    result[`sp_${curCp}`] = currencyListCp[curCp];\r\n                });\r\n                result.cp_ccy = cPrice.ccy;\r\n            }\r\n\r\n            \r\n            // Check if price is changed\r\n            if(price.ccy !== result.p_ccy || price.ccv !== result[result.p_ccy.toLowerCase()]){\r\n                Object.keys(currencyListP).forEach(curP => {\r\n                    result[`p_${curP}`] = currencyListP[curP];\r\n                });\r\n                result.p_ccy = price.ccy;\r\n\r\n                // If price is changed calculate result again with new values and change edited data results\r\n                Object.keys(currencyListP).forEach(currency => {\r\n                    result[`sm_${currency}`] = +(currencyListP[currency] * result.quantity).toFixed(2);\r\n                });\r\n            }\r\n\r\n            DRCApi.edit(id, result).then(res=>{\r\n                if (res.status===201){\r\n                    setStatus(true);\r\n                }\r\n            })\r\n        }\r\n\r\n        // getList()\r\n    };\r\n    const optionsPrice = [{value: \"USD\", label:\"$\"},{value: \"EUR\", label:\"€\"},{value: \"RUB\", label:\"₽\"},{value: \"UZS\", label:\"SO'M\"},];\r\n    const customStyles = {\r\n\r\n    control: (provided) => ({\r\n        ...provided,\r\n        borderRadius: '0 5px 5px 0 !important',\r\n        backgroundColor: '#999',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'no-wrap'\r\n    }),\r\n    singleValue : (provided) =>({\r\n        ...provided,\r\n        color: '#fff'\r\n    }),\r\n    indicatorSeparator: (provided)=>({\r\n        ...provided,\r\n        display: 'none'\r\n    }),\r\n    placeholder: (provided)=>({\r\n        ...provided,\r\n        color: '#fff',\r\n    }),    \r\n    \r\n}\r\n    const optionsCountries = countries.map(item=>({ value:item._id, label:  `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const drugsSelectOptions = drugs.map(item => ({value: item._id, label:  `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const distSelectOptions = dist.map(item => ({value: item._id, label:  `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const sdrSelectOptions = sdr.map(item => ({value: item._id, label: `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const optionsMfs = mfs.map(item=>({ value:item._id, label:  `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const optionsTds = tds.map(item => ({value: item._id, label:  `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n\r\n    return(\r\n        <div className='p-3 pb-5 pr-3 w-100 bg-light'>\r\n            <h3>{TranslateExp(lang, \"content.editing\")} {TranslateExp(lang, \"cruds.drc\")} {TranslateExp(lang, \"cruds.edit\")}</h3>\r\n            <Row className='pb-5'>\r\n                <Col md={9}>\r\n                    <Form onSubmit={e=>editDrc(e)}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.name\")}</Form.Label>\r\n                                            <Select \r\n                                                name='drugs' \r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"table.name\")}\r\n                                                options={drugsSelectOptions} \r\n                                                value={drugsSelectOptions.filter(option => option.value === result.drug_name)}\r\n                                                onChange={e => setResult({...result, drug_name : e.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.td\")}</Form.Label>\r\n                                            <Select name='drugs' \r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"products.td\")} \r\n                                                value={optionsTds.filter(({value}) => value == result.trademark)}\r\n                                                options={optionsTds} \r\n                                                onChange={e => setResult({...result, trademark : e.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.serialNum\")}</Form.Label>\r\n                                            <Form.Control \r\n                                                type = 'text' \r\n                                                placeholder = {TranslateExp(lang, \"table.serialNum\")} \r\n                                                defaultValue={result?.serial_number}\r\n                                                onChange={e => setResult({...result, serial_number : e.target.value})} \r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.shelfLife\")}</Form.Label>\r\n                                            <Form.Control size='sm' \r\n                                                required \r\n                                                defaultValue={formatDate(result?.shelf_life)}\r\n                                                type=\"date\"\r\n                                                onChange={e => setResult({...result, shelf_life : e.target.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"cruds.data\")} 40</Form.Label>\r\n                                            <Form.Control \r\n                                                size='sm' \r\n                                                required \r\n                                                type=\"date\" \r\n                                                defaultValue={formatDate(result?.shelf_life)}\r\n                                                onChange={e => setResult({...result, mode_40_date : e.target.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                   \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.dist\")} 40</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter}\r\n                                                placeholder={`${TranslateExp(lang, \"table.dist\")} 40`} \r\n                                                options={distSelectOptions} \r\n                                                value={distSelectOptions.filter(option => option.value === result?.mode_40_distributor)}\r\n                                                onChange={e => setResult({...result, mode_40_distributor : e.value})}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"cruds.data\")} 70</Form.Label>\r\n                                            <Form.Control \r\n                                                size='sm'  \r\n                                                type=\"date\" \r\n                                                defaultValue={formatDate(result?.shelf_life)}\r\n                                                onChange={e => setResult({...result, mode_70_date : e.target.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.dist\")} 70</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter}\r\n                                                placeholder={`${TranslateExp(lang, \"table.dist\")} 70`} \r\n                                                options={distSelectOptions} \r\n                                                value={distSelectOptions.filter(option => option.value === result?.mode_70_distributor)}\r\n                                                onChange={e => setResult({...result, mode_70_distributor : e.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.sender\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"table.sender\")} \r\n                                                options={sdrSelectOptions} \r\n                                                value={sdrSelectOptions.filter(option => option.value === result?.sender_company)}\r\n                                                onChange={e => setResult({...result, sender_company : e.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Row className={`p-0 m-0`}>\r\n                                                <Col md={8} className='p-0 m-0'>\r\n                                                <Form.Label>{TranslateExp(lang, \"table.customsPr\")}</Form.Label>\r\n                                                <Form.Control\r\n                                                    className={st.cost}\r\n                                                    onChange={e=>setCPrice({...cPrice, ccv : StrtoNumber(e.target.value)})} \r\n                                                    value={NumberToStr(cPrice['ccv'])}\r\n                                                    name={\"drug_ref_price\"} \r\n                                                    type = 'text' \r\n                                                    defaultValue={cPrice.ccv}\r\n                                                    placeholder = {TranslateExp(lang, \"table.customsPr\")}\r\n                                                    required\r\n                                                />\r\n                                                </Col>\r\n        \r\n                                                <Col md={4} className='p-0 m-0 text-center' style={{borderRadius: '0 5px 5px 0'}}>\r\n                                                    <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                                    <Select \r\n                                                        filterOption={customFilter}\r\n                                                        onChange={e => {setCPrice({...cPrice, ccy : e.value})}} \r\n                                                        className={st.select} styles={customStyles} \r\n                                                        value={optionsPrice.filter(option => option.value === cPrice.ccy)}\r\n                                                        options={optionsPrice} \r\n                                                        placeholder='...'\r\n                                                        required\r\n                                                    />           \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                        {\r\n                                            currencyListCp && Object.keys(currencyListCp).map((key)=>{\r\n                                                if(cPrice.ccv > 0 && key != cPrice.ccy.toLowerCase()){\r\n                                                    return(\r\n                                                        <div className='mt-2 d-inline-block'>\r\n                                                            <p className='d-inline-block'>{key}</p>\r\n                                                            <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{NumberToStr(currencyListCp[key])}</h6> \r\n                                                        </div>\r\n                                                    )                                            \r\n                                                } else {\r\n                                                    return \"\"\r\n                                                }\r\n\r\n                                            })\r\n                                        }\r\n                                        {\r\n                                            (currencyListCp)?\r\n                                            <div className='d-inline-block'>\r\n                                                <p className='d-inline-block' style={{fontSize: '13px', fontWeight: 500}}>{TranslateExp(lang, \"cruds.currVal\")} : </p>\r\n                                                <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{date}</h6> \r\n                                            </div>\r\n                                            : \"\"\r\n                                        }\r\n\r\n                                    </Col>\r\n                                \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Row className={`p-0 m-0`}>\r\n                                                <Col md={8} className='p-0 m-0'>\r\n                                                <Form.Label>{TranslateExp(lang, \"table.price\")}  </Form.Label>\r\n                                                <Form.Control\r\n                                                    className={st.cost}\r\n                                                    onChange={e=>setPrice({...price, ccv : StrtoNumber(e.target.value)})} \r\n                                                    value={NumberToStr(price['ccv'])}\r\n                                                    name={\"drug_ref_price\"} \r\n                                                    type = 'text' \r\n                                                    defaultValue={price.ccv}\r\n                                                    placeholder = {TranslateExp(lang, \"table.price\")} \r\n                                                    required\r\n                                                />\r\n                                                </Col>\r\n        \r\n                                                <Col md={4} className='p-0 m-0 text-center' style={{borderRadius: '0 5px 5px 0'}}>\r\n                                                    <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                                    <Select \r\n                                                        filterOption={customFilter}\r\n                                                        onChange={e => {setPrice({...price, ccy : e.value})}} \r\n                                                        className={st.select} styles={customStyles} \r\n                                                        value={optionsPrice.filter(option => option.value === price.ccy)}\r\n                                                        options={optionsPrice} \r\n                                                        placeholder='...'\r\n                                                        required\r\n                                                    />           \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    \r\n                                \r\n                                        {\r\n                                            currencyListP && Object.keys(currencyListP).map((key)=>{\r\n                                                if(price.ccv > 0 && key != price.ccy.toLowerCase()){\r\n                                                    return(\r\n                                                        <div className='mt-2 d-inline-block'>\r\n                                                            <p className='d-inline-block'>{key}</p>\r\n                                                            <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{NumberToStr(currencyListP[key])}</h6> \r\n                                                        </div>\r\n                                                    )                                            \r\n                                                } else {\r\n                                                    return \"\"\r\n                                                }\r\n\r\n                                            })\r\n                                        }\r\n                                        {\r\n                                            (currencyListP)?\r\n                                            <div className='d-inline-block'>\r\n                                                <p className='d-inline-block' style={{fontSize: '13px', fontWeight: 500}}>{TranslateExp(lang, \"cruds.currVal\")} : </p>\r\n                                                <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{date}</h6> \r\n                                            </div>\r\n                                            : \"\"\r\n                                        }\r\n                                        \r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                        <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                            <Form.Control \r\n                                                type = 'text' \r\n                                                placeholder = {TranslateExp(lang, \"cruds.curr\")} \r\n                                                defaultValue={result?.quantity}\r\n                                                onChange={e => setResult({...result, quantity : e.target.value})} \r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.mf\")}</Form.Label>\r\n                                            <Select\r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"table.mf\")} \r\n                                                value={optionsMfs.filter(({value}) => value == result.manufacturer)}\r\n                                                options={optionsMfs} \r\n                                                onChange={e => setResult({...result, manufacturer : e.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                   \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.mfc\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"table.mfc\")} \r\n                                                value={optionsCountries.filter(({value}) => value == result.manufacturer_country)}\r\n                                                options={optionsCountries} \r\n                                                onChange={e => setResult({...result, manufacturer_country : e.value})}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className='my-2'>\r\n                                    <Col><Button type=\"reset\" className={\"btn btn-block btn-warning\"}>{TranslateExp(lang, \"content.resetAll\")}</Button></Col>\r\n                                    <Col><Button type='submit' className={\"btn btn-block btn-success\"}>{TranslateExp(lang, \"content.save\")}</Button></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    </Col>\r\n                {\r\n                    status &&\r\n                        <Redirect to={\"/admin/drc\"}/>\r\n                }\r\n                <Col md={3}></Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction formatDate(date){\r\n    if(date){\r\n        const parsedDate = new Date(date).toISOString().substr(0, 10);\r\n        return parsedDate;\r\n    }\r\n}\r\n\r\nexport default DRCEdit;\r\n","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\drcAdd\\index.js",["753","754","755","756","757","758","759","760","761"],"import React, {useEffect, useState} from 'react';\r\nimport st from \"../../crud.module.scss\";\r\nimport {Button, Col, Row, Form} from \"react-bootstrap\";\r\nimport Select from \"../../../../components/reactSelect\";\r\nimport {DRCApi} from \"../../../../services/drcService\";\r\nimport {mfApi} from \"../../../../services/mfService\";\r\nimport {countryApi} from \"../../../../services/countryService\";\r\nimport {medApi} from \"../../../../services/medService\";\r\nimport {sdrApi} from \"../../../../services/sdrService\";\r\nimport {distApi} from \"../../../../services/distService\";\r\nimport {tradeMarkApi} from \"../../../../services/tdService\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {NumberToStr, StrtoNumber, customFilter} from '../../../../utils';\r\n\r\n\r\nfunction DRCAdd (props) {\r\n    const today = new Date();\r\n    const date = today.getDate()+'/'+(today.getMonth()+1)+'/'+today.getFullYear();\r\n    const [status,setStatus] = useState(false);\r\n    const [val, setVal] = useState('');\r\n    const [countries,setCountries] = useState([]);\r\n    const [drugs, setDrugs] = useState([]);\r\n    const [dist, setDist] = useState([]);\r\n    const [sdr, setSdr] = useState([]);\r\n    const [mfs,setMfs] = useState([]);\r\n    const [tds, setTds] = useState([]);\r\n    const {lang, TranslateExp} = props;\r\n    const [cPrice, setCPrice] = useState({\r\n        ccv: \"\",\r\n        ccy: \"\"\r\n    });\r\n\r\n    const [price, setPrice] = useState({\r\n        ccv: \"\",\r\n        ccy: \"\"\r\n    });\r\n\r\n    const [currencyListCp, setCurrencyListCp] = useState(null);\r\n    const [currencyListP, setCurrencyListP] = useState(null);\r\n\r\n    const[data,setData] = useState({\r\n        drug_name:\"\",\r\n        trademark:\"\",\r\n        serial_number:\"\",\r\n        shelf_life:\"\",\r\n        mode_70_date:\"\",\r\n        mode_70_distributor:\"\",\r\n        mode_40_date:\"\",\r\n        mode_40_distributor:\"\",\r\n        sender_company:\"\",\r\n        quantity:\"\",\r\n        manufacturer:\"\",\r\n        manufacturer_country:\"\",\r\n    });\r\n\r\n    const calculatePrice = ({type, body}) => {\r\n        DRCApi.getCurrencyList({...body, ccv: +body.ccv}).then(resp => {\r\n            if(resp.status == 200){\r\n                const cur = {};\r\n                const keys = Object.keys(resp.data.data);\r\n                if(type){\r\n                    setCurrencyListCp(resp.data.data)\r\n                    cur.cp_ccy = body.ccy;\r\n                    keys.forEach(key => {\r\n                        cur[\"cp_\" + key] = +resp.data.data[key]\r\n                    });\r\n                }else{\r\n                    setCurrencyListP(resp.data.data);\r\n                    cur.p_ccy = body.ccy;\r\n                    keys.forEach(key => {\r\n                        cur[\"p_\" + key] = +resp.data.data[key];\r\n                    })\r\n                }\r\n              \r\n                setData({...data,  ...cur});\r\n            }\r\n        })\r\n        setVal(val);\r\n    }\r\n\r\n    useEffect(()=> {\r\n        setCurrencyListCp(null);\r\n        if(cPrice.ccy != \"\" && cPrice.ccv != \"\" && !isNaN(cPrice.ccv)){\r\n            calculatePrice({type: 1, body: cPrice});\r\n        }\r\n    }, [cPrice]);\r\n\r\n    useEffect(() => {\r\n        setCurrencyListP(null);\r\n        if(price.ccy != \"\" && price.ccv != \"\" &&!isNaN(price.ccv)){\r\n            calculatePrice({type: 0, body: price});\r\n        }\r\n    }, [price]);\r\n\r\n    const getAllLists = () => {\r\n        medApi.getList().then(resp => setDrugs(resp.data.data));\r\n        distApi.getList().then(resp => setDist(resp.data.data));\r\n        sdrApi.getList().then(resp => setSdr(resp.data.data));\r\n        mfApi.getList().then(res=>{\r\n            setMfs(res.data.data);\r\n        });\r\n        countryApi.getList().then(res=>{\r\n            setCountries(res.data.data)\r\n        });\r\n        tradeMarkApi.getList().then(res => {\r\n            setTds(res.data.data);\r\n        });\r\n    };\r\n    useEffect(()=>{\r\n        getAllLists();\r\n    },[])\r\n\r\n    \r\n    const addDrc = e => {\r\n        e.preventDefault();\r\n        const res = {};\r\n\r\n        Object.keys(currencyListP).forEach(currency => {\r\n            res[`sm_${currency}`] = +(currencyListP[currency] * data.quantity).toFixed(2);\r\n        });\r\n\r\n        DRCApi.save({...data, ...res}).then(resp=>{\r\n            if (resp.status===200){\r\n                setStatus(true);\r\n            }\r\n        })\r\n        \r\n    };\r\n    const optionsPrice = [{value: \"USD\", label:\"$\"},{value: \"EUR\", label:\"€\"},{value: \"RUB\", label:\"₽\"},{value: \"UZS\", label:\"SO'M\"},];\r\n    const customStyles = {\r\n\r\n    control: (provided) => ({\r\n        ...provided,\r\n        borderRadius: '0 5px 5px 0 !important',\r\n        backgroundColor: '#999',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'no-wrap'\r\n    }),\r\n    singleValue : (provided) =>({\r\n        ...provided,\r\n        color: '#fff'\r\n    }),\r\n    indicatorSeparator: (provided)=>({\r\n        ...provided,\r\n        display: 'none'\r\n    }),\r\n    placeholder: (provided)=>({\r\n        ...provided,\r\n        color: '#fff',\r\n    }),    \r\n    \r\n    }\r\n    function resetAll(){\r\n        setData({\r\n            drug_name:\"\",\r\n            trademark: \"\",\r\n            serial_number:\"\",\r\n            shelf_life:\"\",\r\n            mode_70_date:\"\",\r\n            mode_70_distributor:\"\",\r\n            mode_40_date:\"\",\r\n            mode_40_distributor:\"\",\r\n            sender_company:\"\",\r\n            quantity: \"\",\r\n            p_ccy_rate:0,\r\n            cp_ccy_rate:0,\r\n            manufacturer: \"\",\r\n            manufacturer_country:\"\"\r\n        })\r\n        setPrice({ccv: \"\",ccy: \"\"});\r\n        setCPrice({ccv: \"\",ccy: \"\"});\r\n        setCurrencyListCp(null);\r\n        setCurrencyListP(null);\r\n    }\r\n    \r\n    const optionsCountries = countries.map(item=>({ \"value\":item._id, label: `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const drugsSelectOptions = drugs.map(item => ({value: item._id, label: `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const distSelectOptions = dist.map(item => ({value: item._id, label: `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const sdrSelectOptions =  sdr.map(item => ({value: item._id, label:`${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const optionsMfs = mfs.map(item =>({ \"value\":item._id, label: `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n    const optionsTds = tds.map(item =>({value: item._id, label: `${item.name_uz} (${item.counter?item.counter:0})`}));\r\n\r\n    return(\r\n        <div className='p-3 pb-5 pr-3 w-100 bg-light'>\r\n            <h3>{TranslateExp(lang, \"content.adding\")} {TranslateExp(lang, \"cruds.drc\")} {TranslateExp(lang, \"cruds.add\")}</h3>\r\n            <Row className='pb-5'>\r\n                <Col md={9}>\r\n                    <Form onSubmit={e=>addDrc(e)}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.name\")}</Form.Label>\r\n                                            <Select \r\n                                                id='drug_name' \r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"table.name\")} \r\n                                                options={drugsSelectOptions} \r\n                                                onChange={e => setData({...data, drug_name : e.value})}\r\n                                                value={drugsSelectOptions.filter(key=>key.value===data.drug_name)}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.td\")}</Form.Label>\r\n                                            <Select \r\n                                                id='trademark' \r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"products.td\")} \r\n                                                options={optionsTds} \r\n                                                onChange={e => setData({...data, trademark : e.value})}\r\n                                                value={optionsTds.filter(key=>key.value===data.trademark)}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                        <Form.Label>{TranslateExp(lang, \"table.serialNum\")}</Form.Label>\r\n                                            <Form.Control \r\n                                                id=\"serial_number\"\r\n                                                type = 'text' \r\n                                                placeholder = {TranslateExp(lang, \"table.serialNum\")} \r\n                                                onChange={e => setData({...data, serial_number : e.target.value})} \r\n                                                value={data.serial_number}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.shelfLife\")}</Form.Label>\r\n                                            <Form.Control \r\n                                                id=\"shelf_life\"\r\n                                                type=\"date\" \r\n                                                onChange={e => setData({...data, shelf_life : e.target.value})}\r\n                                                value={data.shelf_life}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"cruds.data\")} 70</Form.Label>\r\n                                            <Form.Control \r\n                                                id=\"mode_70_date\"\r\n                                                type=\"date\" \r\n                                                onChange={e => setData({...data, mode_70_date : e.target.value})}\r\n                                                value={data.mode_70_date}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.dist\")} 70</Form.Label>\r\n                                            <Select \r\n                                                id=\"mode_70_distributor\"\r\n                                                placeholder={`${TranslateExp(lang, \"table.dist\")} 70`} \r\n                                                filterOption={customFilter}\r\n                                                options={distSelectOptions} \r\n                                                onChange={e => setData({...data, mode_70_distributor : e.value})}\r\n                                                value={distSelectOptions.filter(key=>key.value===data.mode_70_distributor)}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"cruds.data\")} 40</Form.Label>\r\n                                            <Form.Control \r\n                                                id=\"mode_40_date\"\r\n                                                type=\"date\" \r\n                                                onChange={e => setData({...data, mode_40_date : e.target.value})}\r\n                                                value={data.mode_40_date}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                   \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.dist\")} 40</Form.Label>\r\n                                            <Select \r\n                                                id=\"mode_40_distributor\"\r\n                                                filterOption={customFilter} \r\n                                                placeholder={`${TranslateExp(lang, \"table.dist\")} 40`} \r\n                                                options={distSelectOptions} \r\n                                                onChange={e => setData({...data, mode_40_distributor : e.value})}\r\n                                                value={distSelectOptions.filter(key=>key.value===data.mode_40_distributor)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                \r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.sender\")}</Form.Label>\r\n                                            <Select \r\n                                                id=\"sender_company\"\r\n                                                filterOption={customFilter} \r\n                                                placeholder={TranslateExp(lang, \"table.sender\")} \r\n                                                options={sdrSelectOptions} \r\n                                                onChange={e => setData({...data, sender_company : e.value})}\r\n                                                value={sdrSelectOptions.filter(key=>key.value===data.sender_company)}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Row className={`p-0 m-0`}>\r\n                                                <Col md={8} className='p-0 m-0'>\r\n                                                <Form.Label>{TranslateExp(lang, \"table.customsPr\")}</Form.Label>\r\n                                                <Form.Control\r\n                                                    id='cPriceccv'\r\n                                                    lassName={st.cost}\r\n                                                    onChange={e=>setCPrice({...cPrice, ccv : StrtoNumber(e.target.value)})} \r\n                                                    value = {NumberToStr(cPrice['ccv'])}\r\n                                                    placeholder = {TranslateExp(lang, \"table.customsPr\")}\r\n                                                    required\r\n                                                />\r\n                                                </Col>\r\n        \r\n                                                <Col md={4} className='p-0 m-0 text-center' style={{borderRadius: '0 5px 5px 0'}}>\r\n                                                    <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                                    <Select \r\n                                                        id='cPriceccy'\r\n                                                        filterOption={customFilter} \r\n                                                        onChange={e => {setCPrice({...cPrice, ccy : e.value})}} \r\n                                                        className={st.select} \r\n                                                        styles={customStyles} \r\n                                                        options={optionsPrice}\r\n                                                        value={optionsPrice.filter(key=>key.value===cPrice.ccy)}\r\n                                                        placeholder='...'\r\n                                                        required\r\n                                                    />           \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    \r\n                                        {\r\n                                            currencyListCp && Object.keys(currencyListCp).map((key)=>{\r\n                                                if(cPrice.ccv > 0 && key != cPrice.ccy.toLowerCase()){\r\n                                                    return(\r\n                                                        <div className='mt-2 d-inline-block'>\r\n                                                            <p className='d-inline-block'>{key}</p>\r\n                                                            <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{NumberToStr(currencyListCp[key])}</h6> \r\n                                                        </div>\r\n                                                    )                                            \r\n                                                } else {\r\n                                                    return \"\"\r\n                                                }\r\n\r\n                                            })\r\n                                        }\r\n                                        {\r\n                                            (currencyListCp)?\r\n                                            <div className='d-inline-block'>\r\n                                                <p className='d-inline-block' style={{fontSize: '13px', fontWeight: 500}}>{TranslateExp(lang, \"cruds.currVal\")} : </p>\r\n                                                <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{date}</h6> \r\n                                            </div>\r\n                                            : \"\"\r\n                                        }\r\n                                    </Col>\r\n                                \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Row className={`p-0 m-0`}>\r\n                                                <Col md={8} className='p-0 m-0'>\r\n                                                <Form.Label>{TranslateExp(lang, \"table.price\")} </Form.Label>\r\n                                                <Form.Control\r\n                                                    id='priceccv'\r\n                                                    type = 'text' \r\n                                                    className={st.cost}\r\n                                                    onChange={e=>setPrice({...price, ccv : StrtoNumber(e.target.value)})} \r\n                                                    value={NumberToStr(price['ccv'])}\r\n                                                    placeholder = {TranslateExp(lang, \"table.price\")}\r\n                                                    required\r\n                                                />\r\n                                                </Col>\r\n        \r\n                                                <Col md={4} className='p-0 m-0 text-center' style={{borderRadius: '0 5px 5px 0'}}>\r\n                                                    <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                                    <Select \r\n                                                        id='priceccy'\r\n                                                        filterOption={customFilter} \r\n                                                        onChange={e => {setPrice({...price, ccy : e.value})}} \r\n                                                        value={optionsPrice.filter(key=>key.value===price.ccy)}\r\n                                                        className={st.select} \r\n                                                        styles={customStyles} \r\n                                                        options={optionsPrice} \r\n                                                        placeholder='...'\r\n                                                        required\r\n                                                    />           \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    \r\n                                        {\r\n                                            currencyListP && Object.keys(currencyListP).map((key)=>{\r\n                                                if(price.ccv > 0 && key != price.ccy.toLowerCase()){\r\n                                                    return(\r\n                                                        <div className='mt-2 d-inline-block'>\r\n                                                            <p className='d-inline-block'>{key}</p>\r\n                                                            <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{NumberToStr(currencyListP[key])}</h6> \r\n                                                        </div>\r\n                                                    )                                            \r\n                                                } else {\r\n                                                    return \"\"\r\n                                                }\r\n\r\n                                            })\r\n                                        }\r\n                                        {\r\n                                            (currencyListP)?\r\n                                            <div className='d-inline-block'>\r\n                                                <p className='d-inline-block' style={{fontSize: '13px', fontWeight: 500}}>{TranslateExp(lang, \"cruds.currVal\")} : </p>\r\n                                                <h6 disabled className={`${st.input_small} d-inline-block px-2`}>{date}</h6> \r\n                                            </div>\r\n                                            : \"\"\r\n                                        }\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                        <Form.Label>{TranslateExp(lang, \"table.qty\")}</Form.Label>\r\n                                            <Form.Control \r\n                                                id='quantity'\r\n                                                type = 'text' \r\n                                                placeholder = {TranslateExp(lang, \"table.qty\")} \r\n                                                onChange={e => setData({...data, quantity : e.target.value})} \r\n                                                value={data.quantity} \r\n                                                required   \r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.mf\")}</Form.Label>\r\n                                            <Select \r\n                                                id=\"manufacturer\"\r\n                                                filterOption={customFilter}\r\n                                                placeholder={TranslateExp(lang, \"table.mf\")} \r\n                                                options={optionsMfs} \r\n                                                onChange={e => setData({...data, manufacturer : e.value})}\r\n                                                value={optionsMfs.filter(key=>key.value === data.manufacturer)}\r\n                                                required\r\n                                                />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                   \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"table.mfc\")}</Form.Label>\r\n                                            <Select \r\n                                                id=\"manufacturer_country\"\r\n                                                placeholder={TranslateExp(lang, \"table.mfc\")} \r\n                                                options={optionsCountries} \r\n                                                onChange={e => setData({...data, manufacturer_country : e.value})}\r\n                                                value={optionsCountries.filter(key=>key.value===data.manufacturer_country)}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className='my-2'>\r\n                                    <Col><Button onClick={()=>resetAll()} className={\"btn btn-block btn-warning\"}>{TranslateExp(lang, \"content.resetAll\")}</Button></Col>\r\n                                    <Col><Button type='submit' disabled={!(currencyListP && currencyListCp)} className={\"btn btn-block btn-success\"}>{TranslateExp(lang, \"content.save\")}</Button></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    </Col>\r\n                {\r\n                    status &&\r\n                        <Redirect to={\"/admin/drc\"}/>\r\n                }\r\n                <Col md={3}></Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DRCAdd;","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\drugsEdit\\index.js",["762","763","764","765"],"import React, {useEffect, useState} from \"react\";\r\nimport Select from '../../../../components/reactSelect';\r\nimport {dfApi, dtApi} from \"../../../../services/drugsService\";\r\nimport {dfgApi, medApi} from \"../../../../services/medService\";\r\nimport {mnnApi} from '../../../../services/mnnService'\r\nimport {Button, Col, Row, Form} from \"react-bootstrap\";\r\nimport st from \"../../crud.module.scss\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport {tpgApi} from \"../../../../services/tpgService\";\r\nimport ToastEx from \"../../../../components/toasts\";\r\nimport {NumberToStr, StrtoNumber, customFilter} from '../../../../utils';\r\n\r\nfunction DrugsEdit (props) {\r\n    const {id} = props.match.params;\r\n    const {lang, TranslateExp} = props;\r\n    const[status,setStatus] = useState(false);\r\n    const[dts,setDts] = useState([]);\r\n    const[dfs,setDfs] = useState([]);\r\n    const[tpg,setTpg] = useState([]);\r\n    const[mnn,setMnn] = useState([]);\r\n    const[dfg,setDfg] = useState([]);\r\n    const[show,setShow] = useState(false);\r\n    const[response,setResponse] = useState('');\r\n\r\n    const[result,setResult] = useState({\r\n        name_uz:\"\",\r\n        drug_type:\"\",\r\n        drug_inn:\"\",\r\n        drug_form:\"\",\r\n        drug_farm_group:\"\",\r\n        drug_ts_group:\"\",\r\n        drug_ref_price:\"\",\r\n        drug_ref_price_ccy:\"\",\r\n    });\r\n    const getAllLists = async () => {\r\n        dtApi.getList().then(res=>{\r\n            setDts(res.data.data)\r\n        });\r\n        dfApi.getList().then(res=>{\r\n            setDfs(res.data.data)\r\n        });\r\n        mnnApi.getList().then(res=>{\r\n            setMnn(res.data.data)            \r\n        })\r\n        dfgApi.getList().then(res=>{\r\n            setDfg(res.data.data)\r\n        });\r\n        tpgApi.getList().then(res=>{\r\n            setTpg(res.data.data)\r\n        });\r\n\r\n    };\r\n\r\n    const getDrugsList=()=>{\r\n        medApi.getList().then(res=>{\r\n                const drug = res.data.data.find(d => d._id == id);\r\n                setResult({\r\n                    ...result,\r\n                    name_uz:drug.name_uz,\r\n                    drug_type:drug.drug_type._id,\r\n                    drug_inn:drug.drug_inn._id,\r\n                    drug_form:drug.drug_form._id,\r\n                    drug_farm_group:drug.drug_farm_group._id,\r\n                    drug_ts_group:drug.drug_ts_group._id,\r\n                    drug_ref_price:new String(drug.drug_ref_price?.$numberDecimal),\r\n                    drug_ref_price_ccy: drug.drug_ref_price_ccy,\r\n                    is_active:drug.is_active,\r\n                    is_deleted:drug.is_deleted\r\n                });\r\n        })\r\n    };\r\n\r\n    useEffect(async ()  => {\r\n        getAllLists();\r\n        getDrugsList();\r\n    },[]);\r\n\r\n    const saveEditingDrug = e => {\r\n        e.preventDefault();\r\n        medApi.edit(id, result).then(resp=>{\r\n            setStatus(true);\r\n            setResponse({\r\n                message:resp.data.message.ru,\r\n                status:resp.data.status\r\n            });\r\n            setShow(true)\r\n        });\r\n    };\r\n    const customStyles = {\r\n\r\n        control: (provided) => ({\r\n            ...provided,\r\n            borderRadius: '0 5px 5px 0 !important',\r\n            backgroundColor: '#999',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            flexWrap: 'no-wrap'\r\n        }),\r\n        singleValue : (provided) =>({\r\n            ...provided,\r\n            color: '#fff'\r\n        }),\r\n        indicatorSeparator: (provided)=>({\r\n            ...provided,\r\n            displat: 'none'\r\n        }),\r\n        placeholder: (provided)=>({\r\n            ...provided,\r\n            color: '#fff',\r\n        }),    \r\n        \r\n    }\r\n    const optionsPrice = [{value: \"USD\", label:\"$\"},{value: \"EUR\", label:\"€\"},{value: \"RUB\", label:\"₽\"},{value: \"UZS\", label:\"SO'M\"}];\r\n    const optionsDts = dts.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\n    const optionsMnn = mnn.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\n    const optionsDfs = dfs.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\n    const optionsTpg = tpg.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\n    const optionsDfg = dfg.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\n\r\n    return(\r\n        <div className='p-3 pb-5 pr-3 w-100 bg-light'>\r\n            <h3>{TranslateExp(lang, \"content.editing\")} {TranslateExp(lang, \"cruds.med\")} {TranslateExp(lang, \"cruds.edit\")}</h3>\r\n            <Row className='pb-5'>\r\n                <ToastEx {...props} response={response} show={show} setShow={setShow}/>\r\n                <Col md={9}>\r\n                    <Form onSubmit={e=>saveEditingDrug(e)}>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.name\")}</Form.Label>\r\n                            <Form.Control\r\n                                defaultValue={result?.name_uz}\r\n                                onChange={e=>setResult({...result,name_uz: e.target.value})}\r\n                                name={\"name_uz\"} \r\n                                type = 'text' \r\n                                placeholder = {TranslateExp(lang, \"table.name\")} \r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Row className='p-0 m-0'>\r\n                                                <Col md={8} className='p-0 m-0'>\r\n                                                <Form.Label>{TranslateExp(lang, \"cruds.refPr\")}</Form.Label>\r\n                                                <Form.Control\r\n                                                    defaultValue={result?.drug_ref_price}\r\n                                                    onChange={e=>setResult({...result,drug_ref_price: StrtoNumber(e.target.value)})}\r\n                                                    value={NumberToStr(result['drug_ref_price'])}\r\n                                                    name={\"drug_ref_price\"} type = 'text' \r\n                                                    placeholder = {TranslateExp(lang, \"cruds.refPr\")} \r\n                                                    required\r\n                                                />\r\n                                                </Col>\r\n                                                <Col md={4} className='p-0 m-0 text-center'>\r\n                                                    <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                                    <Select \r\n                                                        filterOption={customFilter}\r\n                                                        onChange={e=>setResult({...result,drug_ref_price_ccy: e.value})} \r\n                                                        className={st.select} \r\n                                                        styles={customStyles} \r\n                                                        options={optionsPrice} \r\n                                                        value={optionsPrice.filter(option => option.value === result?.drug_ref_price_ccy)}\r\n                                                        required\r\n                                                    />           \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.mnn\")}</Form.Label>\r\n                                            <Select\r\n                                                filterOption={customFilter}\r\n                                                name='drug_inn' \r\n                                                placeholder={TranslateExp(lang, \"products.mnn\")}\r\n                                                defaultValue={\"result?.drug_inn\"}\r\n                                                value={optionsMnn.filter(({value}) => value === result?.drug_inn)}                                                \r\n                                                options={optionsMnn}\r\n                                                onChange={e=>{setResult({...result,drug_inn: e.value})}}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.df\")} </Form.Label>\r\n                                            <Select\r\n                                                filterOption={customFilter}\r\n                                                name='drug_form' \r\n                                                placeholder={TranslateExp(lang, \"products.df\")}\r\n                                                defaultValue={\"result?.drug_form\"}\r\n                                                value={optionsDfs.filter(({value}) => value === result?.drug_form)}                                                \r\n                                                options={optionsDfs}\r\n                                                onChange={e=>{setResult({...result,drug_form: e.value})}}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.dfg\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter}\r\n                                                name='drug_farm_group' \r\n                                                placeholder={TranslateExp(lang, \"products.dfg\")}\r\n                                                value={optionsDfg.filter(({value}) => value === result?.drug_farm_group)}\r\n                                                options={optionsDfg}\r\n                                                onChange={e=>{setResult({...result,drug_farm_group: e.value})}}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.tpg\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter}\r\n                                                name='drug_ts_group'\r\n                                                placeholder={TranslateExp(lang, \"products.tpg\")}\r\n                                                value={optionsTpg.filter(({value}) => value === result?.drug_ts_group)}\r\n                                                options={optionsTpg} \r\n                                                onChange={e=>{setResult({...result,drug_ts_group: e.value})}}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label name=\"drug_type\">{TranslateExp(lang, \"products.dt\")}</Form.Label>\r\n                                            <Select\r\n                                                filterOption={customFilter}\r\n                                                name='drug_type' \r\n                                                placeholder={TranslateExp(lang, \"products.dt\")}\r\n                                                value={optionsDts.filter(({value}) => value === result?.drug_type)}\r\n                                                options={optionsDts} \r\n                                                onChange={e=>{setResult({...result,drug_type: e.value})}}\r\n                                                required\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className='my-2'>\r\n                                    <Col><Link className='btn btn-warning w-100 text-white text-decoration-none' to='/admin/drugs'>{TranslateExp(lang, \"content.cancel\")}</Link></Col>\r\n                                    <Col><Button type='submit' className={\"btn btn-block btn-success\"}>{TranslateExp(lang, \"content.save\")}</Button></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n                {\r\n                    status &&\r\n                    <Redirect to={\"/admin/drugs\"}/>\r\n                }\r\n                <Col md={3}>\r\n\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrugsEdit;\r\n","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drc\\drcTable\\index.js",["766","767","768","769","770"],"import React, {useEffect, useState} from \"react\";\r\nimport st from \"../../../../components/dataTable/dataTable.module.scss\";\r\nimport ModalDeleteCrud from '../../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../../components/modalStatus';\r\nimport ModalSoftDelete from \"../../../../components/modalSoftDelete\";\r\nimport ToastEx from \"../../../../components/toasts\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Select from 'react-select';\r\nimport CrudTable from '../../../../components/crudTable'\r\nimport {DRCApi} from \"../../../../services/drcService\";\r\nimport {DateFormat, NumberToStr} from '../../../../utils';\r\n\r\n\r\nfunction DRCTable(props){\r\n    const {lang, TranslateExp, uploadExcel, setApi} = props;\r\n    const title = TranslateExp(lang, \"products.drc\");\r\n    const history = useHistory();\r\n    const [priceSumValue, setPriceSumValue] = useState(\"usd\");\r\n    const [priceValue, setPriceValue] = useState(\"usd\");\r\n    const [priceCustomsValue, setPriceCustomsValue] = useState(\"usd\");\r\n    const optionsPrice = [{value: \"usd\", label:\"$\"},{value: \"eur\", label:\"€\"},{value: \"rub\", label:\"₽\"},{value: \"uzs\", label:\"SO'M\"}];\r\n    const customStyles = {\r\n        container: (provided) => ({\r\n            ...provided,\r\n            width: '85px',\r\n            marginLeft: '8px',\r\n            fontSize: '14px',\r\n            fontWeight: 500\r\n        })\r\n        \r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            Header: \"№\",\r\n            accessor:'counter',\r\n            notSort:true,\r\n        },\r\n        {\r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: 'drug_name.name_uz',\r\n        },{\r\n            Header: TranslateExp(lang, \"table.serialNum\"),\r\n            accessor: 'serial_number',\r\n        },{\r\n            Header: TranslateExp(lang, \"table.shelfLife\"),\r\n            accessor: 'shelf_life',\r\n        },\r\n        {\r\n            Header: TranslateExp(lang, \"table.sender\"),\r\n            accessor: 'sender_company.name_uz',\r\n        },\r\n        {\r\n            Header: ()=>{\r\n                return(\r\n                    <span className={st.price__th}>\r\n                        {TranslateExp(lang, \"table.customsPr\")}\r\n                        <Select \r\n                            options={optionsPrice}\r\n                            disabled={true}\r\n                            value={optionsPrice.filter(f=>f.value === priceCustomsValue)}\r\n                            onChange={(e)=>setPriceCustomsValue(e.value)}\r\n                            styles={customStyles}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n            HeaderTitle: TranslateExp(lang, \"table.name\"),\r\n            accessor: `customs_price.${priceCustomsValue}`,\r\n            Cell:(props)=>{\r\n                return NumberToStr(props?.value);\r\n            }\r\n        },\r\n        {\r\n            Header: ()=>{\r\n                return(\r\n                    <span className={st.price__th}>\r\n                        {TranslateExp(lang, \"table.price\")}\r\n                        <Select \r\n                            options={optionsPrice}\r\n                            disabled={true}\r\n                            value={optionsPrice.filter(f=>f.value===priceValue)}\r\n                            onChange={(e)=>setPriceValue(e.value)}\r\n                            styles={customStyles}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n            HeaderTitle: TranslateExp(lang, \"table.price\"),\r\n            accessor: `price.${priceValue}`,\r\n            Cell:(props)=>{\r\n                return NumberToStr(props?.value);\r\n            }\r\n        },\r\n        {\r\n            Header: TranslateExp(lang, \"table.qty\"),\r\n            accessor: 'quantity',\r\n        },\r\n        {   \r\n            Header: ()=>{\r\n            return(\r\n                <span className={st.price__th}>\r\n                    {TranslateExp(lang, \"table.count\")}\r\n                    <Select \r\n                        options={optionsPrice}\r\n                        disabled={true}\r\n                        value={optionsPrice.filter(f=>f.value===priceSumValue)}\r\n                        onChange={(e)=>setPriceSumValue(e.value)}\r\n                        styles={customStyles}\r\n                    />\r\n                </span>\r\n            )\r\n            },\r\n            HeaderTitle: TranslateExp(lang, \"table.count\"),\r\n            accessor: `sum_price.${priceSumValue}`,\r\n            Cell:(props)=>{\r\n                return NumberToStr(props?.value);\r\n            }\r\n        },\r\n    ];\r\n    const[loading, setLoading] = useState(true);\r\n    const[show, setShow] = useState(false);\r\n    const[response, setResponse] = useState('');\r\n    const[isOpenDelete,setIsOpenDelete] = useState(false);\r\n    const[isOpenStatus, setIsOpenStatus] = useState(false);\r\n    const[delId,setDelId] = useState(null);\r\n    const[respData,setRespData] = useState([])\r\n    const[filterStatus, setFilterStatus] = useState(\"all\");\r\n    const[sfDeletedId, setSfDeletedId] = useState(undefined);\r\n    const[isOpenSoftDelete, setIsOpenSoftDelete] = useState(false);\r\n    const filter = () => {\r\n        switch(filterStatus){\r\n            case \"all\":\r\n                DRCApi.getList().then(resp => { \r\n                    ChangeData(resp.data.data)\r\n                    setLoading(false) \r\n                })\r\n                break;\r\n            case \"active\":\r\n                DRCApi.getActiveList().then(resp => {\r\n                    ChangeData(resp.data.data)\r\n                    setLoading(false);\r\n                    console.log(resp.data.data);\r\n                });\r\n                break;\r\n            case \"unactive\":\r\n                DRCApi.getUnactiveList().then(resp => {\r\n                    ChangeData(resp.data.data)\r\n                    setLoading(false)\r\n                })\r\n                break;\r\n            case \"deleted\":\r\n                DRCApi.getDeletedList().then(resp => {\r\n                    ChangeData(resp.data.data)\r\n                    setLoading(false)\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    function ChangeData(data){\r\n        const DATA =[];\r\n        data.forEach((key,id)=>{\r\n            DATA.push({...key, counter: id+1, shelf_life: DateFormat(key.shelf_life)});\r\n        })\r\n        setRespData(DATA);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        filter();\r\n    }, [filterStatus]);\r\n\r\n    useEffect(() => {\r\n        setApi(DRCApi);\r\n    }, []);\r\n\r\n\r\n    const DRCAdd = e => {\r\n        history.push(\"/admin/drc/add\");\r\n       \r\n    };\r\n\r\n    const DRCEdit = (id) => {\r\n        history.push(`/admin/drc/update/${id}`);\r\n    };\r\n\r\n    function del(id) {\r\n        const is_deleted = respData.find(data => data._id == id).is_deleted;\r\n        DRCApi.delete(id, {is_deleted: !is_deleted}).then(res=>{\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        })\r\n        closeDelModal();\r\n    }\r\n    function softDelete(id){\r\n        DRCApi.softDelete(id).then(res => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status:res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        });\r\n        closeSoftDeleteModal();\r\n    }\r\n\r\n    function changeStatus(id){\r\n        const is_active = respData.find(data => data._id === id).is_active;\r\n        DRCApi.changeStatus(id, {is_active: !is_active}).then(resp => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: resp.data.message.ru,\r\n                status:resp.data.status\r\n            });\r\n            filter();\r\n        });\r\n        closeStatusModal();\r\n    }\r\n\r\n    const showModalSoftDelete = (id) => {\r\n        setSfDeletedId(id);\r\n        setIsOpenSoftDelete(true);\r\n    }\r\n\r\n    const closeSoftDeleteModal = () => {\r\n        setIsOpenSoftDelete(false);\r\n    }\r\n    const showModalDel=(id)=>{\r\n        const is_deleted = respData.find(d => d._id == id).is_deleted;\r\n        setDelId({id, is_deleted});;\r\n        setIsOpenDelete(true);\r\n    }\r\n\r\n    const closeDelModal = () => {\r\n        setIsOpenDelete(false);\r\n    }\r\n    \r\n    const showModalStatus = (id) => {\r\n        setDelId(id);\r\n        setIsOpenStatus(true);\r\n    }\r\n    const closeStatusModal = () => {\r\n        setIsOpenStatus(false);\r\n    }\r\n    return(\r\n        <>\r\n            <ToastEx {...props} response={response} show={show} setShow={setShow}/>\r\n            <CrudTable \r\n                {...props}\r\n                title={title}\r\n                data={respData} \r\n                columns={columns} \r\n                loading={loading} \r\n                showModalStatus={showModalStatus} \r\n                showModalDel={showModalDel}\r\n                showModalSoftDelete={showModalSoftDelete}\r\n                uploadExcel={uploadExcel}\r\n                edit={DRCEdit}\r\n                toggle={DRCAdd}\r\n                filterStatus={filterStatus}\r\n                setFilterStatus={setFilterStatus}\r\n            />\r\n            <ModalDeleteCrud lang={lang} TranslateExp={TranslateExp} del={del} delId={delId} closeDelModal={closeDelModal} isOpenDelete={isOpenDelete}/>\r\n            <ModalStatus lang={lang} TranslateExp={TranslateExp}  changeStatus={changeStatus} id={delId} closeStatusModal={closeStatusModal} isOpenStatus={isOpenStatus} />\r\n            <ModalSoftDelete lang={lang} TranslateExp={TranslateExp} softDelete={softDelete} sfDeletedId={sfDeletedId} closeSoftDeleteModal={closeSoftDeleteModal} isOpenSoftDelete={isOpenSoftDelete} />\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default DRCTable;\r\n","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\drugsTable\\index.js",["771","772","773","774","775","776"],"import React, {useEffect, useState, useContext} from \"react\";\r\nimport ModalDeleteCrud from '../../../../components/modalDeleteCrud'\r\nimport ModalStatus from '../../../../components/modalStatus';\r\nimport ModalSoftDelete from \"../../../../components/modalSoftDelete\";\r\nimport ToastEx from \"../../../../components/toasts\";\r\nimport CrudTable from '../../../../components/crudTable'\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {medApi} from \"../../../../services/medService\";\r\nimport UserContext from \"../../../../context/UserContext\";\r\n\r\nfunction DrugsTable(props){\r\n    const {setStateValue} = useContext(UserContext);\r\n    const {lang, TranslateExp, uploadExcel, setApi} = props;\r\n    const title = TranslateExp(lang, \"products.med\");\r\n    const history = useHistory();\r\n    const columns=[\r\n        {\r\n            Header: \"№\",\r\n            accessor:'counter',\r\n            notSort:true\r\n        },\r\n        {\r\n            Header: TranslateExp(lang, \"table.name\"),\r\n            accessor: \"name_uz\",\r\n        },\r\n        {\r\n            Header: TranslateExp(lang, \"products.mnn\"),\r\n            accessor: \"drug_inn.name_uz\",\r\n        }\r\n    ];\r\n    const [loading, setLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [response, setResponse] = useState('');\r\n    const[isOpenDelete,setIsOpenDelete] = useState(false);\r\n    const[isOpenStatus, setIsOpenStatus] = useState(false);\r\n    const[delId,setDelId] = useState(null);\r\n    const[respData,setRespData] = useState([{}])\r\n    const[filterStatus, setFilterStatus] = useState(\"all\");\r\n    const[sfDeletedId, setSfDeletedId] = useState(undefined);\r\n    const[isOpenSoftDelete, setIsOpenSoftDelete] = useState(false);\r\n      const filter = () => {\r\n        switch(filterStatus){\r\n            case \"all\":\r\n            medApi.getList().then(resp => { \r\n                    ChangeData(resp.data.data)\r\n                    setLoading(false);\r\n                });\r\n                break;\r\n            case \"active\":\r\n                medApi.getActiveList().then(resp => { \r\n                        ChangeData(resp.data.data)\r\n                        setLoading(false);\r\n                    })\r\n                break;\r\n            case \"unactive\":\r\n                medApi.getUnactiveList().then(resp => {\r\n                        ChangeData(resp.data.data)\r\n                        setLoading(false)\r\n                    })\r\n                break;\r\n            case \"deleted\":\r\n                medApi.getDeletedList().then(resp => {\r\n                        ChangeData(resp.data.data)\r\n                        setLoading(false)\r\n                    })\r\n                break;\r\n        }\r\n\r\n    }\r\n    function ChangeData(data){\r\n        const DATA =[];\r\n        data.forEach((key,id)=>{\r\n            DATA.push({...key, counter: id+1});\r\n        })\r\n        setRespData(DATA);\r\n    }\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        filter();\r\n    }, [filterStatus]);\r\n    useEffect(() => {\r\n        setApi(medApi);\r\n    }, []);\r\n    const toggle = ()=> {\r\n        history.push(\"/admin/drugs/add\");\r\n    };\r\n    const edit = (id) => {\r\n        history.push(`/admin/drugs/update/${id}`);\r\n    };\r\n    function del(id) {\r\n        const is_deleted = respData.find(data => data._id == id).is_deleted;\r\n        medApi.delete(id, {is_deleted: !is_deleted}).then(res=>{\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status: res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        })\r\n        closeDelModal();\r\n    }\r\n    function softDelete(id){\r\n        medApi.softDelete(id).then(res => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: res.data.message.ru,\r\n                status:res.data.status\r\n            });\r\n            setLoading(true);\r\n            filter();\r\n        });\r\n        closeSoftDeleteModal();\r\n    }\r\n    function changeStatus(id){\r\n        const is_active = respData.find(data => data._id === id).is_active;\r\n        medApi.changeStatus(id, {is_active: !is_active}).then(resp => {\r\n            setShow(true);\r\n            setResponse({\r\n                message: resp.data.message.ru,\r\n                status:resp.data.status\r\n            });\r\n            filter();\r\n        });\r\n        closeStatusModal();\r\n    }\r\n\r\n    const showModalDel=(id)=>{\r\n        const is_deleted = respData.find(d => d._id == id).is_deleted;\r\n        setDelId({id, is_deleted});;\r\n        setIsOpenDelete(true);\r\n    }\r\n    const showModalSoftDelete = (id) => {\r\n        setSfDeletedId(id);\r\n        setIsOpenSoftDelete(true);\r\n    }\r\n\r\n    const closeSoftDeleteModal = () => {\r\n        setIsOpenSoftDelete(false);\r\n    }\r\n\r\n    const closeDelModal = () => {\r\n        setIsOpenDelete(false);\r\n    }\r\n\r\n    const showModalStatus = (id) => {\r\n        setDelId(id);\r\n        setIsOpenStatus(true);\r\n    }\r\n\r\n    const closeStatusModal = () => {\r\n        setIsOpenStatus(false);\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <ToastEx {...props} response={response} show={show} setShow={setShow}/>\r\n            <CrudTable\r\n                {...props} \r\n                title={title}\r\n                data={respData} \r\n                columns={columns} \r\n                loading={loading} \r\n                showModalStatus={showModalStatus} \r\n                showModalDel={showModalDel}\r\n                showModalSoftDelete={showModalSoftDelete}\r\n                uploadExcel={uploadExcel}\r\n                edit={edit}\r\n                toggle={toggle}\r\n                filterStatus={filterStatus}\r\n                setFilterStatus={setFilterStatus}\r\n            />\r\n            <ModalDeleteCrud \r\n                lang={lang} \r\n                TranslateExp={TranslateExp} \r\n                del={del} \r\n                delId={delId} \r\n                closeDelModal={closeDelModal} \r\n                isOpenDelete={isOpenDelete}\r\n            />\r\n            <ModalStatus lang={lang} TranslateExp={TranslateExp} changeStatus={changeStatus} id={delId} closeStatusModal={closeStatusModal} isOpenStatus={isOpenStatus} />\r\n            <ModalSoftDelete lang={lang} TranslateExp={TranslateExp} softDelete={softDelete} sfDeletedId={sfDeletedId} closeSoftDeleteModal={closeSoftDeleteModal} isOpenSoftDelete={isOpenSoftDelete} />\r\n        </>\r\n    )\r\n    \r\n}\r\nexport default DrugsTable;\r\n","F:\\farmaFinal\\farma\\src\\pages\\cruds\\drugs\\drugsAdd\\index.js",["777"],"import React, {useEffect, useState} from 'react';\r\nimport Select from '../../../../components/reactSelect';\r\nimport st from \"../../crud.module.scss\";\r\nimport {Button, Col, Container, Row, Form} from \"react-bootstrap\";\r\nimport {dfgApi, medApi} from \"../../../../services/medService\";\r\nimport {dtApi,dfApi} from \"../../../../services/drugsService\";\r\nimport {mnnApi} from \"../../../../services/mnnService\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {tpgApi} from \"../../../../services/tpgService\";\r\nimport {NumberToStr, StrtoNumber, customFilter} from '../../../../utils';\r\nfunction DrugsAdd (props) {\r\n\r\n    const{lang, TranslateExp} = props;\r\n    const[status,setStatus] = useState(false);\r\n    const[dts,setDts] = useState([]);\r\n    const[dfs,setDfs] = useState([]);\r\n    const[mnn, setMnn] = useState([])\r\n    const[tpg,setTpg] = useState([]);\r\n    const[dfg,setDfg] = useState([]);\r\n    const[data,setData] = useState({\r\n        name_uz:\"\",\r\n        drug_ref_price:\"\",\r\n        drug_ref_price_ccy:\"\",\r\n        drug_inn:\"\",\r\n        drug_form:\"\",\r\n        drug_farm_group:\"\",\r\n        drug_ts_group:\"\",\r\n        drug_type:\"\"\r\n    });\r\n    const getAllLists = () => {\r\n        dtApi.getList().then(res=>{\r\n            setDts(res.data.data)\r\n        });\r\n        dfApi.getList().then(res=>{\r\n            setDfs(res.data.data)\r\n        });\r\n        mnnApi.getList().then(res=>{\r\n            setMnn(res.data.data)            \r\n        })\r\n        dfgApi.getList().then(res=>{\r\n            setDfg(res.data.data)\r\n        });\r\n        tpgApi.getList().then(res=>{\r\n            setTpg(res.data.data)\r\n        });\r\n\r\n    };\r\n    useEffect(()=>{\r\n        getAllLists();\r\n    },[])\r\n\r\n    const addDrug = e => {\r\n        e.preventDefault();\r\n\r\n        medApi.save(data).then(res=>{\r\n            if (res.status===200){\r\n                setStatus(res.status)\r\n            }\r\n        })\r\n    };\r\n    const optionsPrice = [{value: \"USD\", label:\"$\"},{value: \"EUR\", label:\"€\"},{value: \"RUB\", label:\"₽\"},{value: \"UZS\", label:\"SO'M\"},];\r\n    const customStyles = {\r\n\r\n    control: (provided) => ({\r\n        ...provided,\r\n        borderRadius: '0 5px 5px 0 !important',\r\n        backgroundColor: '#999',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'no-wrap'\r\n    }),\r\n    singleValue : (provided) =>({\r\n        ...provided,\r\n        color: '#fff'\r\n    }),\r\n    indicatorSeparator: (provided)=>({\r\n        ...provided,\r\n        display: 'none'\r\n    }),\r\n    placeholder: (provided)=>({\r\n            ...provided,\r\n            color: '#fff',\r\n        }),\r\n    menu: (provided)=>({\r\n        ...provided,\r\n        zIndex: 10\r\n    })\r\n}\r\nfunction resetAll(){\r\n    setData({\r\n        name_uz:\"\",\r\n        drug_ref_price:\"\",\r\n        drug_ref_price_ccy:\"\",\r\n        drug_inn:\"\",\r\n        drug_form:\"\",\r\n        drug_farm_group:\"\",\r\n        drug_ts_group:\"\",\r\n        drug_type:\"\",\r\n    })\r\n}\r\nconst optionsDts = dts.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\nconst optionsDfs = dfs.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\nconst optionsMnn = mnn.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\nconst optionsTpg = tpg.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\nconst optionsDfg = dfg.map(item=>({ value:item._id, label: `${item.name_uz} (${item.counter})`}));\r\n\r\nuseEffect(()=>console.log(data),[data])\r\n    return(\r\n        <div className='p-3 pb-5 pr-5 bg-light w-100'>\r\n            <h3>{TranslateExp(lang, \"content.adding\")} {TranslateExp(lang, \"cruds.med\")} {TranslateExp(lang, \"cruds.add\")}</h3>\r\n            <Row className='pb-5'>\r\n                <Col md={9}>\r\n                    <Form onSubmit={e=>addDrug(e)}>\r\n                        <Form.Group>\r\n                            <Form.Label>{TranslateExp(lang, \"table.name\")}</Form.Label>\r\n                            <Form.Control \r\n                                onChange={e=>setData({...data,name_uz: e.target.value})}\r\n                                id=\"name_uz\" \r\n                                value={data.name_uz}\r\n                                type = 'text' \r\n                                placeholder = {TranslateExp(lang, \"table.name\")}\r\n                                required \r\n                                />\r\n                        </Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Row className={`p-0 m-0`}>\r\n                                                <Col md={8} className='p-0 m-0'>\r\n                                                <Form.Label>{TranslateExp(lang, \"cruds.refPr\")} </Form.Label>\r\n                                                <Form.Control\r\n                                                    className={st.cost}\r\n                                                    onChange={e=>setData({...data, drug_ref_price: StrtoNumber(e.target.value)})} \r\n                                                    value={NumberToStr(data['drug_ref_price'])}\r\n                                                    id=\"drug_ref_price\" \r\n                                                    type = 'text' \r\n                                                    placeholder = {TranslateExp(lang, \"cruds.refPr\")} \r\n                                                    required\r\n                                                />\r\n                                                </Col>\r\n        \r\n                                                <Col md={4} className='p-0 m-0 text-center' style={{borderRadius: '0 5px 5px 0'}}>\r\n                                                    <Form.Label>{TranslateExp(lang, \"cruds.curr\")}</Form.Label>\r\n                                                    <Select \r\n                                                        id=\"drug_ref_price_ccy\"\r\n                                                        filterOption={customFilter} \r\n                                                        onChange={e=>setData({...data,drug_ref_price_ccy: e.value})} \r\n                                                        value={optionsPrice.filter(key=> key.value === data.drug_ref_price_ccy)}\r\n                                                        className={st.select} \r\n                                                        styles={customStyles} \r\n                                                        options={optionsPrice} \r\n                                                        placeholder='...'\r\n                                                        required\r\n                                                        />           \r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    \r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.mnn\")}</Form.Label>\r\n                                            <Select\r\n                                                id='drug_inn'\r\n                                                placeholder={TranslateExp(lang, \"products.mnn\")}\r\n                                                filterOption={customFilter}\r\n                                                options={optionsMnn}\r\n                                                onChange={e=>{setData({...data,drug_inn: e.value})}}\r\n                                                value={optionsMnn.filter(key=> key.value === data.drug_inn)}\r\n                                                required\r\n                                            />\r\n                                         </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.df\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter} \r\n                                                id='drug_form' \r\n                                                placeholder={TranslateExp(lang, \"products.df\")} \r\n                                                options={optionsDfs} \r\n                                                onChange={e=>{setData({...data,drug_form: e.value})}}\r\n                                                value={optionsDfs.filter(key=> key.value === data.drug_form)}\r\n                                                required\r\n                                                />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.dfg\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter} \r\n                                                id='drug_farm_group' \r\n                                                placeholder={TranslateExp(lang, \"products.dfg\")} \r\n                                                options={optionsDfg} \r\n                                                onChange={e=>{setData({...data,drug_farm_group: e.value})}}\r\n                                                value={optionsDfg.filter(key=> key.value === data.drug_farm_group)}\r\n                                                required\r\n                                                />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group>\r\n                                            <Form.Label>{TranslateExp(lang, \"products.tpg\")}</Form.Label>\r\n                                            <Select \r\n                                                filterOption={customFilter} \r\n                                                id='drug_ts_group' \r\n                                                placeholder={TranslateExp(lang, \"products.tpg\")} \r\n                                                options={optionsTpg} \r\n                                                onChange={e=>{setData({...data,drug_ts_group: e.value})}}\r\n                                                value={optionsTpg.filter(key=> key.value === data.drug_ts_group)}\r\n                                                required\r\n                                                />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label>{TranslateExp(lang, \"products.dt\")}</Form.Label>\r\n                                        <Select \r\n                                            filterOption={customFilter} \r\n                                            id='drug_type' \r\n                                            placeholder={TranslateExp(lang, \"products.dt\")} \r\n                                            options={optionsDts} \r\n                                            onChange={e=>{setData({...data,drug_type: e.value})}}\r\n                                            value={optionsDts.filter(key=> key.value === data.drug_type)}\r\n                                            required\r\n                                            />\r\n                                    </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className='my-2'>\r\n                                    <Col><Button onClick={()=>resetAll()} className={\"btn btn-block btn-warning\"}>{TranslateExp(lang, \"content.resetAll\")}</Button></Col>\r\n                                    <Col><Button type='submit' className={\"btn btn-block btn-success\"}>{TranslateExp(lang, \"content.save\")}</Button></Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    </Col>\r\n                {\r\n                    status &&\r\n                        <Redirect to={\"/admin/drugs\"}/>\r\n                }\r\n                <Col md={3}></Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrugsAdd;","F:\\farmaFinal\\farma\\src\\components\\modalInfo\\index.js",["778","779"],"import React, {useState, useEffect} from 'react'\r\nimport {Modal, Form} from 'react-bootstrap'\r\nimport st from './modalInfo.module.scss'\r\n\r\nexport default function ModalInfo(props) {\r\n    const {data, show, hide, price, dateLen, lang, TranslateExp} = props;\r\n    const [period, setPeriod] = useState(1);\r\n    const getTextHead=(data)=>{\r\n        return (data?.HeaderTitle !== undefined)?data.HeaderTitle:data.Header\r\n    }\r\n    useEffect(() => setPeriod(1), [show])\r\n    const getHtml=(data,text)=>{\r\n        return(\r\n            <p className='m-0'>{data?.render('Cell')} {text}</p>\r\n        )\r\n    }\r\n    const writeGroupRow=(data, index, text)=>{\r\n        let x,x1 = 0;\r\n        if(period > 2) x1 = 1;\r\n        if(dateLen === 1) x = 1;\r\n        if(dateLen === 2) x = 3;\r\n        if(dateLen === 3) x = 5;\r\n        if(dateLen === 4) x = 6;\r\n\r\n        return(\r\n            <div className={`${st.group}`}>\r\n                <h6 className='mb-0 text-center'>{text}({getHtml(data[index+x],'')})</h6>\r\n                <p className='m-0 text-left' >{getHtml(data[index+2*x-x1],'')}</p>\r\n            </div>\r\n        )\r\n    }\r\n    const writeSingleRow=(header, text, price)=>{\r\n        return(\r\n            <div className={`${st.single} row d-flex align-items-center`}>\r\n                <h6 className='m-0'>{header}</h6>\r\n                <p className='m-0 ml-3 text-secondary'>{text} {price}</p>\r\n            </div>\r\n        )\r\n    }\r\n    const getBlock=(colId, index)=>{\r\n        return(\r\n            (+colId?.per === +period)?\r\n                (colId?.group)?\r\n                    (colId?.text)?\r\n                    <div className='col-md-4 mb-3'>\r\n                        <div>\r\n                            {writeGroupRow(data, index, colId.text)}\r\n                        </div>\r\n                    </div> \r\n                    :''\r\n                :''\r\n            :''\r\n        )\r\n    }\r\n    return (\r\n        <div className={st.body}>\r\n        {data?\r\n            <Modal\r\n                show={show}\r\n                onHide={hide}\r\n                dialogClassName={st.modalDialog}\r\n                contentClassName={st.modal__content}\r\n            >\r\n                <Modal.Header className='d-flex mx-4 align-items-center' closeButton>\r\n                    <h3 className='m-0'>{data[0].value}</h3>  \r\n                    <Form>\r\n                        <Form.Group className='m-0 ml-5 pl-1 d-flex align-items-center' style={{border: '1px solid #ced4da', borderRadius: '5px'}}>\r\n                            <Form.Label className='my-0 mr-2'>{TranslateExp(lang, \"content.period\")}:</Form.Label>\r\n                            <Form.Control \r\n                                as=\"select\" \r\n                                value={period}\r\n                                onChange={(e)=>setPeriod(e.target.value)}\r\n                                style={{border: '0', borderLeft: '1px solid #ced4da', borderTopLeftRadius: 0,borderBottomLeftRadius: 0, cursor: 'pointer'}}\r\n                            >\r\n                                <option className='font-weight-bold' value={1}>1</option>\r\n                                <option className={(dateLen >= 2)?'font-weight-bold':''} disabled={(dateLen < 2)} value={2}>2</option>\r\n                                <option className={(dateLen >= 3)?'font-weight-bold':''} disabled={(dateLen < 3)} value={3}>3</option>\r\n                                <option className={(dateLen >= 4)?'font-weight-bold':''} disabled={(dateLen < 4)} value={4}>4</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Header>\r\n                <Modal.Body className ='pt-2 pb-0 mx-4 mb-3'>     \r\n                    {data.map((key)=>{\r\n                        const colId = key.column?.HeaderVal;\r\n                        const isHead = getTextHead(key.column);\r\n                        return(\r\n                            (+colId?.per === +period || colId?.per === 0)?\r\n                                (!colId?.group)?\r\n                                    (colId.role==='price')?\r\n                                        writeSingleRow(isHead , key?.render('Cell'), price)\r\n                                    :   writeSingleRow(isHead , key?.render('Cell'), '')\r\n                                :''\r\n                            :''\r\n                        )\r\n                    })    \r\n                    }\r\n                    \r\n                    <div className='row mt-3'>\r\n                    {\r\n                        data?.map((key, index)=>{\r\n                            const colId = key.column?.HeaderVal;\r\n                            if(index < 3) return getBlock(colId, index); else return;\r\n                            })\r\n                    }\r\n                    </div>\r\n                    <div className='row'>\r\n                    {\r\n                        data?.map((key, index)=>{\r\n                            const colId = key.column?.HeaderVal;\r\n                            if(index > 2) return getBlock(colId, index); else return;\r\n                            })\r\n                    }\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>  \r\n        :\"\"    \r\n        }\r\n        </div>\r\n        \r\n    )\r\n}\r\n","F:\\farmaFinal\\farma\\src\\pages\\profile\\index.js",["780","781","782"],"import React, {useContext} from 'react'\r\nimport PrivateRoute from \"../../components/privateRoute\";\r\nimport Changer from \"./changePassword/Changer\";\r\nimport Settings from \"./settings/index\";\r\nimport EditSettings from \"./settings/editSettings/EditSettings\";\r\nimport checkPrivilegeOfRole from \"../../authorization/checkPrivilegeOnRole\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport {Route, useHistory, Switch} from \"react-router-dom\";\r\n\r\nfunction Profile(props) {\r\n    const {url} = props.match;\r\n    const {role} = useContext(UserContext);\r\n    const history = useHistory();\r\n    console.log(\"props\", props);\r\n    const {lang, TranslateExp} = props;\r\n    return(\r\n        <>\r\n            <Route path={`${url}/changePassword`}>\r\n                <Changer {...props}/>\r\n            </Route>\r\n            <Route path={`${url}/settings`} render={\r\n                props => {\r\n                    console.log(!checkPrivilegeOfRole(role, \"CHANGE_SETTINGS\"));\r\n                    return  !checkPrivilegeOfRole(role, \"CHANGE_SETTINGS\")? history.goBack() : <Settings {...props} lang={lang} TranslateExp={TranslateExp}/>\r\n                }\r\n            } />\r\n        \r\n            {/*<PrivateRoute path={`${url}/settings/update`}><EditSettings /></PrivateRoute>*/}\r\n        </>\r\n    )\r\n}\r\nexport default Profile\r\n","F:\\farmaFinal\\farma\\src\\pages\\profile\\settings\\index.js",["783","784","785"],"F:\\farmaFinal\\farma\\src\\pages\\profile\\changePassword\\Changer.js",[],"F:\\farmaFinal\\farma\\src\\pages\\profile\\settings\\editSettings\\EditSettings.js",["786","787","788"],"import React from \"react\";\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport st from \"../../../cruds/crud.module.scss\";\r\nimport {NumberToStr, StrtoNumber} from \"../../../../utils\";\r\nimport Select from \"react-select\";\r\n\r\nfunction EditSettings(props) {\r\n    return(\r\n        <>\r\n            <div className='container ml-0 pb-5'>\r\n                <h3>Edit settings</h3>\r\n                <Row className='pb-5'>\r\n                    <Col md={9}>\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Label>Наименование</Form.Label>\r\n                                <Form.Control name={\"name_uz\"} type = 'text' placeholder = 'Наименование' required/>\r\n                            </Form.Group>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Group>\r\n                                                <Row className={`p-0 m-0`}>\r\n                                                    <Col md={8} className='p-0 m-0'>\r\n                                                        <Form.Label>Цена референдума </Form.Label>\r\n                                                        <Form.Control\r\n                                                            className={st.cost}\r\n                                                            placeholder = 'Цена референдума'\r\n                                                            required\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className='my-2'>\r\n                                        <Col><Button type=\"reset\" className={\"btn btn-block btn-warning\"}>Сбросить все</Button></Col>\r\n                                        <Col><Button type='submit' className={\"btn btn-block btn-success\"}>Сохранить</Button></Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col md={3}></Col>\r\n                </Row>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default EditSettings\r\n","F:\\farmaFinal\\farma\\src\\services\\settingService.js",[],"F:\\farmaFinal\\farma\\src\\components\\forMobile\\index.js",["789","790","791","792","793","794"],"import react from \"react\";\r\nimport st from \"./forMobile.module.scss\";\r\nimport logo from \"../sideBar/pharm.png\";\r\nimport googlePlay from \"./googlePlay.png\";\r\nimport appStore from \"./appStore.png\";\r\n\r\nfunction ForMobile(){\r\n    return <div className={st.mobileBack}>\r\n          <div className={st.message}>\r\n            <img src={logo} />\r\n            <p className={st.textDesc}>\r\n             Если вы хотите попробовать мобильную версию установите \r\n             приложение\r\n            </p>\r\n            <span className={st.download}>cкачать приложение</span>\r\n            <p>\r\n              <a href=\"#\">\r\n                <img src={googlePlay} className={st.googlePlayLink}/>\r\n              </a>  \r\n              <a href=\"#\">\r\n                <img src={appStore} className={st.appStoreLink}/>\r\n              </a>\r\n            </p>\r\n\r\n          </div>\r\n      </div>\r\n}\r\n\r\nexport default ForMobile;","F:\\farmaFinal\\farma\\src\\components\\globalUpload\\index.js",["795","796"],"import react, {useState, useRef} from \"react\";\r\nimport {Row, Modal, Form, Button} from \"react-bootstrap\";\r\nimport {medApi} from \"../../services/medService\";\r\n \r\n\r\nfunction GlobalUpload(props){\r\n    const {uploadGlobal, hideGlobalUpload, lang, TranslateExp} = props;\r\n    const {setShow, setResponse} = props;\r\n    const [filename, setFilename] = useState(\"\");\r\n    const [msg, setMsg] = useState(\"\");\r\n    const fileName = useRef();\r\n\r\n    const styles = {\r\n        marginBottom: 0,\r\n        marginTop: \"10px\",\r\n        color: \"#999\"\r\n    };\r\n\r\n    const uploadExcel = (e, callback, removeFilename, handleBlank) => {\r\n        console.log(\"here\");\r\n        e.preventDefault();\r\n        const file = e.target.elements[0].files?.[0];\r\n\r\n        if(!file) handleBlank(TranslateExp(lang, \"content.selectFile\"));\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        medApi.uploadExcel(formData).then(res => {\r\n            console.log(\"res\", res);\r\n            if(res.data.data.length === 0){\r\n                console.log(\"fdg\");\r\n                setResponse({\r\n                    message: TranslateExp(lang, \"content.importExcelErr\"),\r\n                    status: 500\r\n                });\r\n            }else{\r\n                setResponse({\r\n                    message: res.data.message.ru,\r\n                    status: res.status\r\n                });\r\n            }\r\n            setShow(true);\r\n            \r\n            removeFilename(\"\");\r\n            callback();\r\n\r\n        }).catch(error => {\r\n            setResponse({\r\n                message: error.response.data.message.ru,\r\n                status: error.response.status\r\n            });\r\n            setShow(true);\r\n            handleBlank(\"\");\r\n            removeFilename(\"\");\r\n            callback();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Modal show={uploadGlobal} onHide={hideGlobalUpload} animation={false}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>{TranslateExp(lang,\"content.status\")} excel</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {msg && <span style={{color: \"red\"}}>{msg}</span>}\r\n            <Form onSubmit={e => uploadExcel(e, hideGlobalUpload, setFilename, setMsg)}>\r\n              <Form.File \r\n                id=\"custom-file-translate-scss\"\r\n                label={TranslateExp(lang, \"content.excelFile\")}\r\n                custom\r\n                lang=\"en\"\r\n                data-browse={TranslateExp(lang, \"content.select\")}\r\n                accept=\".xlsx, .xls, .pdf, .doc\"\r\n                onChange={e => setFilename(e.target?.files[0]?.name)}\r\n                required\r\n              />\r\n              <p  style={styles} ref={fileName}>{TranslateExp(lang, \"content.file\")}: {filename? filename : TranslateExp(lang, \"content.notSelected\")}</p>\r\n              <Button \r\n                className=\"float-right\" \r\n                variant=\"success\" \r\n                type=\"submit\">\r\n                {TranslateExp(lang, \"content.uploadFile\")}\r\n              </Button>\r\n            </Form>\r\n            </Modal.Body>\r\n          </Modal>\r\n      );\r\n\r\n}\r\n\r\nexport default GlobalUpload;",["797","798"],"F:\\farmaFinal\\farma\\src\\components\\reactSelect\\index.js",["799","800"],"import React from \"react\";\r\nimport Select from 'react-select'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst noop = () => {\r\n  // no operation (do nothing real quick)\r\n};\r\n\r\nclass FixRequiredSelect extends React.Component {\r\n  state = {\r\n    value: this.props.value || \"\"\r\n  };\r\n\r\n  selectRef = null;\r\n  setSelectRef = ref => {\r\n    this.selectRef = ref;\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.props.onChange(e);\r\n    this.setState({ value: e.value });\r\n  };\r\n\r\n  getValue = () => {\r\n    if (this.props.value != undefined) return this.props.value;\r\n    return this.state.value || \"\";\r\n  };\r\n\r\n  render() {\r\n    const { required, ...props } = this.props;\r\n    const { isLoading, isDisabled } = this.props;\r\n    const enableRequired = !isDisabled;\r\n\r\n    return (\r\n      <div>\r\n        <Select\r\n          {...props}\r\n          ref={this.setSelectRef}\r\n          onChange={this.onChange}\r\n        />\r\n        {enableRequired && (\r\n          <input\r\n            tabIndex={-1}\r\n            autoComplete=\"off\"\r\n            style={{\r\n              opacity: 0,\r\n              width: \"100%\",\r\n              height: 0,\r\n              position: \"absolute\"\r\n            }}\r\n            value={this.getValue()}\r\n            onChange={noop}\r\n            onFocus={() => this.selectRef.focus()}\r\n            required={required}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFixRequiredSelect.defaultProps = {\r\n  onChange: noop\r\n};\r\n\r\nFixRequiredSelect.protoTypes = {\r\n  selectComponent: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func,\r\n  required: PropTypes.bool\r\n};\r\n\r\nexport default FixRequiredSelect;\r\n",{"ruleId":"801","replacedBy":"802"},{"ruleId":"803","replacedBy":"804"},{"ruleId":"805","severity":1,"message":"806","line":12,"column":8,"nodeType":"807","messageId":"808","endLine":12,"endColumn":14},{"ruleId":"805","severity":1,"message":"809","line":24,"column":9,"nodeType":"807","messageId":"808","endLine":24,"endColumn":14},{"ruleId":"805","severity":1,"message":"810","line":27,"column":8,"nodeType":"807","messageId":"808","endLine":27,"endColumn":20},{"ruleId":"811","severity":1,"message":"812","line":111,"column":437,"nodeType":"813","messageId":"814","endLine":111,"endColumn":438,"suggestions":"815"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":518,"nodeType":"813","messageId":"814","endLine":111,"endColumn":519,"suggestions":"816"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":583,"nodeType":"813","messageId":"814","endLine":111,"endColumn":584,"suggestions":"817"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":610,"nodeType":"813","messageId":"814","endLine":111,"endColumn":611,"suggestions":"818"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":631,"nodeType":"813","messageId":"814","endLine":111,"endColumn":632,"suggestions":"819"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":669,"nodeType":"813","messageId":"814","endLine":111,"endColumn":670,"suggestions":"820"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":703,"nodeType":"813","messageId":"814","endLine":111,"endColumn":704,"suggestions":"821"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":772,"nodeType":"813","messageId":"814","endLine":111,"endColumn":773,"suggestions":"822"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":795,"nodeType":"813","messageId":"814","endLine":111,"endColumn":796,"suggestions":"823"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":800,"nodeType":"813","messageId":"814","endLine":111,"endColumn":801,"suggestions":"824"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":838,"nodeType":"813","messageId":"814","endLine":111,"endColumn":839,"suggestions":"825"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":851,"nodeType":"813","messageId":"814","endLine":111,"endColumn":852,"suggestions":"826"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":876,"nodeType":"813","messageId":"814","endLine":111,"endColumn":877,"suggestions":"827"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":885,"nodeType":"813","messageId":"814","endLine":111,"endColumn":886,"suggestions":"828"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":918,"nodeType":"813","messageId":"814","endLine":111,"endColumn":919,"suggestions":"829"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":942,"nodeType":"813","messageId":"814","endLine":111,"endColumn":943,"suggestions":"830"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1046,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1047,"suggestions":"831"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1090,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1091,"suggestions":"832"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1111,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1112,"suggestions":"833"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1153,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1154,"suggestions":"834"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1206,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1207,"suggestions":"835"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1303,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1304,"suggestions":"836"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1388,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1389,"suggestions":"837"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1423,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1424,"suggestions":"838"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1452,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1453,"suggestions":"839"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1458,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1459,"suggestions":"840"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1480,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1481,"suggestions":"841"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1489,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1490,"suggestions":"842"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1563,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1564,"suggestions":"843"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1570,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1571,"suggestions":"844"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1585,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1586,"suggestions":"845"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1609,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1610,"suggestions":"846"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1621,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1622,"suggestions":"847"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1629,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1630,"suggestions":"848"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1679,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1680,"suggestions":"849"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1683,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1684,"suggestions":"850"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1736,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1737,"suggestions":"851"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1742,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1743,"suggestions":"852"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1757,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1758,"suggestions":"853"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1761,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1762,"suggestions":"854"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1783,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1784,"suggestions":"855"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1795,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1796,"suggestions":"856"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1856,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1857,"suggestions":"857"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1914,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1915,"suggestions":"858"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1961,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1962,"suggestions":"859"},{"ruleId":"811","severity":1,"message":"812","line":111,"column":1977,"nodeType":"813","messageId":"814","endLine":111,"endColumn":1978,"suggestions":"860"},{"ruleId":"805","severity":1,"message":"861","line":1,"column":8,"nodeType":"807","messageId":"808","endLine":1,"endColumn":13},{"ruleId":"805","severity":1,"message":"862","line":5,"column":9,"nodeType":"807","messageId":"808","endLine":5,"endColumn":12},{"ruleId":"805","severity":1,"message":"863","line":5,"column":14,"nodeType":"807","messageId":"808","endLine":5,"endColumn":19},{"ruleId":"805","severity":1,"message":"864","line":5,"column":21,"nodeType":"807","messageId":"808","endLine":5,"endColumn":24},{"ruleId":"805","severity":1,"message":"865","line":5,"column":26,"nodeType":"807","messageId":"808","endLine":5,"endColumn":31},{"ruleId":"805","severity":1,"message":"866","line":17,"column":18,"nodeType":"807","messageId":"808","endLine":17,"endColumn":31},{"ruleId":"805","severity":1,"message":"867","line":17,"column":33,"nodeType":"807","messageId":"808","endLine":17,"endColumn":49},{"ruleId":"868","severity":1,"message":"869","line":50,"column":14,"nodeType":"870","endLine":50,"endColumn":32,"suggestions":"871"},{"ruleId":"805","severity":1,"message":"872","line":17,"column":12,"nodeType":"807","messageId":"808","endLine":17,"endColumn":20},{"ruleId":"805","severity":1,"message":"873","line":17,"column":22,"nodeType":"807","messageId":"808","endLine":17,"endColumn":33},{"ruleId":"805","severity":1,"message":"874","line":25,"column":11,"nodeType":"807","messageId":"808","endLine":25,"endColumn":18},{"ruleId":"868","severity":1,"message":"875","line":39,"column":7,"nodeType":"870","endLine":39,"endColumn":9,"suggestions":"876"},{"ruleId":"805","severity":1,"message":"877","line":9,"column":10,"nodeType":"807","messageId":"808","endLine":9,"endColumn":30},{"ruleId":"878","severity":1,"message":"879","line":15,"column":23,"nodeType":"880","messageId":"881","endLine":15,"endColumn":59,"fix":"882"},{"ruleId":"868","severity":1,"message":"869","line":48,"column":10,"nodeType":"870","endLine":48,"endColumn":28,"suggestions":"883"},{"ruleId":"805","severity":1,"message":"884","line":18,"column":12,"nodeType":"807","messageId":"808","endLine":18,"endColumn":19},{"ruleId":"805","severity":1,"message":"885","line":25,"column":19,"nodeType":"807","messageId":"808","endLine":25,"endColumn":27},{"ruleId":"868","severity":1,"message":"886","line":68,"column":16,"nodeType":"887","endLine":71,"endColumn":10},{"ruleId":"868","severity":1,"message":"888","line":73,"column":17,"nodeType":"887","endLine":76,"endColumn":10},{"ruleId":"868","severity":1,"message":"889","line":78,"column":17,"nodeType":"887","endLine":81,"endColumn":10},{"ruleId":"868","severity":1,"message":"890","line":83,"column":18,"nodeType":"887","endLine":86,"endColumn":10},{"ruleId":"891","severity":1,"message":"892","line":281,"column":98,"nodeType":"893","messageId":"894","endLine":281,"endColumn":100},{"ruleId":"891","severity":1,"message":"892","line":460,"column":146,"nodeType":"893","messageId":"894","endLine":460,"endColumn":148},{"ruleId":"891","severity":1,"message":"892","line":462,"column":148,"nodeType":"893","messageId":"894","endLine":462,"endColumn":150},{"ruleId":"895","severity":1,"message":"896","line":41,"column":9,"nodeType":"897","messageId":"898","endLine":66,"endColumn":10},{"ruleId":"891","severity":1,"message":"892","line":69,"column":59,"nodeType":"893","messageId":"894","endLine":69,"endColumn":61},{"ruleId":"891","severity":1,"message":"892","line":106,"column":53,"nodeType":"893","messageId":"894","endLine":106,"endColumn":55},{"ruleId":"891","severity":1,"message":"892","line":163,"column":66,"nodeType":"893","messageId":"894","endLine":163,"endColumn":68},{"ruleId":"891","severity":1,"message":"899","line":192,"column":28,"nodeType":"893","messageId":"894","endLine":192,"endColumn":30},{"ruleId":"891","severity":1,"message":"899","line":192,"column":51,"nodeType":"893","messageId":"894","endLine":192,"endColumn":53},{"ruleId":"891","severity":1,"message":"892","line":220,"column":66,"nodeType":"893","messageId":"894","endLine":220,"endColumn":68},{"ruleId":"891","severity":1,"message":"899","line":250,"column":28,"nodeType":"893","messageId":"894","endLine":250,"endColumn":30},{"ruleId":"891","severity":1,"message":"899","line":250,"column":51,"nodeType":"893","messageId":"894","endLine":250,"endColumn":53},{"ruleId":"868","severity":1,"message":"900","line":311,"column":8,"nodeType":"870","endLine":311,"endColumn":13,"suggestions":"901"},{"ruleId":"868","severity":1,"message":"900","line":315,"column":8,"nodeType":"870","endLine":315,"endColumn":22,"suggestions":"902"},{"ruleId":"805","severity":1,"message":"874","line":11,"column":11,"nodeType":"807","messageId":"808","endLine":11,"endColumn":18},{"ruleId":"891","severity":1,"message":"892","line":19,"column":29,"nodeType":"893","messageId":"894","endLine":19,"endColumn":31},{"ruleId":"805","severity":1,"message":"903","line":2,"column":8,"nodeType":"807","messageId":"808","endLine":2,"endColumn":10},{"ruleId":"895","severity":1,"message":"896","line":48,"column":9,"nodeType":"897","messageId":"898","endLine":67,"endColumn":10},{"ruleId":"868","severity":1,"message":"900","line":73,"column":8,"nodeType":"870","endLine":73,"endColumn":22,"suggestions":"904"},{"ruleId":"891","severity":1,"message":"892","line":85,"column":59,"nodeType":"893","messageId":"894","endLine":85,"endColumn":61},{"ruleId":"891","severity":1,"message":"892","line":126,"column":53,"nodeType":"893","messageId":"894","endLine":126,"endColumn":55},{"ruleId":"891","severity":1,"message":"899","line":188,"column":28,"nodeType":"893","messageId":"894","endLine":188,"endColumn":30},{"ruleId":"891","severity":1,"message":"899","line":188,"column":51,"nodeType":"893","messageId":"894","endLine":188,"endColumn":53},{"ruleId":"891","severity":1,"message":"892","line":203,"column":66,"nodeType":"893","messageId":"894","endLine":203,"endColumn":68},{"ruleId":"895","severity":1,"message":"896","line":18,"column":9,"nodeType":"897","messageId":"898","endLine":103,"endColumn":10},{"ruleId":"868","severity":1,"message":"905","line":104,"column":7,"nodeType":"870","endLine":104,"endColumn":35,"suggestions":"906"},{"ruleId":"907","severity":1,"message":"908","line":1,"column":1,"nodeType":"909","endLine":16,"endColumn":3},{"ruleId":"805","severity":1,"message":"910","line":2,"column":9,"nodeType":"807","messageId":"808","endLine":2,"endColumn":17},{"ruleId":"805","severity":1,"message":"911","line":3,"column":8,"nodeType":"807","messageId":"808","endLine":3,"endColumn":15},{"ruleId":"891","severity":1,"message":"892","line":9,"column":30,"nodeType":"893","messageId":"894","endLine":9,"endColumn":32},{"ruleId":"912","severity":1,"message":"913","line":65,"column":16,"nodeType":"914","messageId":"915","endLine":65,"endColumn":18},{"ruleId":"912","severity":1,"message":"913","line":66,"column":23,"nodeType":"914","messageId":"915","endLine":66,"endColumn":25},{"ruleId":"891","severity":1,"message":"892","line":67,"column":25,"nodeType":"893","messageId":"894","endLine":67,"endColumn":27},{"ruleId":"912","severity":1,"message":"913","line":80,"column":23,"nodeType":"914","messageId":"915","endLine":80,"endColumn":25},{"ruleId":"912","severity":1,"message":"916","line":83,"column":23,"nodeType":"914","messageId":"917","endLine":83,"endColumn":25},{"ruleId":"891","severity":1,"message":"892","line":154,"column":20,"nodeType":"893","messageId":"894","endLine":154,"endColumn":22},{"ruleId":"891","severity":1,"message":"892","line":155,"column":21,"nodeType":"893","messageId":"894","endLine":155,"endColumn":23},{"ruleId":"805","severity":1,"message":"910","line":2,"column":16,"nodeType":"807","messageId":"808","endLine":2,"endColumn":24},{"ruleId":"868","severity":1,"message":"918","line":32,"column":7,"nodeType":"870","endLine":32,"endColumn":9,"suggestions":"919"},{"ruleId":"868","severity":1,"message":"918","line":35,"column":7,"nodeType":"870","endLine":35,"endColumn":9,"suggestions":"920"},{"ruleId":"868","severity":1,"message":"918","line":32,"column":7,"nodeType":"870","endLine":32,"endColumn":9,"suggestions":"921"},{"ruleId":"868","severity":1,"message":"918","line":31,"column":7,"nodeType":"870","endLine":31,"endColumn":9,"suggestions":"922"},{"ruleId":"868","severity":1,"message":"918","line":32,"column":7,"nodeType":"870","endLine":32,"endColumn":9,"suggestions":"923"},{"ruleId":"805","severity":1,"message":"924","line":1,"column":27,"nodeType":"807","messageId":"808","endLine":1,"endColumn":35},{"ruleId":"805","severity":1,"message":"925","line":12,"column":12,"nodeType":"807","messageId":"808","endLine":12,"endColumn":16},{"ruleId":"868","severity":1,"message":"918","line":35,"column":7,"nodeType":"870","endLine":35,"endColumn":9,"suggestions":"926"},{"ruleId":"868","severity":1,"message":"918","line":31,"column":7,"nodeType":"870","endLine":31,"endColumn":9,"suggestions":"927"},{"ruleId":"868","severity":1,"message":"918","line":31,"column":7,"nodeType":"870","endLine":31,"endColumn":9,"suggestions":"928"},{"ruleId":"868","severity":1,"message":"918","line":31,"column":7,"nodeType":"870","endLine":31,"endColumn":9,"suggestions":"929"},{"ruleId":"868","severity":1,"message":"918","line":31,"column":7,"nodeType":"870","endLine":31,"endColumn":9,"suggestions":"930"},{"ruleId":"805","severity":1,"message":"931","line":1,"column":49,"nodeType":"807","messageId":"808","endLine":1,"endColumn":55},{"ruleId":"805","severity":1,"message":"865","line":10,"column":24,"nodeType":"807","messageId":"808","endLine":10,"endColumn":29},{"ruleId":"868","severity":1,"message":"932","line":68,"column":8,"nodeType":"870","endLine":68,"endColumn":10,"suggestions":"933"},{"ruleId":"912","severity":1,"message":"913","line":39,"column":27,"nodeType":"914","messageId":"915","endLine":39,"endColumn":29},{"ruleId":"912","severity":1,"message":"913","line":44,"column":29,"nodeType":"914","messageId":"915","endLine":44,"endColumn":31},{"ruleId":"912","severity":1,"message":"913","line":65,"column":25,"nodeType":"914","messageId":"915","endLine":65,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":70,"column":33,"nodeType":"893","messageId":"894","endLine":70,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":70,"column":47,"nodeType":"893","messageId":"894","endLine":70,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":70,"column":74,"nodeType":"893","messageId":"894","endLine":70,"endColumn":76},{"ruleId":"868","severity":1,"message":"934","line":237,"column":7,"nodeType":"870","endLine":237,"endColumn":26,"suggestions":"935"},{"ruleId":"912","severity":1,"message":"913","line":252,"column":32,"nodeType":"914","messageId":"915","endLine":252,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":259,"column":35,"nodeType":"914","messageId":"915","endLine":259,"endColumn":37},{"ruleId":"912","severity":1,"message":"913","line":261,"column":63,"nodeType":"914","messageId":"915","endLine":261,"endColumn":65},{"ruleId":"912","severity":1,"message":"913","line":327,"column":43,"nodeType":"914","messageId":"915","endLine":327,"endColumn":45},{"ruleId":"912","severity":1,"message":"913","line":388,"column":24,"nodeType":"914","messageId":"915","endLine":388,"endColumn":26},{"ruleId":"912","severity":1,"message":"913","line":391,"column":31,"nodeType":"914","messageId":"915","endLine":391,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":407,"column":30,"nodeType":"914","messageId":"915","endLine":407,"endColumn":32},{"ruleId":"805","severity":1,"message":"936","line":1,"column":16,"nodeType":"807","messageId":"808","endLine":1,"endColumn":25},{"ruleId":"805","severity":1,"message":"937","line":4,"column":9,"nodeType":"807","messageId":"808","endLine":4,"endColumn":16},{"ruleId":"805","severity":1,"message":"938","line":5,"column":9,"nodeType":"807","messageId":"808","endLine":5,"endColumn":16},{"ruleId":"805","severity":1,"message":"939","line":9,"column":11,"nodeType":"807","messageId":"808","endLine":9,"endColumn":19},{"ruleId":"805","severity":1,"message":"940","line":9,"column":20,"nodeType":"807","messageId":"808","endLine":9,"endColumn":31},{"ruleId":"912","severity":1,"message":"913","line":45,"column":27,"nodeType":"914","messageId":"915","endLine":45,"endColumn":29},{"ruleId":"912","severity":1,"message":"913","line":52,"column":29,"nodeType":"914","messageId":"915","endLine":52,"endColumn":31},{"ruleId":"868","severity":1,"message":"941","line":65,"column":7,"nodeType":"870","endLine":65,"endColumn":9,"suggestions":"942"},{"ruleId":"912","severity":1,"message":"913","line":87,"column":25,"nodeType":"914","messageId":"915","endLine":87,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":109,"column":33,"nodeType":"893","messageId":"894","endLine":109,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":109,"column":47,"nodeType":"893","messageId":"894","endLine":109,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":109,"column":74,"nodeType":"893","messageId":"894","endLine":109,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":245,"column":7,"nodeType":"870","endLine":245,"endColumn":34,"suggestions":"944"},{"ruleId":"912","severity":1,"message":"913","line":262,"column":32,"nodeType":"914","messageId":"915","endLine":262,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":265,"column":31,"nodeType":"914","messageId":"915","endLine":265,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":429,"column":30,"nodeType":"914","messageId":"915","endLine":429,"endColumn":32},{"ruleId":"805","severity":1,"message":"945","line":13,"column":12,"nodeType":"807","messageId":"808","endLine":13,"endColumn":25},{"ruleId":"912","severity":1,"message":"913","line":46,"column":27,"nodeType":"914","messageId":"915","endLine":46,"endColumn":29},{"ruleId":"912","severity":1,"message":"913","line":52,"column":33,"nodeType":"914","messageId":"915","endLine":52,"endColumn":35},{"ruleId":"868","severity":1,"message":"941","line":65,"column":7,"nodeType":"870","endLine":65,"endColumn":9,"suggestions":"946"},{"ruleId":"912","severity":1,"message":"913","line":84,"column":25,"nodeType":"914","messageId":"915","endLine":84,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":106,"column":33,"nodeType":"893","messageId":"894","endLine":106,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":106,"column":47,"nodeType":"893","messageId":"894","endLine":106,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":106,"column":74,"nodeType":"893","messageId":"894","endLine":106,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":243,"column":7,"nodeType":"870","endLine":243,"endColumn":26,"suggestions":"947"},{"ruleId":"912","severity":1,"message":"913","line":257,"column":32,"nodeType":"914","messageId":"915","endLine":257,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":260,"column":31,"nodeType":"914","messageId":"915","endLine":260,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":425,"column":30,"nodeType":"914","messageId":"915","endLine":425,"endColumn":32},{"ruleId":"805","severity":1,"message":"945","line":14,"column":12,"nodeType":"807","messageId":"808","endLine":14,"endColumn":25},{"ruleId":"912","severity":1,"message":"913","line":47,"column":27,"nodeType":"914","messageId":"915","endLine":47,"endColumn":29},{"ruleId":"912","severity":1,"message":"913","line":53,"column":33,"nodeType":"914","messageId":"915","endLine":53,"endColumn":35},{"ruleId":"868","severity":1,"message":"941","line":66,"column":7,"nodeType":"870","endLine":66,"endColumn":9,"suggestions":"948"},{"ruleId":"912","severity":1,"message":"913","line":83,"column":25,"nodeType":"914","messageId":"915","endLine":83,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":104,"column":33,"nodeType":"893","messageId":"894","endLine":104,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":104,"column":47,"nodeType":"893","messageId":"894","endLine":104,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":104,"column":74,"nodeType":"893","messageId":"894","endLine":104,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":238,"column":7,"nodeType":"870","endLine":238,"endColumn":26,"suggestions":"949"},{"ruleId":"912","severity":1,"message":"913","line":252,"column":32,"nodeType":"914","messageId":"915","endLine":252,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":255,"column":31,"nodeType":"914","messageId":"915","endLine":255,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":407,"column":30,"nodeType":"914","messageId":"915","endLine":407,"endColumn":32},{"ruleId":"805","severity":1,"message":"950","line":7,"column":107,"nodeType":"807","messageId":"808","endLine":7,"endColumn":123},{"ruleId":"912","severity":1,"message":"913","line":45,"column":27,"nodeType":"914","messageId":"915","endLine":45,"endColumn":29},{"ruleId":"805","severity":1,"message":"951","line":50,"column":15,"nodeType":"807","messageId":"808","endLine":50,"endColumn":20},{"ruleId":"912","severity":1,"message":"913","line":52,"column":29,"nodeType":"914","messageId":"915","endLine":52,"endColumn":31},{"ruleId":"805","severity":1,"message":"952","line":55,"column":19,"nodeType":"807","messageId":"808","endLine":55,"endColumn":25},{"ruleId":"805","severity":1,"message":"953","line":58,"column":19,"nodeType":"807","messageId":"808","endLine":58,"endColumn":22},{"ruleId":"868","severity":1,"message":"941","line":68,"column":7,"nodeType":"870","endLine":68,"endColumn":9,"suggestions":"954"},{"ruleId":"912","severity":1,"message":"913","line":85,"column":25,"nodeType":"914","messageId":"915","endLine":85,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":107,"column":33,"nodeType":"893","messageId":"894","endLine":107,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":107,"column":47,"nodeType":"893","messageId":"894","endLine":107,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":107,"column":74,"nodeType":"893","messageId":"894","endLine":107,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":275,"column":7,"nodeType":"870","endLine":275,"endColumn":26,"suggestions":"955"},{"ruleId":"912","severity":1,"message":"913","line":290,"column":32,"nodeType":"914","messageId":"915","endLine":290,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":293,"column":31,"nodeType":"914","messageId":"915","endLine":293,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":457,"column":30,"nodeType":"914","messageId":"915","endLine":457,"endColumn":32},{"ruleId":"912","severity":1,"message":"913","line":45,"column":27,"nodeType":"914","messageId":"915","endLine":45,"endColumn":29},{"ruleId":"912","severity":1,"message":"913","line":51,"column":33,"nodeType":"914","messageId":"915","endLine":51,"endColumn":35},{"ruleId":"868","severity":1,"message":"941","line":64,"column":7,"nodeType":"870","endLine":64,"endColumn":9,"suggestions":"956"},{"ruleId":"912","severity":1,"message":"913","line":83,"column":25,"nodeType":"914","messageId":"915","endLine":83,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":105,"column":33,"nodeType":"893","messageId":"894","endLine":105,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":105,"column":47,"nodeType":"893","messageId":"894","endLine":105,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":105,"column":74,"nodeType":"893","messageId":"894","endLine":105,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":244,"column":7,"nodeType":"870","endLine":244,"endColumn":26,"suggestions":"957"},{"ruleId":"912","severity":1,"message":"913","line":258,"column":32,"nodeType":"914","messageId":"915","endLine":258,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":261,"column":31,"nodeType":"914","messageId":"915","endLine":261,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":427,"column":30,"nodeType":"914","messageId":"915","endLine":427,"endColumn":32},{"ruleId":"958","severity":1,"message":"959","line":547,"column":17,"nodeType":"960","endLine":547,"endColumn":36},{"ruleId":"912","severity":1,"message":"913","line":44,"column":27,"nodeType":"914","messageId":"915","endLine":44,"endColumn":29},{"ruleId":"912","severity":1,"message":"913","line":51,"column":33,"nodeType":"914","messageId":"915","endLine":51,"endColumn":35},{"ruleId":"868","severity":1,"message":"941","line":67,"column":7,"nodeType":"870","endLine":67,"endColumn":9,"suggestions":"961"},{"ruleId":"912","severity":1,"message":"913","line":85,"column":25,"nodeType":"914","messageId":"915","endLine":85,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":105,"column":33,"nodeType":"893","messageId":"894","endLine":105,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":105,"column":47,"nodeType":"893","messageId":"894","endLine":105,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":105,"column":74,"nodeType":"893","messageId":"894","endLine":105,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":237,"column":7,"nodeType":"870","endLine":237,"endColumn":26,"suggestions":"962"},{"ruleId":"912","severity":1,"message":"913","line":251,"column":32,"nodeType":"914","messageId":"915","endLine":251,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":254,"column":31,"nodeType":"914","messageId":"915","endLine":254,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":403,"column":30,"nodeType":"914","messageId":"915","endLine":403,"endColumn":32},{"ruleId":"958","severity":1,"message":"959","line":513,"column":17,"nodeType":"960","endLine":513,"endColumn":30},{"ruleId":"891","severity":1,"message":"899","line":295,"column":110,"nodeType":"893","messageId":"894","endLine":295,"endColumn":112},{"ruleId":"805","severity":1,"message":"950","line":7,"column":107,"nodeType":"807","messageId":"808","endLine":7,"endColumn":123},{"ruleId":"805","severity":1,"message":"963","line":13,"column":27,"nodeType":"807","messageId":"808","endLine":13,"endColumn":43},{"ruleId":"805","severity":1,"message":"964","line":31,"column":9,"nodeType":"807","messageId":"808","endLine":31,"endColumn":19},{"ruleId":"805","severity":1,"message":"951","line":44,"column":15,"nodeType":"807","messageId":"808","endLine":44,"endColumn":20},{"ruleId":"912","severity":1,"message":"913","line":46,"column":29,"nodeType":"914","messageId":"915","endLine":46,"endColumn":31},{"ruleId":"805","severity":1,"message":"952","line":49,"column":19,"nodeType":"807","messageId":"808","endLine":49,"endColumn":25},{"ruleId":"805","severity":1,"message":"953","line":52,"column":19,"nodeType":"807","messageId":"808","endLine":52,"endColumn":22},{"ruleId":"868","severity":1,"message":"941","line":59,"column":7,"nodeType":"870","endLine":59,"endColumn":9,"suggestions":"965"},{"ruleId":"912","severity":1,"message":"913","line":69,"column":25,"nodeType":"914","messageId":"915","endLine":69,"endColumn":27},{"ruleId":"891","severity":1,"message":"892","line":89,"column":33,"nodeType":"893","messageId":"894","endLine":89,"endColumn":35},{"ruleId":"891","severity":1,"message":"892","line":89,"column":47,"nodeType":"893","messageId":"894","endLine":89,"endColumn":49},{"ruleId":"891","severity":1,"message":"892","line":89,"column":74,"nodeType":"893","messageId":"894","endLine":89,"endColumn":76},{"ruleId":"868","severity":1,"message":"943","line":247,"column":7,"nodeType":"870","endLine":247,"endColumn":26,"suggestions":"966"},{"ruleId":"912","severity":1,"message":"913","line":262,"column":32,"nodeType":"914","messageId":"915","endLine":262,"endColumn":34},{"ruleId":"912","severity":1,"message":"913","line":265,"column":31,"nodeType":"914","messageId":"915","endLine":265,"endColumn":33},{"ruleId":"912","severity":1,"message":"913","line":413,"column":30,"nodeType":"914","messageId":"915","endLine":413,"endColumn":32},{"ruleId":"805","severity":1,"message":"967","line":1,"column":38,"nodeType":"807","messageId":"808","endLine":1,"endColumn":48},{"ruleId":"912","severity":1,"message":"916","line":49,"column":47,"nodeType":"914","messageId":"917","endLine":49,"endColumn":49},{"ruleId":"868","severity":1,"message":"968","line":209,"column":7,"nodeType":"870","endLine":209,"endColumn":9,"suggestions":"969"},{"ruleId":"805","severity":1,"message":"970","line":2,"column":22,"nodeType":"807","messageId":"808","endLine":2,"endColumn":31},{"ruleId":"805","severity":1,"message":"971","line":2,"column":44,"nodeType":"807","messageId":"808","endLine":2,"endColumn":48},{"ruleId":"805","severity":1,"message":"937","line":7,"column":9,"nodeType":"807","messageId":"808","endLine":7,"endColumn":16},{"ruleId":"805","severity":1,"message":"972","line":9,"column":8,"nodeType":"807","messageId":"808","endLine":9,"endColumn":15},{"ruleId":"805","severity":1,"message":"973","line":35,"column":10,"nodeType":"807","messageId":"808","endLine":35,"endColumn":21},{"ruleId":"805","severity":1,"message":"974","line":61,"column":12,"nodeType":"807","messageId":"808","endLine":61,"endColumn":25},{"ruleId":"805","severity":1,"message":"975","line":61,"column":27,"nodeType":"807","messageId":"808","endLine":61,"endColumn":43},{"ruleId":"805","severity":1,"message":"976","line":65,"column":21,"nodeType":"807","messageId":"808","endLine":65,"endColumn":31},{"ruleId":"805","severity":1,"message":"977","line":66,"column":12,"nodeType":"807","messageId":"808","endLine":66,"endColumn":20},{"ruleId":"805","severity":1,"message":"978","line":66,"column":22,"nodeType":"807","messageId":"808","endLine":66,"endColumn":33},{"ruleId":"868","severity":1,"message":"979","line":103,"column":8,"nodeType":"870","endLine":103,"endColumn":16,"suggestions":"980"},{"ruleId":"868","severity":1,"message":"981","line":110,"column":7,"nodeType":"870","endLine":110,"endColumn":9,"suggestions":"982"},{"ruleId":"805","severity":1,"message":"983","line":114,"column":15,"nodeType":"807","messageId":"808","endLine":114,"endColumn":20},{"ruleId":"805","severity":1,"message":"984","line":115,"column":13,"nodeType":"807","messageId":"808","endLine":115,"endColumn":24},{"ruleId":"891","severity":1,"message":"892","line":283,"column":95,"nodeType":"893","messageId":"894","endLine":283,"endColumn":97},{"ruleId":"805","severity":1,"message":"985","line":1,"column":8,"nodeType":"807","messageId":"808","endLine":1,"endColumn":13},{"ruleId":"805","severity":1,"message":"864","line":2,"column":9,"nodeType":"807","messageId":"808","endLine":2,"endColumn":12},{"ruleId":"805","severity":1,"message":"986","line":30,"column":30,"nodeType":"807","messageId":"808","endLine":30,"endColumn":41},{"ruleId":"805","severity":1,"message":"987","line":69,"column":19,"nodeType":"807","messageId":"808","endLine":69,"endColumn":30},{"ruleId":"895","severity":1,"message":"896","line":78,"column":7,"nodeType":"897","messageId":"898","endLine":103,"endColumn":8},{"ruleId":"868","severity":1,"message":"900","line":109,"column":6,"nodeType":"870","endLine":109,"endColumn":20,"suggestions":"988"},{"ruleId":"868","severity":1,"message":"989","line":112,"column":7,"nodeType":"870","endLine":112,"endColumn":17,"suggestions":"990"},{"ruleId":"891","severity":1,"message":"892","line":124,"column":57,"nodeType":"893","messageId":"894","endLine":124,"endColumn":59},{"ruleId":"891","severity":1,"message":"892","line":64,"column":28,"nodeType":"893","messageId":"894","endLine":64,"endColumn":30},{"ruleId":"891","severity":1,"message":"899","line":78,"column":23,"nodeType":"893","messageId":"894","endLine":78,"endColumn":25},{"ruleId":"891","severity":1,"message":"899","line":78,"column":50,"nodeType":"893","messageId":"894","endLine":78,"endColumn":52},{"ruleId":"868","severity":1,"message":"991","line":81,"column":8,"nodeType":"870","endLine":81,"endColumn":16,"suggestions":"992"},{"ruleId":"891","severity":1,"message":"899","line":84,"column":22,"nodeType":"893","messageId":"894","endLine":84,"endColumn":24},{"ruleId":"891","severity":1,"message":"899","line":84,"column":48,"nodeType":"893","messageId":"894","endLine":84,"endColumn":50},{"ruleId":"868","severity":1,"message":"991","line":87,"column":8,"nodeType":"870","endLine":87,"endColumn":15,"suggestions":"993"},{"ruleId":"868","severity":1,"message":"994","line":105,"column":15,"nodeType":"914","endLine":107,"endColumn":6},{"ruleId":"868","severity":1,"message":"995","line":111,"column":8,"nodeType":"870","endLine":111,"endColumn":24,"suggestions":"996"},{"ruleId":"891","severity":1,"message":"892","line":115,"column":56,"nodeType":"893","messageId":"894","endLine":115,"endColumn":58},{"ruleId":"997","severity":1,"message":"998","line":150,"column":21,"nodeType":"999","messageId":"1000","endLine":150,"endColumn":87},{"ruleId":"997","severity":1,"message":"998","line":154,"column":21,"nodeType":"999","messageId":"1000","endLine":154,"endColumn":79},{"ruleId":"891","severity":1,"message":"892","line":258,"column":93,"nodeType":"893","messageId":"894","endLine":258,"endColumn":95},{"ruleId":"891","severity":1,"message":"899","line":399,"column":74,"nodeType":"893","messageId":"894","endLine":399,"endColumn":76},{"ruleId":"891","severity":1,"message":"899","line":458,"column":73,"nodeType":"893","messageId":"894","endLine":458,"endColumn":75},{"ruleId":"891","severity":1,"message":"892","line":503,"column":93,"nodeType":"893","messageId":"894","endLine":503,"endColumn":95},{"ruleId":"891","severity":1,"message":"892","line":517,"column":99,"nodeType":"893","messageId":"894","endLine":517,"endColumn":101},{"ruleId":"891","severity":1,"message":"892","line":58,"column":28,"nodeType":"893","messageId":"894","endLine":58,"endColumn":30},{"ruleId":"891","severity":1,"message":"899","line":83,"column":23,"nodeType":"893","messageId":"894","endLine":83,"endColumn":25},{"ruleId":"891","severity":1,"message":"899","line":83,"column":43,"nodeType":"893","messageId":"894","endLine":83,"endColumn":45},{"ruleId":"868","severity":1,"message":"991","line":86,"column":8,"nodeType":"870","endLine":86,"endColumn":16,"suggestions":"1001"},{"ruleId":"891","severity":1,"message":"899","line":90,"column":22,"nodeType":"893","messageId":"894","endLine":90,"endColumn":24},{"ruleId":"891","severity":1,"message":"899","line":90,"column":41,"nodeType":"893","messageId":"894","endLine":90,"endColumn":43},{"ruleId":"868","severity":1,"message":"991","line":93,"column":8,"nodeType":"870","endLine":93,"endColumn":15,"suggestions":"1002"},{"ruleId":"891","severity":1,"message":"899","line":363,"column":74,"nodeType":"893","messageId":"894","endLine":363,"endColumn":76},{"ruleId":"891","severity":1,"message":"899","line":421,"column":73,"nodeType":"893","messageId":"894","endLine":421,"endColumn":75},{"ruleId":"891","severity":1,"message":"892","line":56,"column":60,"nodeType":"893","messageId":"894","endLine":56,"endColumn":62},{"ruleId":"997","severity":1,"message":"998","line":65,"column":36,"nodeType":"999","messageId":"1000","endLine":65,"endColumn":83},{"ruleId":"868","severity":1,"message":"994","line":73,"column":15,"nodeType":"914","endLine":76,"endColumn":6},{"ruleId":"868","severity":1,"message":"1003","line":76,"column":7,"nodeType":"870","endLine":76,"endColumn":9,"suggestions":"1004"},{"ruleId":"895","severity":1,"message":"896","line":132,"column":9,"nodeType":"897","messageId":"898","endLine":158,"endColumn":10},{"ruleId":"868","severity":1,"message":"900","line":171,"column":8,"nodeType":"870","endLine":171,"endColumn":22,"suggestions":"1005"},{"ruleId":"868","severity":1,"message":"1006","line":175,"column":8,"nodeType":"870","endLine":175,"endColumn":10,"suggestions":"1007"},{"ruleId":"891","severity":1,"message":"892","line":188,"column":59,"nodeType":"893","messageId":"894","endLine":188,"endColumn":61},{"ruleId":"891","severity":1,"message":"892","line":235,"column":53,"nodeType":"893","messageId":"894","endLine":235,"endColumn":55},{"ruleId":"805","severity":1,"message":"1008","line":12,"column":12,"nodeType":"807","messageId":"808","endLine":12,"endColumn":25},{"ruleId":"895","severity":1,"message":"896","line":42,"column":9,"nodeType":"897","messageId":"898","endLine":67,"endColumn":10},{"ruleId":"868","severity":1,"message":"900","line":80,"column":8,"nodeType":"870","endLine":80,"endColumn":22,"suggestions":"1009"},{"ruleId":"868","severity":1,"message":"1006","line":83,"column":8,"nodeType":"870","endLine":83,"endColumn":10,"suggestions":"1010"},{"ruleId":"891","severity":1,"message":"892","line":91,"column":59,"nodeType":"893","messageId":"894","endLine":91,"endColumn":61},{"ruleId":"891","severity":1,"message":"892","line":129,"column":53,"nodeType":"893","messageId":"894","endLine":129,"endColumn":55},{"ruleId":"805","severity":1,"message":"970","line":4,"column":22,"nodeType":"807","messageId":"808","endLine":4,"endColumn":31},{"ruleId":"912","severity":1,"message":"913","line":103,"column":79,"nodeType":"1011","messageId":"1012","endLine":103,"endColumn":86},{"ruleId":"912","severity":1,"message":"913","line":111,"column":79,"nodeType":"1011","messageId":"1012","endLine":111,"endColumn":86},{"ruleId":"805","severity":1,"message":"810","line":2,"column":8,"nodeType":"807","messageId":"808","endLine":2,"endColumn":20},{"ruleId":"805","severity":1,"message":"1013","line":5,"column":8,"nodeType":"807","messageId":"808","endLine":5,"endColumn":20},{"ruleId":"805","severity":1,"message":"1014","line":8,"column":28,"nodeType":"807","messageId":"808","endLine":8,"endColumn":34},{"ruleId":"805","severity":1,"message":"1015","line":2,"column":46,"nodeType":"807","messageId":"808","endLine":2,"endColumn":50},{"ruleId":"805","severity":1,"message":"1016","line":3,"column":19,"nodeType":"807","messageId":"808","endLine":3,"endColumn":29},{"ruleId":"805","severity":1,"message":"1013","line":4,"column":8,"nodeType":"807","messageId":"808","endLine":4,"endColumn":20},{"ruleId":"805","severity":1,"message":"1017","line":4,"column":9,"nodeType":"807","messageId":"808","endLine":4,"endColumn":20},{"ruleId":"805","severity":1,"message":"1018","line":4,"column":22,"nodeType":"807","messageId":"808","endLine":4,"endColumn":33},{"ruleId":"805","severity":1,"message":"1019","line":5,"column":8,"nodeType":"807","messageId":"808","endLine":5,"endColumn":14},{"ruleId":"805","severity":1,"message":"985","line":1,"column":8,"nodeType":"807","messageId":"808","endLine":1,"endColumn":13},{"ruleId":"1020","severity":1,"message":"1021","line":10,"column":13,"nodeType":"1022","endLine":10,"endColumn":31},{"ruleId":"1023","severity":1,"message":"1024","line":17,"column":15,"nodeType":"1022","endLine":17,"endColumn":27},{"ruleId":"1020","severity":1,"message":"1021","line":18,"column":17,"nodeType":"1022","endLine":18,"endColumn":70},{"ruleId":"1023","severity":1,"message":"1024","line":20,"column":15,"nodeType":"1022","endLine":20,"endColumn":27},{"ruleId":"1020","severity":1,"message":"1021","line":21,"column":17,"nodeType":"1022","endLine":21,"endColumn":66},{"ruleId":"805","severity":1,"message":"985","line":1,"column":8,"nodeType":"807","messageId":"808","endLine":1,"endColumn":13},{"ruleId":"805","severity":1,"message":"864","line":2,"column":9,"nodeType":"807","messageId":"808","endLine":2,"endColumn":12},{"ruleId":"801","replacedBy":"1025"},{"ruleId":"803","replacedBy":"1026"},{"ruleId":"891","severity":1,"message":"899","line":25,"column":26,"nodeType":"893","messageId":"894","endLine":25,"endColumn":28},{"ruleId":"805","severity":1,"message":"1027","line":31,"column":13,"nodeType":"807","messageId":"808","endLine":31,"endColumn":22},"no-native-reassign",["1028"],"no-negated-in-lhs",["1029"],"no-unused-vars","'SignUp' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'PrivateRoute' is defined but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["1030","1031"],["1032","1033"],["1034","1035"],["1036","1037"],["1038","1039"],["1040","1041"],["1042","1043"],["1044","1045"],["1046","1047"],["1048","1049"],["1050","1051"],["1052","1053"],["1054","1055"],["1056","1057"],["1058","1059"],["1060","1061"],["1062","1063"],["1064","1065"],["1066","1067"],["1068","1069"],["1070","1071"],["1072","1073"],["1074","1075"],["1076","1077"],["1078","1079"],["1080","1081"],["1082","1083"],["1084","1085"],["1086","1087"],["1088","1089"],["1090","1091"],["1092","1093"],["1094","1095"],["1096","1097"],["1098","1099"],["1100","1101"],["1102","1103"],["1104","1105"],["1106","1107"],["1108","1109"],["1110","1111"],["1112","1113"],["1114","1115"],["1116","1117"],["1118","1119"],["1120","1121"],"'React' is defined but never used.","'Col' is defined but never used.","'Modal' is defined but never used.","'Row' is defined but never used.","'Toast' is defined but never used.","'isOpenProfile' is assigned a value but never used.","'setIsOpenProfile' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'downloadFiles'. Either include it or remove the dependency array.","ArrayExpression",["1122"],"'netError' is assigned a value but never used.","'setNetError' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getLastNews' and 'gets'. Either include them or remove the dependency array.",["1123"],"'getAllByDisplayValue' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property fileUploadedFlag.","MemberExpression","unexpectedWhitespace",{"range":"1124","text":"1125"},["1126"],"'allData' is assigned a value but never used.","'setLimit' is assigned a value but never used.","Assignments to the 'date' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","Assignments to the 'date3' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'date6' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'date12' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array.",["1127"],["1128"],"'st' is defined but never used.",["1129"],"React Hook useEffect has missing dependencies: 'date', 'firstAll', and 'props'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentPage' needs the current value of 'firstAll'.",["1130"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Redirect' is defined but never used.","'history' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'setApi' and 'setLoading'. Either include them or remove the dependency array.",["1131"],["1132"],["1133"],["1134"],["1135"],"'useState' is defined but never used.","'edit' is assigned a value but never used.",["1136"],["1137"],["1138"],["1139"],["1140"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'regSuccess'. Either include it or remove the dependency array.",["1141"],"React Hook useEffect has missing dependencies: 'TranslateExp', 'customStyles', and 'optionsPrice'. Either include them or remove the dependency array.",["1142"],"'useEffect' is defined but never used.","'authApi' is defined but never used.","'userApi' is defined but never used.","'userList' is assigned a value but never used.","'setUserList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.allInfo' and 'props.dateAll'. Either include them or remove the dependency array. If 'setDate' needs the current value of 'props.dateAll', you can also switch to useReducer instead of useState and read 'props.dateAll' in the reducer.",["1143"],"React Hook useEffect has missing dependencies: 'TranslateExp', 'customStyles', 'optionsPrice', and 'props.allInfo'. Either include them or remove the dependency array.",["1144"],"'loadingSelect' is assigned a value but never used.",["1145"],["1146"],["1147"],["1148"],"'differencePeriod' is defined but never used.","'start' is assigned a value but never used.","'middle' is assigned a value but never used.","'end' is assigned a value but never used.",["1149"],["1150"],["1151"],["1152"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["1153"],["1154"],"'setLoadingSelect' is assigned a value but never used.","'selectData' is assigned a value but never used.",["1155"],["1156"],"'useContext' is defined but never used.","React Hook useEffect has missing dependencies: 'allInfo', 'dateAll', 'firstAll', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1157"],"'Container' is defined but never used.","'Card' is defined but never used.","'ToastEx' is defined but never used.","'currentRole' is assigned a value but never used.","'validationMsg' is assigned a value but never used.","'setValidationMsg' is assigned a value but never used.","'setStatus2' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'requestBody'. Either include it or remove the dependency array. You can also do a functional update 'setRequestBody(r => ...)' if you only need 'requestBody' in the 'setRequestBody' call.",["1158"],"React Hook useEffect has a missing dependency: 'requestBody.role'. Either include it or remove the dependency array.",["1159"],"'names' is assigned a value but never used.","'failedField' is defined but never used.","'react' is defined but never used.","'uploadExcel' is assigned a value but never used.","'setThisUser' is assigned a value but never used.",["1160"],"React Hook useEffect has a missing dependency: 'filterData'. Either include it or remove the dependency array.",["1161"],"React Hook useEffect has a missing dependency: 'calculatePrice'. Either include it or remove the dependency array.",["1162"],["1163"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'getDrc'. Either include it or remove the dependency array.",["1164"],"no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor",["1165"],["1166"],"React Hook useEffect has a missing dependency: 'getDrugsList'. Either include it or remove the dependency array.",["1167"],["1168"],"React Hook useEffect has a missing dependency: 'setApi'. Either include it or remove the dependency array.",["1169"],"'setStateValue' is assigned a value but never used.",["1170"],["1171"],"ReturnStatement","expectedReturnValue","'EditSettings' is defined but never used.","'Switch' is defined but never used.","'File' is defined but never used.","'useHistory' is defined but never used.","'NumberToStr' is defined but never used.","'StrtoNumber' is defined but never used.","'Select' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1028"],["1029"],"'isLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"1172","fix":"1173","desc":"1174"},{"messageId":"1175","fix":"1176","desc":"1177"},{"messageId":"1172","fix":"1178","desc":"1174"},{"messageId":"1175","fix":"1179","desc":"1177"},{"messageId":"1172","fix":"1180","desc":"1174"},{"messageId":"1175","fix":"1181","desc":"1177"},{"messageId":"1172","fix":"1182","desc":"1174"},{"messageId":"1175","fix":"1183","desc":"1177"},{"messageId":"1172","fix":"1184","desc":"1174"},{"messageId":"1175","fix":"1185","desc":"1177"},{"messageId":"1172","fix":"1186","desc":"1174"},{"messageId":"1175","fix":"1187","desc":"1177"},{"messageId":"1172","fix":"1188","desc":"1174"},{"messageId":"1175","fix":"1189","desc":"1177"},{"messageId":"1172","fix":"1190","desc":"1174"},{"messageId":"1175","fix":"1191","desc":"1177"},{"messageId":"1172","fix":"1192","desc":"1174"},{"messageId":"1175","fix":"1193","desc":"1177"},{"messageId":"1172","fix":"1194","desc":"1174"},{"messageId":"1175","fix":"1195","desc":"1177"},{"messageId":"1172","fix":"1196","desc":"1174"},{"messageId":"1175","fix":"1197","desc":"1177"},{"messageId":"1172","fix":"1198","desc":"1174"},{"messageId":"1175","fix":"1199","desc":"1177"},{"messageId":"1172","fix":"1200","desc":"1174"},{"messageId":"1175","fix":"1201","desc":"1177"},{"messageId":"1172","fix":"1202","desc":"1174"},{"messageId":"1175","fix":"1203","desc":"1177"},{"messageId":"1172","fix":"1204","desc":"1174"},{"messageId":"1175","fix":"1205","desc":"1177"},{"messageId":"1172","fix":"1206","desc":"1174"},{"messageId":"1175","fix":"1207","desc":"1177"},{"messageId":"1172","fix":"1208","desc":"1174"},{"messageId":"1175","fix":"1209","desc":"1177"},{"messageId":"1172","fix":"1210","desc":"1174"},{"messageId":"1175","fix":"1211","desc":"1177"},{"messageId":"1172","fix":"1212","desc":"1174"},{"messageId":"1175","fix":"1213","desc":"1177"},{"messageId":"1172","fix":"1214","desc":"1174"},{"messageId":"1175","fix":"1215","desc":"1177"},{"messageId":"1172","fix":"1216","desc":"1174"},{"messageId":"1175","fix":"1217","desc":"1177"},{"messageId":"1172","fix":"1218","desc":"1174"},{"messageId":"1175","fix":"1219","desc":"1177"},{"messageId":"1172","fix":"1220","desc":"1174"},{"messageId":"1175","fix":"1221","desc":"1177"},{"messageId":"1172","fix":"1222","desc":"1174"},{"messageId":"1175","fix":"1223","desc":"1177"},{"messageId":"1172","fix":"1224","desc":"1174"},{"messageId":"1175","fix":"1225","desc":"1177"},{"messageId":"1172","fix":"1226","desc":"1174"},{"messageId":"1175","fix":"1227","desc":"1177"},{"messageId":"1172","fix":"1228","desc":"1174"},{"messageId":"1175","fix":"1229","desc":"1177"},{"messageId":"1172","fix":"1230","desc":"1174"},{"messageId":"1175","fix":"1231","desc":"1177"},{"messageId":"1172","fix":"1232","desc":"1174"},{"messageId":"1175","fix":"1233","desc":"1177"},{"messageId":"1172","fix":"1234","desc":"1174"},{"messageId":"1175","fix":"1235","desc":"1177"},{"messageId":"1172","fix":"1236","desc":"1174"},{"messageId":"1175","fix":"1237","desc":"1177"},{"messageId":"1172","fix":"1238","desc":"1174"},{"messageId":"1175","fix":"1239","desc":"1177"},{"messageId":"1172","fix":"1240","desc":"1174"},{"messageId":"1175","fix":"1241","desc":"1177"},{"messageId":"1172","fix":"1242","desc":"1174"},{"messageId":"1175","fix":"1243","desc":"1177"},{"messageId":"1172","fix":"1244","desc":"1174"},{"messageId":"1175","fix":"1245","desc":"1177"},{"messageId":"1172","fix":"1246","desc":"1174"},{"messageId":"1175","fix":"1247","desc":"1177"},{"messageId":"1172","fix":"1248","desc":"1174"},{"messageId":"1175","fix":"1249","desc":"1177"},{"messageId":"1172","fix":"1250","desc":"1174"},{"messageId":"1175","fix":"1251","desc":"1177"},{"messageId":"1172","fix":"1252","desc":"1174"},{"messageId":"1175","fix":"1253","desc":"1177"},{"messageId":"1172","fix":"1254","desc":"1174"},{"messageId":"1175","fix":"1255","desc":"1177"},{"messageId":"1172","fix":"1256","desc":"1174"},{"messageId":"1175","fix":"1257","desc":"1177"},{"messageId":"1172","fix":"1258","desc":"1174"},{"messageId":"1175","fix":"1259","desc":"1177"},{"messageId":"1172","fix":"1260","desc":"1174"},{"messageId":"1175","fix":"1261","desc":"1177"},{"messageId":"1172","fix":"1262","desc":"1174"},{"messageId":"1175","fix":"1263","desc":"1177"},{"messageId":"1172","fix":"1264","desc":"1174"},{"messageId":"1175","fix":"1265","desc":"1177"},{"messageId":"1172","fix":"1266","desc":"1174"},{"messageId":"1175","fix":"1267","desc":"1177"},{"desc":"1268","fix":"1269"},{"desc":"1270","fix":"1271"},[740,742],".",{"desc":"1268","fix":"1272"},{"desc":"1273","fix":"1274"},{"desc":"1275","fix":"1276"},{"desc":"1275","fix":"1277"},{"desc":"1278","fix":"1279"},{"desc":"1280","fix":"1281"},{"desc":"1280","fix":"1282"},{"desc":"1280","fix":"1283"},{"desc":"1280","fix":"1284"},{"desc":"1280","fix":"1285"},{"desc":"1280","fix":"1286"},{"desc":"1280","fix":"1287"},{"desc":"1280","fix":"1288"},{"desc":"1280","fix":"1289"},{"desc":"1280","fix":"1290"},{"desc":"1291","fix":"1292"},{"desc":"1293","fix":"1294"},{"desc":"1295","fix":"1296"},{"desc":"1297","fix":"1298"},{"desc":"1295","fix":"1299"},{"desc":"1300","fix":"1301"},{"desc":"1295","fix":"1302"},{"desc":"1300","fix":"1303"},{"desc":"1295","fix":"1304"},{"desc":"1300","fix":"1305"},{"desc":"1295","fix":"1306"},{"desc":"1300","fix":"1307"},{"desc":"1295","fix":"1308"},{"desc":"1300","fix":"1309"},{"desc":"1295","fix":"1310"},{"desc":"1300","fix":"1311"},{"desc":"1312","fix":"1313"},{"desc":"1314","fix":"1315"},{"desc":"1316","fix":"1317"},{"desc":"1275","fix":"1318"},{"desc":"1319","fix":"1320"},{"desc":"1321","fix":"1322"},{"desc":"1323","fix":"1324"},{"desc":"1325","fix":"1326"},{"desc":"1321","fix":"1327"},{"desc":"1323","fix":"1328"},{"desc":"1329","fix":"1330"},{"desc":"1275","fix":"1331"},{"desc":"1332","fix":"1333"},{"desc":"1275","fix":"1334"},{"desc":"1332","fix":"1335"},"removeEscape",{"range":"1336","text":"1337"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1338","text":"1339"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1340","text":"1337"},{"range":"1341","text":"1339"},{"range":"1342","text":"1337"},{"range":"1343","text":"1339"},{"range":"1344","text":"1337"},{"range":"1345","text":"1339"},{"range":"1346","text":"1337"},{"range":"1347","text":"1339"},{"range":"1348","text":"1337"},{"range":"1349","text":"1339"},{"range":"1350","text":"1337"},{"range":"1351","text":"1339"},{"range":"1352","text":"1337"},{"range":"1353","text":"1339"},{"range":"1354","text":"1337"},{"range":"1355","text":"1339"},{"range":"1356","text":"1337"},{"range":"1357","text":"1339"},{"range":"1358","text":"1337"},{"range":"1359","text":"1339"},{"range":"1360","text":"1337"},{"range":"1361","text":"1339"},{"range":"1362","text":"1337"},{"range":"1363","text":"1339"},{"range":"1364","text":"1337"},{"range":"1365","text":"1339"},{"range":"1366","text":"1337"},{"range":"1367","text":"1339"},{"range":"1368","text":"1337"},{"range":"1369","text":"1339"},{"range":"1370","text":"1337"},{"range":"1371","text":"1339"},{"range":"1372","text":"1337"},{"range":"1373","text":"1339"},{"range":"1374","text":"1337"},{"range":"1375","text":"1339"},{"range":"1376","text":"1337"},{"range":"1377","text":"1339"},{"range":"1378","text":"1337"},{"range":"1379","text":"1339"},{"range":"1380","text":"1337"},{"range":"1381","text":"1339"},{"range":"1382","text":"1337"},{"range":"1383","text":"1339"},{"range":"1384","text":"1337"},{"range":"1385","text":"1339"},{"range":"1386","text":"1337"},{"range":"1387","text":"1339"},{"range":"1388","text":"1337"},{"range":"1389","text":"1339"},{"range":"1390","text":"1337"},{"range":"1391","text":"1339"},{"range":"1392","text":"1337"},{"range":"1393","text":"1339"},{"range":"1394","text":"1337"},{"range":"1395","text":"1339"},{"range":"1396","text":"1337"},{"range":"1397","text":"1339"},{"range":"1398","text":"1337"},{"range":"1399","text":"1339"},{"range":"1400","text":"1337"},{"range":"1401","text":"1339"},{"range":"1402","text":"1337"},{"range":"1403","text":"1339"},{"range":"1404","text":"1337"},{"range":"1405","text":"1339"},{"range":"1406","text":"1337"},{"range":"1407","text":"1339"},{"range":"1408","text":"1337"},{"range":"1409","text":"1339"},{"range":"1410","text":"1337"},{"range":"1411","text":"1339"},{"range":"1412","text":"1337"},{"range":"1413","text":"1339"},{"range":"1414","text":"1337"},{"range":"1415","text":"1339"},{"range":"1416","text":"1337"},{"range":"1417","text":"1339"},{"range":"1418","text":"1337"},{"range":"1419","text":"1339"},{"range":"1420","text":"1337"},{"range":"1421","text":"1339"},{"range":"1422","text":"1337"},{"range":"1423","text":"1339"},{"range":"1424","text":"1337"},{"range":"1425","text":"1339"},{"range":"1426","text":"1337"},{"range":"1427","text":"1339"},{"range":"1428","text":"1337"},{"range":"1429","text":"1339"},"Update the dependencies array to be: [downloadFiles, fileUploadedFlag]",{"range":"1430","text":"1431"},"Update the dependencies array to be: [getLastNews, gets]",{"range":"1432","text":"1433"},{"range":"1434","text":"1431"},"Update the dependencies array to be: [Api, filter]",{"range":"1435","text":"1436"},"Update the dependencies array to be: [filter, filterStatus]",{"range":"1437","text":"1438"},{"range":"1439","text":"1438"},"Update the dependencies array to be: [currentPageTab, date, firstAll, props, props.lang]",{"range":"1440","text":"1441"},"Update the dependencies array to be: [setApi, setLoading]",{"range":"1442","text":"1443"},{"range":"1444","text":"1443"},{"range":"1445","text":"1443"},{"range":"1446","text":"1443"},{"range":"1447","text":"1443"},{"range":"1448","text":"1443"},{"range":"1449","text":"1443"},{"range":"1450","text":"1443"},{"range":"1451","text":"1443"},{"range":"1452","text":"1443"},"Update the dependencies array to be: [regSuccess]",{"range":"1453","text":"1454"},"Update the dependencies array to be: [price, date, lang, TranslateExp, optionsPrice, customStyles]",{"range":"1455","text":"1456"},"Update the dependencies array to be: [props.allInfo, props.dateAll]",{"range":"1457","text":"1458"},"Update the dependencies array to be: [price, date, result, lang, TranslateExp, props.allInfo, optionsPrice, customStyles]",{"range":"1459","text":"1460"},{"range":"1461","text":"1458"},"Update the dependencies array to be: [price, date, lang, TranslateExp, props.allInfo, optionsPrice, customStyles]",{"range":"1462","text":"1463"},{"range":"1464","text":"1458"},{"range":"1465","text":"1463"},{"range":"1466","text":"1458"},{"range":"1467","text":"1463"},{"range":"1468","text":"1458"},{"range":"1469","text":"1463"},{"range":"1470","text":"1458"},{"range":"1471","text":"1463"},{"range":"1472","text":"1458"},{"range":"1473","text":"1463"},"Update the dependencies array to be: [allInfo, dateAll, firstAll, props]",{"range":"1474","text":"1475"},"Update the dependencies array to be: [requestBody, userId]",{"range":"1476","text":"1477"},"Update the dependencies array to be: [requestBody.role]",{"range":"1478","text":"1479"},{"range":"1480","text":"1438"},"Update the dependencies array to be: [filterData, respData]",{"range":"1481","text":"1482"},"Update the dependencies array to be: [cPrice, calculatePrice]",{"range":"1483","text":"1484"},"Update the dependencies array to be: [calculatePrice, price]",{"range":"1485","text":"1486"},"Update the dependencies array to be: [mfs, countries, getDrc]",{"range":"1487","text":"1488"},{"range":"1489","text":"1484"},{"range":"1490","text":"1486"},"Update the dependencies array to be: [getDrugsList]",{"range":"1491","text":"1492"},{"range":"1493","text":"1438"},"Update the dependencies array to be: [setApi]",{"range":"1494","text":"1495"},{"range":"1496","text":"1438"},{"range":"1497","text":"1495"},[4208,4209],"",[4208,4208],"\\",[4289,4290],[4289,4289],[4354,4355],[4354,4354],[4381,4382],[4381,4381],[4402,4403],[4402,4402],[4440,4441],[4440,4440],[4474,4475],[4474,4474],[4543,4544],[4543,4543],[4566,4567],[4566,4566],[4571,4572],[4571,4571],[4609,4610],[4609,4609],[4622,4623],[4622,4622],[4647,4648],[4647,4647],[4656,4657],[4656,4656],[4689,4690],[4689,4689],[4713,4714],[4713,4713],[4817,4818],[4817,4817],[4861,4862],[4861,4861],[4882,4883],[4882,4882],[4924,4925],[4924,4924],[4977,4978],[4977,4977],[5074,5075],[5074,5074],[5159,5160],[5159,5159],[5194,5195],[5194,5194],[5223,5224],[5223,5223],[5229,5230],[5229,5229],[5251,5252],[5251,5251],[5260,5261],[5260,5260],[5334,5335],[5334,5334],[5341,5342],[5341,5341],[5356,5357],[5356,5356],[5380,5381],[5380,5380],[5392,5393],[5392,5392],[5400,5401],[5400,5400],[5450,5451],[5450,5450],[5454,5455],[5454,5454],[5507,5508],[5507,5507],[5513,5514],[5513,5513],[5528,5529],[5528,5528],[5532,5533],[5532,5532],[5554,5555],[5554,5554],[5566,5567],[5566,5566],[5627,5628],[5627,5627],[5685,5686],[5685,5685],[5732,5733],[5732,5732],[5748,5749],[5748,5748],[1852,1870],"[downloadFiles, fileUploadedFlag]",[1380,1382],"[getLastNews, gets]",[1554,1572],[9607,9612],"[Api, filter]",[9691,9705],"[filter, filterStatus]",[2739,2753],[4293,4321],"[currentPageTab, date, firstAll, props, props.lang]",[1215,1217],"[setApi, setLoading]",[1372,1374],[1265,1267],[1214,1216],[1219,1221],[1234,1236],[1221,1223],[1218,1220],[1217,1219],[1207,1209],[2330,2332],"[regSuccess]",[9859,9878],"[price, date, lang, TranslateExp, optionsPrice, customStyles]",[2840,2842],"[props.allInfo, props.dateAll]",[15879,15906],"[price, date, result, lang, TranslateExp, props.allInfo, optionsPrice, customStyles]",[2890,2892],[15817,15836],"[price, date, lang, TranslateExp, props.allInfo, optionsPrice, customStyles]",[2882,2884],[15011,15030],[2985,2987],[16715,16734],[2905,2907],[16068,16087],[2869,2871],[14747,14766],[2653,2655],[14954,14973],[7161,7163],"[allInfo, dateAll, firstAll, props]",[3691,3699],"[requestBody, userId]",[3894,3896],"[requestBody.role]",[3385,3399],[3453,3463],"[filterData, respData]",[2720,2728],"[cPrice, calculatePrice]",[2905,2912],"[calculatePrice, price]",[3559,3575],"[mfs, countries, getDrc]",[3064,3072],[3274,3281],[2712,2714],"[getDrugsList]",[6411,6425],[6486,6488],"[setApi]",[2941,2955],[3014,3016]]